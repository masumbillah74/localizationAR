title: Timers;
msc=round_green;
hscale=3;

app,bsdlib,bsd_os.c;

...;
app->bsdlib: setsockopt(..., NRF_SO_RCVTIMEO, 30 seconds);
app->bsdlib: recv(buffer);
activate app;
bsdlib->bsd_os.c: bsd_os_timedwait(context, *remaining_timeout_in_out);
bsd_os.c->bsd_os.c: Start timer/thread;
bsd_os.c->bsd_os.c: Sleep;
---: Waiting for EGU1 to hit ...;
bsd_os.c<-: EGU1_IRQHandler (Priority 6);
bsdlib<-bsd_os.c: bsd_os_application_irq_handler();
activate bsdlib;
bsdlib->bsd_os.c: bsd_os_application_irq_clear();
activate bsd_os.c;
bsd_os.c->bsd_os.c: NVIC_ClearPendingIRQ(EGU2);
bsdlib<<bsd_os.c;
deactivate bsd_os.c;
bsd_os.c--bsd_os.c: Wake up timers/threads;
bsdlib>>bsd_os.c;
deactivate bsdlib;
bsd_os.c->bsd_os.c: return NRF_ETIMEDOUT/remaining;
bsdlib<-bsd_os.c;
bsdlib..bsdlib: If no timeout, data is\nready for consumption\nby the application;
app<-bsdlib: bytes recieved or -1,\nerrno NRF_ETIMEDOUT;
deactivate app;
...;
