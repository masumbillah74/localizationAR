
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20002860 	.word	0x20002860
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001d0d 	.word	0x00001d0d
   8:	00009ea7 	.word	0x00009ea7
   c:	00001d3d 	.word	0x00001d3d
		if (fdtable[fd].obj == NULL) {
  10:	00001d3d 	.word	0x00001d3d
  14:	00001d3d 	.word	0x00001d3d
  18:	00001d3d 	.word	0x00001d3d
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00001aad 	.word	0x00001aad
  30:	00001d3d 	.word	0x00001d3d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00001a65 	.word	0x00001a65
  3c:	00009e85 	.word	0x00009e85

00000040 <_irq_vector_table>:
  40:	00001ccd 0000a699 00001ccd 00001ccd     ................
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  60:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  70:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  80:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  90:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  a0:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  b0:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  c0:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  d0:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  e0:	00001ccd 00001ccd 00001ccd 00001ccd     ................
  f0:	00001ccd 00001ccd 00001ccd 00001ccd     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_FLASH_SIZE+0x44>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_FLASH_SIZE+0x12>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_FLASH_SIZE+0x10>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe6>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_FLASH_SIZE+0x3a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_FLASH_SIZE+0x38>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_FLASH_SIZE+0x5a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_FLASH_SIZE+0x6c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     38c:	d015      	beq.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     38e:	b375      	cbz	r5, 3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_FLASH_SIZE+0x3a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_FLASH_SIZE+0x76>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_FLASH_SIZE+0x12>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b08d      	sub	sp, #52	; 0x34
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     3fe:	2302      	movs	r3, #2
     400:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	u32_t ret;

	if (!enable) {
     402:	b930      	cbnz	r0, 412 <CONFIG_BT_RX_STACK_SIZE+0x12>
		return disable(handle);
     404:	f005 face 	bl	59a4 <disable.constprop.0>
     408:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     40a:	4630      	mov	r0, r6
     40c:	b00d      	add	sp, #52	; 0x34
     40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     412:	4f65      	ldr	r7, [pc, #404]	; (5a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x15c>)
     414:	f897 60c8 	ldrb.w	r6, [r7, #200]	; 0xc8
     418:	f016 0601 	ands.w	r6, r6, #1
     41c:	463c      	mov	r4, r7
     41e:	d001      	beq.n	424 <CONFIG_BT_RX_STACK_SIZE+0x24>
		return BT_HCI_ERR_CMD_DISALLOWED;
     420:	260c      	movs	r6, #12
     422:	e7f2      	b.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     424:	f897 9026 	ldrb.w	r9, [r7, #38]	; 0x26
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     428:	f897 8076 	ldrb.w	r8, [r7, #118]	; 0x76
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     42c:	2327      	movs	r3, #39	; 0x27
     42e:	fb09 3903 	mla	r9, r9, r3, r3
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     432:	4631      	mov	r1, r6
     434:	f817 0009 	ldrb.w	r0, [r7, r9]
     438:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     43c:	fb03 7808 	mla	r8, r3, r8, r7
     440:	f004 f920 	bl	4684 <ll_addr_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     444:	eb07 0509 	add.w	r5, r7, r9
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     448:	f105 0b02 	add.w	fp, r5, #2
     44c:	4601      	mov	r1, r0
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     44e:	4682      	mov	sl, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     450:	2206      	movs	r2, #6
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     452:	f108 0877 	add.w	r8, r8, #119	; 0x77
     456:	4658      	mov	r0, fp
     458:	f009 fd6c 	bl	9f34 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     45c:	2206      	movs	r2, #6
     45e:	4651      	mov	r1, sl
     460:	f108 0002 	add.w	r0, r8, #2
     464:	f009 fd66 	bl	9f34 <memcpy>
		if (pdu_adv->tx_addr &&
     468:	f817 3009 	ldrb.w	r3, [r7, r9]
     46c:	065b      	lsls	r3, r3, #25
     46e:	d46d      	bmi.n	54c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x100>
	u8_t ch_map = lll->chan_map;
     470:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     474:	2101      	movs	r1, #1
	u8_t ch_map = lll->chan_map;
     476:	f3c3 0302 	ubfx	r3, r3, #0, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     47a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	u8_t ch_map = lll->chan_map;
     47e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     482:	f009 fe79 	bl	a178 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     486:	2800      	cmp	r0, #0
     488:	d0ca      	beq.n	420 <CONFIG_BT_RX_STACK_SIZE+0x20>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     48a:	f817 1009 	ldrb.w	r1, [r7, r9]
		const u8_t adv_data_len = pdu_adv->len;
     48e:	786d      	ldrb	r5, [r5, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     490:	f001 010f 	and.w	r1, r1, #15
     494:	2902      	cmp	r1, #2
     496:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     49a:	d15f      	bne.n	55c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x110>
			adv_size += adv_data_len;
     49c:	3510      	adds	r5, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     49e:	00ed      	lsls	r5, r5, #3
     4a0:	4368      	muls	r0, r5
     4a2:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     4a6:	2564      	movs	r5, #100	; 0x64
     4a8:	fb05 0002 	mla	r0, r5, r2, r0
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     4ac:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4b0:	493e      	ldr	r1, [pc, #248]	; (5ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x160>)
	hdr->parent = parent;
     4b2:	61e4      	str	r4, [r4, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     4b4:	2700      	movs	r7, #0
	hdr->is_stop = 0U;
     4b6:	f367 0300 	bfi	r3, r7, #0, #1
     4ba:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
     4be:	2331      	movs	r3, #49	; 0x31
     4c0:	6023      	str	r3, [r4, #0]
     4c2:	e9c4 7705 	strd	r7, r7, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4c6:	a336      	add	r3, pc, #216	; (adr r3, 5a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x154>)
     4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
     4cc:	6067      	str	r7, [r4, #4]
	adv->evt.ticks_preempt_to_start =
     4ce:	60a7      	str	r7, [r4, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     4d0:	fba0 0101 	umull	r0, r1, r0, r1
     4d4:	f7ff fe14 	bl	100 <__aeabi_uldivmod>
     4d8:	60e0      	str	r0, [r4, #12]
	u16_t interval = adv->interval;
     4da:	f8b4 80ca 	ldrh.w	r8, [r4, #202]	; 0xca
	ticks_anchor = ticker_ticks_now_get();
     4de:	f00a f870 	bl	a5c2 <ticker_ticks_now_get>
		const u32_t ticks_slot = adv->evt.ticks_slot +
     4e2:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     4e4:	4a32      	ldr	r2, [pc, #200]	; (5b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x164>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     4e6:	f203 1147 	addw	r1, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     4ea:	6011      	str	r1, [r2, #0]
		ret = ticker_start_ext(
     4ec:	9209      	str	r2, [sp, #36]	; 0x24
     4ee:	4a31      	ldr	r2, [pc, #196]	; (5b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x168>)
     4f0:	e9cd 4206 	strd	r4, r2, [sp, #24]
     4f4:	4a30      	ldr	r2, [pc, #192]	; (5b8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16c>)
	ticks_anchor = ticker_ticks_now_get();
     4f6:	4605      	mov	r5, r0
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     4f8:	4830      	ldr	r0, [pc, #192]	; (5bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x170>)
		ret = ticker_start_ext(
     4fa:	e9cd 3204 	strd	r3, r2, [sp, #16]
     4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
     502:	e9cd 7302 	strd	r7, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     506:	fba8 0100 	umull	r0, r1, r8, r0
     50a:	2391      	movs	r3, #145	; 0x91
		ret = ticker_start_ext(
     50c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     510:	fb03 1108 	mla	r1, r3, r8, r1
     514:	a322      	add	r3, pc, #136	; (adr r3, 5a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x154>)
     516:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     51a:	f8cd 9020 	str.w	r9, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     51e:	f7ff fdef 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     522:	2103      	movs	r1, #3
     524:	e9cd 7000 	strd	r7, r0, [sp]
     528:	462b      	mov	r3, r5
     52a:	2202      	movs	r2, #2
     52c:	4638      	mov	r0, r7
     52e:	f003 ffd9 	bl	44e4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     532:	4649      	mov	r1, r9
     534:	f004 fed0 	bl	52d8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     538:	2800      	cmp	r0, #0
     53a:	f47f af71 	bne.w	420 <CONFIG_BT_RX_STACK_SIZE+0x20>
	adv->is_enabled = 1;
     53e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
     542:	f043 0301 	orr.w	r3, r3, #1
     546:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return 0;
     54a:	e75e      	b.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     54c:	2106      	movs	r1, #6
     54e:	4658      	mov	r0, fp
     550:	f009 fde6 	bl	a120 <mem_nz>
		if (pdu_adv->tx_addr &&
     554:	2800      	cmp	r0, #0
     556:	d18b      	bne.n	470 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x24>
			return BT_HCI_ERR_INVALID_PARAM;
     558:	2612      	movs	r6, #18
     55a:	e756      	b.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     55c:	2901      	cmp	r1, #1
		const u8_t rsp_data_len = pdu_scan->len;
     55e:	f898 3001 	ldrb.w	r3, [r8, #1]
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     562:	d017      	beq.n	594 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     564:	00db      	lsls	r3, r3, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     566:	3380      	adds	r3, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     568:	b971      	cbnz	r1, 588 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x13c>
				adv_size += adv_data_len;
     56a:	3510      	adds	r5, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     56c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     570:	00ed      	lsls	r5, r5, #3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     572:	f505 709a 	add.w	r0, r5, #308	; 0x134
     576:	3398      	adds	r3, #152	; 0x98
     578:	fb02 f700 	mul.w	r7, r2, r0
     57c:	441d      	add	r5, r3
			slot_us += dfe_get_duration_us();
     57e:	f005 fa9d 	bl	5abc <dfe_get_duration_us>
     582:	4428      	add	r0, r5
     584:	4438      	add	r0, r7
     586:	e791      	b.n	4ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x60>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     588:	2906      	cmp	r1, #6
     58a:	d0ee      	beq.n	56a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x11e>
		u32_t adv_size		= ll_hdr_size + ADVA_SIZE;
     58c:	2510      	movs	r5, #16
	u32_t slot_us	= EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     58e:	f44f 73aa 	mov.w	r3, #340	; 0x154
     592:	e7ed      	b.n	570 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x124>
				adv_size += TARGETA_SIZE;
     594:	2516      	movs	r5, #22
				slot_us += conn_ind_us;
     596:	f44f 732d 	mov.w	r3, #692	; 0x2b4
     59a:	e7e9      	b.n	570 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x124>
     59c:	f3af 8000 	nop.w
     5a0:	1afd498d 	.word	0x1afd498d
     5a4:	00000007 	.word	0x00000007
     5a8:	20000f80 	.word	0x20000f80
     5ac:	3b9aca00 	.word	0x3b9aca00
     5b0:	2000104c 	.word	0x2000104c
     5b4:	000052cd 	.word	0x000052cd
     5b8:	00005681 	.word	0x00005681
     5bc:	84e72a00 	.word	0x84e72a00

000005c0 <bt_ready_clb>:
 * The function starts advertising by the device when Bluetooth
 * has successfully initialized.
 *
 */
static void bt_ready_clb(int err)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
	if (err) {
     5c2:	4606      	mov	r6, r0
{
     5c4:	b088      	sub	sp, #32
	if (err) {
     5c6:	b128      	cbz	r0, 5d4 <bt_ready_clb+0x14>
		printk("[BT] - Callback initialization failed (err %d)\n", err);
     5c8:	4601      	mov	r1, r0
     5ca:	480f      	ldr	r0, [pc, #60]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)

	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY,BT_ADV_INTERVAL,BT_ADV_INTERVAL,NULL),
			      NULL, 0, sd, ARRAY_SIZE(sd));
	if (err) {
		printk("[BT] - Advertising failed to start (err %d)\n", err);
     5cc:	f008 fdcc 	bl	9168 <printk>
		return;
	}

	printk("Beacon started\n");
}
     5d0:	b008      	add	sp, #32
     5d2:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY,BT_ADV_INTERVAL,BT_ADV_INTERVAL,NULL),
     5d4:	4d0d      	ldr	r5, [pc, #52]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
	printk("[BT] - Initialization finished\n");
     5d6:	480e      	ldr	r0, [pc, #56]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
     5d8:	f008 fdc6 	bl	9168 <printk>
	err = bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY,BT_ADV_INTERVAL,BT_ADV_INTERVAL,NULL),
     5dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     5de:	ac03      	add	r4, sp, #12
     5e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     5e2:	682b      	ldr	r3, [r5, #0]
     5e4:	6023      	str	r3, [r4, #0]
     5e6:	2301      	movs	r3, #1
     5e8:	9300      	str	r3, [sp, #0]
     5ea:	4631      	mov	r1, r6
     5ec:	4b09      	ldr	r3, [pc, #36]	; (614 <CONFIG_BT_COMPANY_ID+0x23>)
     5ee:	4632      	mov	r2, r6
     5f0:	a803      	add	r0, sp, #12
     5f2:	f009 fd32 	bl	a05a <bt_le_adv_start>
	if (err) {
     5f6:	4601      	mov	r1, r0
     5f8:	b108      	cbz	r0, 5fe <CONFIG_BT_COMPANY_ID+0xd>
		printk("[BT] - Advertising failed to start (err %d)\n", err);
     5fa:	4807      	ldr	r0, [pc, #28]	; (618 <CONFIG_BT_COMPANY_ID+0x27>)
     5fc:	e7e6      	b.n	5cc <bt_ready_clb+0xc>
	printk("Beacon started\n");
     5fe:	4807      	ldr	r0, [pc, #28]	; (61c <CONFIG_BT_COMPANY_ID+0x2b>)
     600:	f008 fdb2 	bl	9168 <printk>
     604:	e7e4      	b.n	5d0 <bt_ready_clb+0x10>
     606:	bf00      	nop
     608:	0000baa4 	.word	0x0000baa4
     60c:	0000b840 	.word	0x0000b840
     610:	0000bad4 	.word	0x0000bad4
     614:	0000b898 	.word	0x0000b898
     618:	0000baf4 	.word	0x0000baf4
     61c:	0000bb21 	.word	0x0000bb21

00000620 <main>:
 * in never ending loop.
 * The loop is responsible for printing a message every second,
 * to inform that the app is still running.
 */
void main(void)
{
     620:	b510      	push	{r4, lr}
	int err;
	printk("Starting Beacon\n");
     622:	4819      	ldr	r0, [pc, #100]	; (688 <main+0x68>)
     624:	f008 fda0 	bl	9168 <printk>
	err = dfe_set_mode(dfe_config.dfe_mode);
     628:	2003      	movs	r0, #3
     62a:	f005 fa2d 	bl	5a88 <dfe_set_mode>
	if (err) {
     62e:	b138      	cbz	r0, 640 <main+0x20>
		printk("[DFE] - DFE mode is unknown\n");
     630:	4816      	ldr	r0, [pc, #88]	; (68c <main+0x6c>)
		printk("[DFE] - DFE duration value out of range\n");
     632:	f008 fd99 	bl	9168 <printk>

	while(1) {
		printk("Running\r\n");
		k_sleep(K_MSEC(1000));
	}
}
     636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Beacon stopped - Error\n");
     63a:	4815      	ldr	r0, [pc, #84]	; (690 <main+0x70>)
     63c:	f008 bd94 	b.w	9168 <printk>
	err = dfe_set_duration(dfe_config.dfe_duration);
     640:	200a      	movs	r0, #10
     642:	f005 fa2f 	bl	5aa4 <dfe_set_duration>
	if (err) {
     646:	b108      	cbz	r0, 64c <main+0x2c>
		printk("[DFE] - DFE duration value out of range\n");
     648:	4812      	ldr	r0, [pc, #72]	; (694 <main+0x74>)
     64a:	e7f2      	b.n	632 <main+0x12>
	BT_ADDR_SET_STATIC(&addr.a);
     64c:	4812      	ldr	r0, [pc, #72]	; (698 <main+0x78>)
     64e:	7983      	ldrb	r3, [r0, #6]
     650:	f063 033f 	orn	r3, r3, #63	; 0x3f
     654:	7183      	strb	r3, [r0, #6]
	err = bt_set_id_addr(&addr);
     656:	f002 fd43 	bl	30e0 <bt_set_id_addr>
	if (err) {
     65a:	4601      	mov	r1, r0
     65c:	b118      	cbz	r0, 666 <main+0x46>
		printk("[BT] - MAC setting error %d\n",err);
     65e:	480f      	ldr	r0, [pc, #60]	; (69c <main+0x7c>)
		printk("[BT] - Initialization failed (err %d)\n", err);
     660:	f008 fd82 	bl	9168 <printk>
		return err;
     664:	e7e7      	b.n	636 <main+0x16>
	err = bt_enable(bt_ready_clb);
     666:	480e      	ldr	r0, [pc, #56]	; (6a0 <main+0x80>)
     668:	f003 f80e 	bl	3688 <bt_enable>
	if (err) {
     66c:	4601      	mov	r1, r0
     66e:	b948      	cbnz	r0, 684 <main+0x64>
		printk("Running\r\n");
     670:	4c0c      	ldr	r4, [pc, #48]	; (6a4 <main+0x84>)
     672:	4620      	mov	r0, r4
     674:	f008 fd78 	bl	9168 <printk>
	return z_impl_k_sleep(timeout);
     678:	2100      	movs	r1, #0
     67a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     67e:	f008 f9df 	bl	8a40 <z_impl_k_sleep>
	while(1) {
     682:	e7f6      	b.n	672 <main+0x52>
		printk("[BT] - Initialization failed (err %d)\n", err);
     684:	4808      	ldr	r0, [pc, #32]	; (6a8 <main+0x88>)
     686:	e7eb      	b.n	660 <main+0x40>
     688:	0000bb31 	.word	0x0000bb31
     68c:	0000bb42 	.word	0x0000bb42
     690:	0000bb88 	.word	0x0000bb88
     694:	0000bb5f 	.word	0x0000bb5f
     698:	2000033c 	.word	0x2000033c
     69c:	0000bba0 	.word	0x0000bba0
     6a0:	000005c1 	.word	0x000005c1
     6a4:	0000bbe4 	.word	0x0000bbe4
     6a8:	0000bbbd 	.word	0x0000bbbd

000006ac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6ac:	680b      	ldr	r3, [r1, #0]
     6ae:	3301      	adds	r3, #1
     6b0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6b2:	4b01      	ldr	r3, [pc, #4]	; (6b8 <char_out+0xc>)
     6b4:	681b      	ldr	r3, [r3, #0]
     6b6:	4718      	bx	r3
     6b8:	200000e8 	.word	0x200000e8

000006bc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6c0:	b085      	sub	sp, #20
     6c2:	469b      	mov	fp, r3
     6c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     6c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 758 <_printk_dec_ulong+0x9c>
     6ca:	2c01      	cmp	r4, #1
     6cc:	bfb8      	it	lt
     6ce:	2401      	movlt	r4, #1
     6d0:	2b01      	cmp	r3, #1
     6d2:	bf0c      	ite	eq
     6d4:	2330      	moveq	r3, #48	; 0x30
     6d6:	2320      	movne	r3, #32
     6d8:	4615      	mov	r5, r2
     6da:	4606      	mov	r6, r0
     6dc:	468a      	mov	sl, r1
     6de:	9302      	str	r3, [sp, #8]
     6e0:	2701      	movs	r7, #1
     6e2:	f04f 080a 	mov.w	r8, #10
     6e6:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     6e8:	fbb5 f3f9 	udiv	r3, r5, r9
     6ec:	9301      	str	r3, [sp, #4]
     6ee:	b90a      	cbnz	r2, 6f4 <_printk_dec_ulong+0x38>
     6f0:	45a9      	cmp	r9, r5
     6f2:	d81f      	bhi.n	734 <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     6f4:	9b01      	ldr	r3, [sp, #4]
     6f6:	4651      	mov	r1, sl
     6f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
     6fc:	47b0      	blx	r6
			digits++;
     6fe:	3701      	adds	r7, #1
			found_largest_digit = 1;
     700:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     702:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     704:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
     708:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
     70c:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
     710:	f04f 030a 	mov.w	r3, #10
     714:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     718:	d1e6      	bne.n	6e8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     71a:	4651      	mov	r1, sl
     71c:	f105 0030 	add.w	r0, r5, #48	; 0x30
     720:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     722:	f1bb 0f03 	cmp.w	fp, #3
     726:	d102      	bne.n	72e <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
     728:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     72a:	2c00      	cmp	r4, #0
     72c:	dc0e      	bgt.n	74c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     72e:	b005      	add	sp, #20
     730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     734:	4544      	cmp	r4, r8
     736:	dbe4      	blt.n	702 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
     738:	f1bb 0f02 	cmp.w	fp, #2
     73c:	d8e1      	bhi.n	702 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     73e:	9802      	ldr	r0, [sp, #8]
     740:	9203      	str	r2, [sp, #12]
     742:	4651      	mov	r1, sl
     744:	47b0      	blx	r6
			digits++;
     746:	3701      	adds	r7, #1
     748:	9a03      	ldr	r2, [sp, #12]
     74a:	e7da      	b.n	702 <_printk_dec_ulong+0x46>
			out(' ', ctx);
     74c:	4651      	mov	r1, sl
     74e:	2020      	movs	r0, #32
     750:	47b0      	blx	r6
     752:	3c01      	subs	r4, #1
     754:	e7e9      	b.n	72a <_printk_dec_ulong+0x6e>
     756:	bf00      	nop
     758:	3b9aca00 	.word	0x3b9aca00

0000075c <__printk_hook_install>:
	_char_out = fn;
     75c:	4b01      	ldr	r3, [pc, #4]	; (764 <__printk_hook_install+0x8>)
     75e:	6018      	str	r0, [r3, #0]
}
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	200000e8 	.word	0x200000e8

00000768 <z_vprintk>:
{
     768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b08d      	sub	sp, #52	; 0x34
     76e:	461c      	mov	r4, r3
	char length_mod = 0;
     770:	2700      	movs	r7, #0
     772:	1e53      	subs	r3, r2, #1
{
     774:	4605      	mov	r5, r0
     776:	468b      	mov	fp, r1
     778:	9303      	str	r3, [sp, #12]
	int min_width = -1;
     77a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     77e:	46b8      	mov	r8, r7
			might_format = 0;
     780:	2600      	movs	r6, #0
					break;
     782:	e005      	b.n	790 <z_vprintk+0x28>
		if (!might_format) {
     784:	b96e      	cbnz	r6, 7a2 <z_vprintk+0x3a>
			if (*fmt != '%') {
     786:	2825      	cmp	r0, #37	; 0x25
     788:	f000 8171 	beq.w	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
				out((int)*fmt, ctx);
     78c:	4659      	mov	r1, fp
     78e:	47a8      	blx	r5
	while (*fmt) {
     790:	9b03      	ldr	r3, [sp, #12]
     792:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     796:	9303      	str	r3, [sp, #12]
     798:	2800      	cmp	r0, #0
     79a:	d1f3      	bne.n	784 <z_vprintk+0x1c>
}
     79c:	b00d      	add	sp, #52	; 0x34
     79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     7a2:	287a      	cmp	r0, #122	; 0x7a
     7a4:	d80a      	bhi.n	7bc <z_vprintk+0x54>
     7a6:	2862      	cmp	r0, #98	; 0x62
     7a8:	d810      	bhi.n	7cc <z_vprintk+0x64>
     7aa:	2830      	cmp	r0, #48	; 0x30
     7ac:	d054      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     7ae:	d845      	bhi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     7b0:	2825      	cmp	r0, #37	; 0x25
     7b2:	f000 815a 	beq.w	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     7b6:	282d      	cmp	r0, #45	; 0x2d
     7b8:	f000 815f 	beq.w	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
					out((int)'%', ctx);
     7bc:	4659      	mov	r1, fp
     7be:	2025      	movs	r0, #37	; 0x25
     7c0:	47a8      	blx	r5
					out((int)*fmt, ctx);
     7c2:	9b03      	ldr	r3, [sp, #12]
     7c4:	7818      	ldrb	r0, [r3, #0]
     7c6:	4659      	mov	r1, fp
     7c8:	47a8      	blx	r5
     7ca:	e7d9      	b.n	780 <z_vprintk+0x18>
     7cc:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     7d0:	2b17      	cmp	r3, #23
     7d2:	d8f3      	bhi.n	7bc <z_vprintk+0x54>
     7d4:	a201      	add	r2, pc, #4	; (adr r2, 7dc <z_vprintk+0x74>)
     7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     7da:	bf00      	nop
     7dc:	00000a63 	.word	0x00000a63
     7e0:	000008a7 	.word	0x000008a7
     7e4:	000007bd 	.word	0x000007bd
     7e8:	000007bd 	.word	0x000007bd
     7ec:	000007bd 	.word	0x000007bd
     7f0:	00000889 	.word	0x00000889
     7f4:	000008a7 	.word	0x000008a7
     7f8:	000007bd 	.word	0x000007bd
     7fc:	000007bd 	.word	0x000007bd
     800:	00000889 	.word	0x00000889
     804:	000007bd 	.word	0x000007bd
     808:	000007bd 	.word	0x000007bd
     80c:	000007bd 	.word	0x000007bd
     810:	00000949 	.word	0x00000949
     814:	000007bd 	.word	0x000007bd
     818:	000007bd 	.word	0x000007bd
     81c:	00000a33 	.word	0x00000a33
     820:	000007bd 	.word	0x000007bd
     824:	00000917 	.word	0x00000917
     828:	000007bd 	.word	0x000007bd
     82c:	000007bd 	.word	0x000007bd
     830:	00000845 	.word	0x00000845
     834:	000007bd 	.word	0x000007bd
     838:	00000889 	.word	0x00000889
			switch (*fmt) {
     83c:	2839      	cmp	r0, #57	; 0x39
     83e:	d91a      	bls.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     840:	2858      	cmp	r0, #88	; 0x58
     842:	d1bb      	bne.n	7bc <z_vprintk+0x54>
				if (*fmt == 'p') {
     844:	9b03      	ldr	r3, [sp, #12]
     846:	781b      	ldrb	r3, [r3, #0]
     848:	2b70      	cmp	r3, #112	; 0x70
     84a:	f040 8088 	bne.w	95e <CONFIG_ISR_STACK_SIZE+0x15e>
					x = va_arg(ap, unsigned int);
     84e:	f854 3b04 	ldr.w	r3, [r4], #4
     852:	9306      	str	r3, [sp, #24]
     854:	2200      	movs	r2, #0
     856:	e090      	b.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
				if (min_width < 0 && padding == PAD_NONE) {
     858:	f1b9 0f00 	cmp.w	r9, #0
     85c:	da0e      	bge.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     85e:	f1b8 0f00 	cmp.w	r8, #0
     862:	f000 810d 	beq.w	a80 <CONFIG_ISR_STACK_SIZE+0x280>
					min_width = *fmt - '0';
     866:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     86a:	f1b8 0f00 	cmp.w	r8, #0
     86e:	bf08      	it	eq
     870:	f04f 0802 	moveq.w	r8, #2
     874:	e78c      	b.n	790 <z_vprintk+0x28>
				if (min_width < 0) {
     876:	f1b9 0f00 	cmp.w	r9, #0
     87a:	dbf4      	blt.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
					min_width = 10 * min_width + *fmt - '0';
     87c:	230a      	movs	r3, #10
     87e:	fb03 0909 	mla	r9, r3, r9, r0
     882:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     886:	e7f0      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
				if (*fmt == 'h' && length_mod == 'h') {
     888:	2868      	cmp	r0, #104	; 0x68
     88a:	d103      	bne.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
     88c:	2f68      	cmp	r7, #104	; 0x68
     88e:	d106      	bne.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
					length_mod = 'H';
     890:	2748      	movs	r7, #72	; 0x48
     892:	e77d      	b.n	790 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     894:	286c      	cmp	r0, #108	; 0x6c
     896:	d102      	bne.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
     898:	2f6c      	cmp	r7, #108	; 0x6c
     89a:	f000 80f4 	beq.w	a86 <CONFIG_ISR_STACK_SIZE+0x286>
				} else if (length_mod == 0) {
     89e:	2f00      	cmp	r7, #0
     8a0:	d18c      	bne.n	7bc <z_vprintk+0x54>
     8a2:	4607      	mov	r7, r0
     8a4:	e774      	b.n	790 <z_vprintk+0x28>
				if (length_mod == 'z') {
     8a6:	2f7a      	cmp	r7, #122	; 0x7a
     8a8:	d102      	bne.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
					d = va_arg(ap, int);
     8aa:	f854 6b04 	ldr.w	r6, [r4], #4
     8ae:	e021      	b.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
				} else if (length_mod == 'l') {
     8b0:	2f6c      	cmp	r7, #108	; 0x6c
     8b2:	d0fa      	beq.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
				} else if (length_mod == 'L') {
     8b4:	2f4c      	cmp	r7, #76	; 0x4c
     8b6:	d1f8      	bne.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
					long long lld = va_arg(ap, long long);
     8b8:	3407      	adds	r4, #7
     8ba:	f024 0407 	bic.w	r4, r4, #7
     8be:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     8c6:	9b04      	ldr	r3, [sp, #16]
     8c8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     8cc:	9b05      	ldr	r3, [sp, #20]
     8ce:	9108      	str	r1, [sp, #32]
     8d0:	f143 0100 	adc.w	r1, r3, #0
     8d4:	9109      	str	r1, [sp, #36]	; 0x24
     8d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     8da:	2100      	movs	r1, #0
     8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8e0:	4299      	cmp	r1, r3
     8e2:	bf08      	it	eq
     8e4:	4290      	cmpeq	r0, r2
     8e6:	d204      	bcs.n	8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
						print_err(out, ctx);
     8e8:	4659      	mov	r1, fp
     8ea:	4628      	mov	r0, r5
     8ec:	f008 fc1b 	bl	9126 <print_err>
						break;
     8f0:	e746      	b.n	780 <z_vprintk+0x18>
					d = lld;
     8f2:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     8f4:	2e00      	cmp	r6, #0
     8f6:	da05      	bge.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
					out((int)'-', ctx);
     8f8:	4659      	mov	r1, fp
     8fa:	202d      	movs	r0, #45	; 0x2d
     8fc:	47a8      	blx	r5
					d = -d;
     8fe:	4276      	negs	r6, r6
					min_width--;
     900:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     904:	f8cd 9000 	str.w	r9, [sp]
     908:	4643      	mov	r3, r8
     90a:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
     90c:	4659      	mov	r1, fp
     90e:	4628      	mov	r0, r5
     910:	f7ff fed4 	bl	6bc <_printk_dec_ulong>
				break;
     914:	e734      	b.n	780 <z_vprintk+0x18>
				if (length_mod == 'z') {
     916:	2f7a      	cmp	r7, #122	; 0x7a
     918:	d102      	bne.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
					u = va_arg(ap, unsigned int);
     91a:	f854 2b04 	ldr.w	r2, [r4], #4
     91e:	e00f      	b.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
				} else if (length_mod == 'l') {
     920:	2f6c      	cmp	r7, #108	; 0x6c
     922:	d0fa      	beq.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
				} else if (length_mod == 'L') {
     924:	2f4c      	cmp	r7, #76	; 0x4c
     926:	d1f8      	bne.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
					unsigned long long llu =
     928:	3407      	adds	r4, #7
     92a:	f024 0407 	bic.w	r4, r4, #7
     92e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     932:	2100      	movs	r1, #0
     934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     938:	4299      	cmp	r1, r3
     93a:	bf08      	it	eq
     93c:	4290      	cmpeq	r0, r2
     93e:	d3d3      	bcc.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
				_printk_dec_ulong(out, ctx, u, padding,
     940:	f8cd 9000 	str.w	r9, [sp]
     944:	4643      	mov	r3, r8
     946:	e7e1      	b.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
				out('0', ctx);
     948:	4659      	mov	r1, fp
     94a:	2030      	movs	r0, #48	; 0x30
     94c:	47a8      	blx	r5
				out('x', ctx);
     94e:	4659      	mov	r1, fp
     950:	2078      	movs	r0, #120	; 0x78
     952:	47a8      	blx	r5
					min_width = 8;
     954:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     958:	f04f 0801 	mov.w	r8, #1
     95c:	e772      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
				} else if (length_mod == 'l') {
     95e:	2f6c      	cmp	r7, #108	; 0x6c
     960:	f43f af75 	beq.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
				} else if (length_mod == 'L') {
     964:	2f4c      	cmp	r7, #76	; 0x4c
     966:	f47f af72 	bne.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
					x = va_arg(ap, unsigned long long);
     96a:	1de3      	adds	r3, r4, #7
     96c:	f023 0307 	bic.w	r3, r3, #7
     970:	461c      	mov	r4, r3
     972:	f854 2b08 	ldr.w	r2, [r4], #8
     976:	9206      	str	r2, [sp, #24]
     978:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     97a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     97c:	2310      	movs	r3, #16
	int digits = 0;
     97e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     980:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
     982:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
     986:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     98a:	9906      	ldr	r1, [sp, #24]
     98c:	f1ca 0e20 	rsb	lr, sl, #32
     990:	f1aa 0c20 	sub.w	ip, sl, #32
     994:	fa21 f00a 	lsr.w	r0, r1, sl
     998:	fa02 fe0e 	lsl.w	lr, r2, lr
     99c:	ea40 000e 	orr.w	r0, r0, lr
     9a0:	fa22 fc0c 	lsr.w	ip, r2, ip
     9a4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     9a8:	f010 000f 	ands.w	r0, r0, #15
     9ac:	d107      	bne.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
     9ae:	9907      	ldr	r1, [sp, #28]
     9b0:	b911      	cbnz	r1, 9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
     9b2:	f1ba 0f00 	cmp.w	sl, #0
     9b6:	d125      	bne.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			nibble += nibble > 9 ? 87 : 48;
     9b8:	f04f 0c30 	mov.w	ip, #48	; 0x30
     9bc:	e005      	b.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
     9be:	2809      	cmp	r0, #9
     9c0:	bf8c      	ite	hi
     9c2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     9c6:	f04f 0c30 	movls.w	ip, #48	; 0x30
     9ca:	4460      	add	r0, ip
			out((int)nibble, ctx);
     9cc:	4659      	mov	r1, fp
     9ce:	b240      	sxtb	r0, r0
     9d0:	920a      	str	r2, [sp, #40]	; 0x28
     9d2:	9307      	str	r3, [sp, #28]
     9d4:	47a8      	blx	r5
			digits++;
     9d6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     9d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     9da:	3301      	adds	r3, #1
     9dc:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     9de:	9b07      	ldr	r3, [sp, #28]
     9e0:	f1ba 0f00 	cmp.w	sl, #0
     9e4:	d123      	bne.n	a2e <CONFIG_ISR_STACK_SIZE+0x22e>
	if (padding == PAD_SPACE_AFTER) {
     9e6:	f1b8 0f03 	cmp.w	r8, #3
     9ea:	f47f aec9 	bne.w	780 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     9ee:	9b04      	ldr	r3, [sp, #16]
     9f0:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     9f4:	2e00      	cmp	r6, #0
     9f6:	f77f aec3 	ble.w	780 <z_vprintk+0x18>
			out(' ', ctx);
     9fa:	4659      	mov	r1, fp
     9fc:	2020      	movs	r0, #32
     9fe:	47a8      	blx	r5
     a00:	3e01      	subs	r6, #1
     a02:	e7f7      	b.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		if (remaining-- <= min_width) {
     a04:	1e59      	subs	r1, r3, #1
     a06:	4599      	cmp	r9, r3
     a08:	910a      	str	r1, [sp, #40]	; 0x28
     a0a:	db07      	blt.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
			if (padding == PAD_ZERO_BEFORE) {
     a0c:	f1b8 0f01 	cmp.w	r8, #1
     a10:	d106      	bne.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     a12:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
     a14:	4659      	mov	r1, fp
     a16:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     a18:	47a8      	blx	r5
     a1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a1e:	e7b2      	b.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
			} else if (padding == PAD_SPACE_BEFORE) {
     a20:	f1b8 0f02 	cmp.w	r8, #2
     a24:	d1fa      	bne.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     a26:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     a28:	4659      	mov	r1, fp
     a2a:	2020      	movs	r0, #32
     a2c:	e7f4      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
			found_largest_digit = 1;
     a2e:	9607      	str	r6, [sp, #28]
     a30:	e7a9      	b.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
				char *s = va_arg(ap, char *);
     a32:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     a36:	46b2      	mov	sl, r6
     a38:	4653      	mov	r3, sl
     a3a:	f81a 0b01 	ldrb.w	r0, [sl], #1
     a3e:	b968      	cbnz	r0, a5c <CONFIG_ISR_STACK_SIZE+0x25c>
				if (padding == PAD_SPACE_AFTER) {
     a40:	f1b8 0f03 	cmp.w	r8, #3
     a44:	d121      	bne.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
					int remaining = min_width - (s - start);
     a46:	1b9e      	subs	r6, r3, r6
     a48:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     a4c:	2e00      	cmp	r6, #0
     a4e:	f77f ae97 	ble.w	780 <z_vprintk+0x18>
						out(' ', ctx);
     a52:	4659      	mov	r1, fp
     a54:	2020      	movs	r0, #32
     a56:	47a8      	blx	r5
     a58:	3e01      	subs	r6, #1
     a5a:	e7f7      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
					out((int)(*s++), ctx);
     a5c:	4659      	mov	r1, fp
     a5e:	47a8      	blx	r5
     a60:	e7ea      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
				out(c, ctx);
     a62:	f854 0b04 	ldr.w	r0, [r4], #4
     a66:	4659      	mov	r1, fp
     a68:	e6ae      	b.n	7c8 <z_vprintk+0x60>
				out((int)'%', ctx);
     a6a:	4659      	mov	r1, fp
     a6c:	e6ac      	b.n	7c8 <z_vprintk+0x60>
				length_mod = 0;
     a6e:	4637      	mov	r7, r6
				padding = PAD_NONE;
     a70:	46b0      	mov	r8, r6
				min_width = -1;
     a72:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     a76:	2601      	movs	r6, #1
     a78:	e68a      	b.n	790 <z_vprintk+0x28>
			switch (*fmt) {
     a7a:	f04f 0803 	mov.w	r8, #3
     a7e:	e687      	b.n	790 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     a80:	f04f 0801 	mov.w	r8, #1
     a84:	e684      	b.n	790 <z_vprintk+0x28>
					length_mod = 'L';
     a86:	274c      	movs	r7, #76	; 0x4c
     a88:	e682      	b.n	790 <z_vprintk+0x28>
			might_format = 0;
     a8a:	4606      	mov	r6, r0
		++fmt;
     a8c:	e680      	b.n	790 <z_vprintk+0x28>
     a8e:	bf00      	nop

00000a90 <vprintk>:
{
     a90:	b507      	push	{r0, r1, r2, lr}
     a92:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     a94:	2100      	movs	r1, #0
{
     a96:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     a98:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     a9a:	4803      	ldr	r0, [pc, #12]	; (aa8 <vprintk+0x18>)
     a9c:	a901      	add	r1, sp, #4
     a9e:	f7ff fe63 	bl	768 <z_vprintk>
}
     aa2:	b003      	add	sp, #12
     aa4:	f85d fb04 	ldr.w	pc, [sp], #4
     aa8:	000006ad 	.word	0x000006ad

00000aac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     aac:	b530      	push	{r4, r5, lr}
     aae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     ab0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ab4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     ab6:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ab8:	4805      	ldr	r0, [pc, #20]	; (ad0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     aba:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     abc:	a901      	add	r1, sp, #4
     abe:	f7ff fe53 	bl	768 <z_vprintk>

	if (ctx.count < ctx.max) {
     ac2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     ac6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     ac8:	bfb8      	it	lt
     aca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     acc:	b005      	add	sp, #20
     ace:	bd30      	pop	{r4, r5, pc}
     ad0:	00009143 	.word	0x00009143

00000ad4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     ad4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     ad6:	4910      	ldr	r1, [pc, #64]	; (b18 <enable_logger+0x44>)
     ad8:	4810      	ldr	r0, [pc, #64]	; (b1c <enable_logger+0x48>)
{
     ada:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
     adc:	2200      	movs	r2, #0
     ade:	f00a fbdf 	bl	b2a0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     ae2:	4d0f      	ldr	r5, [pc, #60]	; (b20 <enable_logger+0x4c>)
     ae4:	490f      	ldr	r1, [pc, #60]	; (b24 <enable_logger+0x50>)
     ae6:	2200      	movs	r2, #0
     ae8:	2300      	movs	r3, #0
     aea:	e9cd 2306 	strd	r2, r3, [sp, #24]
     aee:	2400      	movs	r4, #0
     af0:	230e      	movs	r3, #14
     af2:	e9cd 3403 	strd	r3, r4, [sp, #12]
     af6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     afa:	4b0b      	ldr	r3, [pc, #44]	; (b28 <enable_logger+0x54>)
     afc:	9400      	str	r4, [sp, #0]
     afe:	f44f 7240 	mov.w	r2, #768	; 0x300
     b02:	4628      	mov	r0, r5
     b04:	f008 f850 	bl	8ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     b08:	4908      	ldr	r1, [pc, #32]	; (b2c <enable_logger+0x58>)
     b0a:	4628      	mov	r0, r5
     b0c:	f00a fb56 	bl	b1bc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     b10:	4620      	mov	r0, r4
     b12:	b009      	add	sp, #36	; 0x24
     b14:	bd30      	pop	{r4, r5, pc}
     b16:	bf00      	nop
     b18:	00000b31 	.word	0x00000b31
     b1c:	200004a0 	.word	0x200004a0
     b20:	20000508 	.word	0x20000508
     b24:	20001920 	.word	0x20001920
     b28:	00000f49 	.word	0x00000f49
     b2c:	0000bbfc 	.word	0x0000bbfc

00000b30 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     b30:	4801      	ldr	r0, [pc, #4]	; (b38 <log_process_thread_timer_expiry_fn+0x8>)
     b32:	f007 bfab 	b.w	8a8c <z_impl_k_sem_give>
     b36:	bf00      	nop
     b38:	200003b4 	.word	0x200003b4

00000b3c <log_core_init>:
{
     b3c:	b508      	push	{r3, lr}
		log_msg_pool_init();
     b3e:	f000 fa65 	bl	100c <log_msg_pool_init>
		log_list_init(&list);
     b42:	4809      	ldr	r0, [pc, #36]	; (b68 <log_core_init+0x2c>)
     b44:	f008 fdad 	bl	96a2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     b48:	2304      	movs	r3, #4
     b4a:	2228      	movs	r2, #40	; 0x28
     b4c:	4907      	ldr	r1, [pc, #28]	; (b6c <log_core_init+0x30>)
     b4e:	4808      	ldr	r0, [pc, #32]	; (b70 <log_core_init+0x34>)
     b50:	f00a f916 	bl	ad80 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <log_core_init+0x38>)
     b56:	4a08      	ldr	r2, [pc, #32]	; (b78 <log_core_init+0x3c>)
     b58:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     b5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     b62:	f000 bc97 	b.w	1494 <log_output_timestamp_freq_set>
     b66:	bf00      	nop
     b68:	200004e4 	.word	0x200004e4
     b6c:	200035a0 	.word	0x200035a0
     b70:	200004ec 	.word	0x200004ec
     b74:	200000ec 	.word	0x200000ec
     b78:	000096e1 	.word	0x000096e1

00000b7c <dropped_notify>:
{
     b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     b7e:	4b0f      	ldr	r3, [pc, #60]	; (bbc <dropped_notify+0x40>)
     b80:	f3bf 8f5b 	dmb	ish
     b84:	2500      	movs	r5, #0
     b86:	e853 7f00 	ldrex	r7, [r3]
     b8a:	e843 5200 	strex	r2, r5, [r3]
     b8e:	2a00      	cmp	r2, #0
     b90:	d1f9      	bne.n	b86 <dropped_notify+0xa>
     b92:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     b96:	4c0a      	ldr	r4, [pc, #40]	; (bc0 <dropped_notify+0x44>)
     b98:	4e0a      	ldr	r6, [pc, #40]	; (bc4 <dropped_notify+0x48>)
     b9a:	1b36      	subs	r6, r6, r4
     b9c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     b9e:	42b5      	cmp	r5, r6
     ba0:	db00      	blt.n	ba4 <dropped_notify+0x28>
}
     ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     ba4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     ba6:	795b      	ldrb	r3, [r3, #5]
     ba8:	b12b      	cbz	r3, bb6 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     baa:	6823      	ldr	r3, [r4, #0]
     bac:	68db      	ldr	r3, [r3, #12]
     bae:	b113      	cbz	r3, bb6 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     bb0:	4639      	mov	r1, r7
     bb2:	4620      	mov	r0, r4
     bb4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     bb6:	3501      	adds	r5, #1
     bb8:	3410      	adds	r4, #16
     bba:	e7f0      	b.n	b9e <dropped_notify+0x22>
     bbc:	200004dc 	.word	0x200004dc
     bc0:	0000b818 	.word	0x0000b818
     bc4:	0000b838 	.word	0x0000b838

00000bc8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <log_dropped+0x1c>)
     bca:	f3bf 8f5b 	dmb	ish
     bce:	e853 2f00 	ldrex	r2, [r3]
     bd2:	3201      	adds	r2, #1
     bd4:	e843 2100 	strex	r1, r2, [r3]
     bd8:	2900      	cmp	r1, #0
     bda:	d1f8      	bne.n	bce <log_dropped+0x6>
     bdc:	f3bf 8f5b 	dmb	ish
}
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	200004dc 	.word	0x200004dc

00000be8 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     be8:	4a04      	ldr	r2, [pc, #16]	; (bfc <log_source_name_get+0x14>)
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <log_source_name_get+0x18>)
     bec:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     bee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     bf2:	bf34      	ite	cc
     bf4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     bf8:	2000      	movcs	r0, #0
}
     bfa:	4770      	bx	lr
     bfc:	0000b750 	.word	0x0000b750
     c00:	0000b818 	.word	0x0000b818

00000c04 <log_backend_enable>:
	id += backend - log_backend_get(0);
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
     c06:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     c08:	1ac3      	subs	r3, r0, r3
     c0a:	111b      	asrs	r3, r3, #4
     c0c:	3301      	adds	r3, #1
{
     c0e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     c10:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     c12:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     c14:	4c06      	ldr	r4, [pc, #24]	; (c30 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
     c16:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
     c18:	2201      	movs	r2, #1
     c1a:	715a      	strb	r2, [r3, #5]
     c1c:	7822      	ldrb	r2, [r4, #0]
     c1e:	b912      	cbnz	r2, c26 <log_backend_enable+0x22>
     c20:	4804      	ldr	r0, [pc, #16]	; (c34 <log_backend_enable+0x30>)
     c22:	f007 ff33 	bl	8a8c <z_impl_k_sem_give>
	backend_attached = true;
     c26:	2301      	movs	r3, #1
     c28:	7023      	strb	r3, [r4, #0]
}
     c2a:	bd10      	pop	{r4, pc}
     c2c:	0000b818 	.word	0x0000b818
     c30:	2000140e 	.word	0x2000140e
     c34:	200003b4 	.word	0x200003b4

00000c38 <log_init>:
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	4b11      	ldr	r3, [pc, #68]	; (c80 <log_init+0x48>)
     c3c:	f3bf 8f5b 	dmb	ish
     c40:	e853 5f00 	ldrex	r5, [r3]
     c44:	1c6a      	adds	r2, r5, #1
     c46:	e843 2100 	strex	r1, r2, [r3]
     c4a:	2900      	cmp	r1, #0
     c4c:	d1f8      	bne.n	c40 <log_init+0x8>
     c4e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     c52:	b92d      	cbnz	r5, c60 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     c54:	4c0b      	ldr	r4, [pc, #44]	; (c84 <log_init+0x4c>)
     c56:	4e0c      	ldr	r6, [pc, #48]	; (c88 <log_init+0x50>)
     c58:	1b36      	subs	r6, r6, r4
     c5a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     c5c:	42b5      	cmp	r5, r6
     c5e:	db00      	blt.n	c62 <log_init+0x2a>
}
     c60:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     c62:	7b23      	ldrb	r3, [r4, #12]
     c64:	b143      	cbz	r3, c78 <log_init+0x40>
			if (backend->api->init != NULL) {
     c66:	6823      	ldr	r3, [r4, #0]
     c68:	695b      	ldr	r3, [r3, #20]
     c6a:	b103      	cbz	r3, c6e <log_init+0x36>
				backend->api->init();
     c6c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     c6e:	2204      	movs	r2, #4
     c70:	2100      	movs	r1, #0
     c72:	4620      	mov	r0, r4
     c74:	f7ff ffc6 	bl	c04 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     c78:	3501      	adds	r5, #1
     c7a:	3410      	adds	r4, #16
     c7c:	e7ee      	b.n	c5c <log_init+0x24>
     c7e:	bf00      	nop
     c80:	200004e0 	.word	0x200004e0
     c84:	0000b818 	.word	0x0000b818
     c88:	0000b838 	.word	0x0000b838

00000c8c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     c8c:	4b16      	ldr	r3, [pc, #88]	; (ce8 <log_strdup+0x5c>)
     c8e:	4298      	cmp	r0, r3
{
     c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
     c92:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     c94:	d302      	bcc.n	c9c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     c96:	4b15      	ldr	r3, [pc, #84]	; (cec <log_strdup+0x60>)
     c98:	4298      	cmp	r0, r3
     c9a:	d320      	bcc.n	cde <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     c9c:	4814      	ldr	r0, [pc, #80]	; (cf0 <log_strdup+0x64>)
     c9e:	2200      	movs	r2, #0
     ca0:	2300      	movs	r3, #0
     ca2:	a901      	add	r1, sp, #4
     ca4:	f007 fa54 	bl	8150 <k_mem_slab_alloc>
	if (err != 0) {
     ca8:	4605      	mov	r5, r0
     caa:	b9d8      	cbnz	r0, ce4 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     cac:	2201      	movs	r2, #1
     cae:	9b01      	ldr	r3, [sp, #4]
     cb0:	f3bf 8f5b 	dmb	ish
     cb4:	e853 1f00 	ldrex	r1, [r3]
     cb8:	e843 2000 	strex	r0, r2, [r3]
     cbc:	2800      	cmp	r0, #0
     cbe:	d1f9      	bne.n	cb4 <log_strdup+0x28>
     cc0:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     cc4:	9801      	ldr	r0, [sp, #4]
     cc6:	4621      	mov	r1, r4
     cc8:	221f      	movs	r2, #31
     cca:	3004      	adds	r0, #4
     ccc:	f009 f8fc 	bl	9ec8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     cd0:	9c01      	ldr	r4, [sp, #4]
     cd2:	237e      	movs	r3, #126	; 0x7e
     cd4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     cd8:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     cdc:	3404      	adds	r4, #4
}
     cde:	4620      	mov	r0, r4
     ce0:	b003      	add	sp, #12
     ce2:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     ce4:	4c03      	ldr	r4, [pc, #12]	; (cf4 <log_strdup+0x68>)
     ce6:	e7fa      	b.n	cde <log_strdup+0x52>
     ce8:	0000b550 	.word	0x0000b550
     cec:	0000d2b4 	.word	0x0000d2b4
     cf0:	200004ec 	.word	0x200004ec
     cf4:	0000bc04 	.word	0x0000bc04

00000cf8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     cf8:	b148      	cbz	r0, d0e <log_is_strdup+0x16>
     cfa:	4b05      	ldr	r3, [pc, #20]	; (d10 <log_is_strdup+0x18>)
     cfc:	4298      	cmp	r0, r3
     cfe:	d305      	bcc.n	d0c <log_is_strdup+0x14>
     d00:	33a0      	adds	r3, #160	; 0xa0
     d02:	4298      	cmp	r0, r3
     d04:	bf2c      	ite	cs
     d06:	2000      	movcs	r0, #0
     d08:	2001      	movcc	r0, #1
     d0a:	4770      	bx	lr
     d0c:	2000      	movs	r0, #0
}
     d0e:	4770      	bx	lr
     d10:	200035a0 	.word	0x200035a0

00000d14 <z_impl_log_process>:
{
     d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     d18:	4b4c      	ldr	r3, [pc, #304]	; (e4c <z_impl_log_process+0x138>)
     d1a:	781b      	ldrb	r3, [r3, #0]
{
     d1c:	b085      	sub	sp, #20
     d1e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
     d20:	b903      	cbnz	r3, d24 <z_impl_log_process+0x10>
     d22:	b360      	cbz	r0, d7e <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     d24:	f04f 0320 	mov.w	r3, #32
     d28:	f3ef 8611 	mrs	r6, BASEPRI
     d2c:	f383 8811 	msr	BASEPRI, r3
     d30:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     d34:	4846      	ldr	r0, [pc, #280]	; (e50 <z_impl_log_process+0x13c>)
     d36:	f008 fcc4 	bl	96c2 <log_list_head_get>
     d3a:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d3c:	f386 8811 	msr	BASEPRI, r6
     d40:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     d44:	b178      	cbz	r0, d66 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     d46:	f3bf 8f5b 	dmb	ish
     d4a:	4b42      	ldr	r3, [pc, #264]	; (e54 <z_impl_log_process+0x140>)
     d4c:	e853 2f00 	ldrex	r2, [r3]
     d50:	3a01      	subs	r2, #1
     d52:	e843 2100 	strex	r1, r2, [r3]
     d56:	2900      	cmp	r1, #0
     d58:	d1f8      	bne.n	d4c <z_impl_log_process+0x38>
     d5a:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
     d5e:	b194      	cbz	r4, d86 <z_impl_log_process+0x72>
	log_msg_put(msg);
     d60:	4628      	mov	r0, r5
     d62:	f008 fdc5 	bl	98f0 <log_msg_put>
	if (!bypass && dropped_cnt) {
     d66:	b924      	cbnz	r4, d72 <z_impl_log_process+0x5e>
     d68:	4b3b      	ldr	r3, [pc, #236]	; (e58 <z_impl_log_process+0x144>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	b10b      	cbz	r3, d72 <z_impl_log_process+0x5e>
		dropped_notify();
     d6e:	f7ff ff05 	bl	b7c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     d72:	4837      	ldr	r0, [pc, #220]	; (e50 <z_impl_log_process+0x13c>)
     d74:	f008 fca3 	bl	96be <log_list_head_peek>
     d78:	1e04      	subs	r4, r0, #0
     d7a:	bf18      	it	ne
     d7c:	2401      	movne	r4, #1
}
     d7e:	4620      	mov	r0, r4
     d80:	b005      	add	sp, #20
     d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     d86:	4b35      	ldr	r3, [pc, #212]	; (e5c <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	b9cb      	cbnz	r3, dc0 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     d8c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
     d8e:	07db      	lsls	r3, r3, #31
     d90:	d416      	bmi.n	dc0 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
     d92:	f008 fdc0 	bl	9916 <log_msg_str_get>
     d96:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     d98:	4628      	mov	r0, r5
     d9a:	f008 fd87 	bl	98ac <log_msg_nargs_get>
     d9e:	4601      	mov	r1, r0
     da0:	4640      	mov	r0, r8
     da2:	f008 fca1 	bl	96e8 <z_log_get_s_mask>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     da6:	4f2e      	ldr	r7, [pc, #184]	; (e60 <z_impl_log_process+0x14c>)
     da8:	4b2e      	ldr	r3, [pc, #184]	; (e64 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
     daa:	f8df b0d4 	ldr.w	fp, [pc, #212]	; e80 <z_impl_log_process+0x16c>
     dae:	1bdb      	subs	r3, r3, r7
     db0:	08db      	lsrs	r3, r3, #3
     db2:	9303      	str	r3, [sp, #12]
     db4:	4b2c      	ldr	r3, [pc, #176]	; (e68 <z_impl_log_process+0x154>)
     db6:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     db8:	4606      	mov	r6, r0
     dba:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
     dbe:	b936      	cbnz	r6, dce <z_impl_log_process+0xba>
     dc0:	4e2a      	ldr	r6, [pc, #168]	; (e6c <z_impl_log_process+0x158>)
     dc2:	4f2b      	ldr	r7, [pc, #172]	; (e70 <z_impl_log_process+0x15c>)
     dc4:	1bbf      	subs	r7, r7, r6
     dc6:	113f      	asrs	r7, r7, #4
     dc8:	f04f 0800 	mov.w	r8, #0
     dcc:	e03a      	b.n	e44 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
     dce:	fab6 f186 	clz	r1, r6
     dd2:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     dd6:	4649      	mov	r1, r9
     dd8:	4628      	mov	r0, r5
     dda:	f008 fd6a 	bl	98b2 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     dde:	4b25      	ldr	r3, [pc, #148]	; (e74 <z_impl_log_process+0x160>)
     de0:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
     de2:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     de4:	d302      	bcc.n	dec <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     de6:	4b24      	ldr	r3, [pc, #144]	; (e78 <z_impl_log_process+0x164>)
     de8:	4298      	cmp	r0, r3
     dea:	d31a      	bcc.n	e22 <z_impl_log_process+0x10e>
     dec:	4608      	mov	r0, r1
     dee:	f7ff ff83 	bl	cf8 <log_is_strdup>
     df2:	4602      	mov	r2, r0
     df4:	b9a8      	cbnz	r0, e22 <z_impl_log_process+0x10e>
     df6:	4b21      	ldr	r3, [pc, #132]	; (e7c <z_impl_log_process+0x168>)
     df8:	4299      	cmp	r1, r3
     dfa:	d012      	beq.n	e22 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
     dfc:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     dfe:	9803      	ldr	r0, [sp, #12]
     e00:	0999      	lsrs	r1, r3, #6
     e02:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
     e06:	ea4f 138a 	mov.w	r3, sl, lsl #6
     e0a:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
     e0e:	bf88      	it	hi
     e10:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
     e14:	f8ad 3000 	strh.w	r3, [sp]
     e18:	4649      	mov	r1, r9
     e1a:	4643      	mov	r3, r8
     e1c:	4658      	mov	r0, fp
     e1e:	f008 fcbd 	bl	979c <log_3>
		mask &= ~BIT(idx);
     e22:	2101      	movs	r1, #1
     e24:	fa01 f109 	lsl.w	r1, r1, r9
     e28:	ea26 0601 	bic.w	r6, r6, r1
     e2c:	e7c7      	b.n	dbe <z_impl_log_process+0xaa>
	return backend->cb->active;
     e2e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     e30:	795b      	ldrb	r3, [r3, #5]
     e32:	b123      	cbz	r3, e3e <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
     e34:	6833      	ldr	r3, [r6, #0]
     e36:	4629      	mov	r1, r5
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	4630      	mov	r0, r6
     e3c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     e3e:	f108 0801 	add.w	r8, r8, #1
     e42:	3610      	adds	r6, #16
     e44:	45b8      	cmp	r8, r7
     e46:	dbf2      	blt.n	e2e <z_impl_log_process+0x11a>
     e48:	e78a      	b.n	d60 <z_impl_log_process+0x4c>
     e4a:	bf00      	nop
     e4c:	2000140e 	.word	0x2000140e
     e50:	200004e4 	.word	0x200004e4
     e54:	200004d8 	.word	0x200004d8
     e58:	200004dc 	.word	0x200004dc
     e5c:	2000140f 	.word	0x2000140f
     e60:	0000b750 	.word	0x0000b750
     e64:	0000b818 	.word	0x0000b818
     e68:	0000b7e0 	.word	0x0000b7e0
     e6c:	0000b818 	.word	0x0000b818
     e70:	0000b838 	.word	0x0000b838
     e74:	0000b550 	.word	0x0000b550
     e78:	0000d2b4 	.word	0x0000d2b4
     e7c:	0000bc04 	.word	0x0000bc04
     e80:	0000bc1e 	.word	0x0000bc1e

00000e84 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     e84:	4b29      	ldr	r3, [pc, #164]	; (f2c <msg_finalize+0xa8>)
{
     e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     e88:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     e8a:	8141      	strh	r1, [r0, #10]
{
     e8c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
     e8e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     e90:	4d27      	ldr	r5, [pc, #156]	; (f30 <msg_finalize+0xac>)
     e92:	60e0      	str	r0, [r4, #12]
     e94:	f3bf 8f5b 	dmb	ish
     e98:	e855 3f00 	ldrex	r3, [r5]
     e9c:	3301      	adds	r3, #1
     e9e:	e845 3200 	strex	r2, r3, [r5]
     ea2:	2a00      	cmp	r2, #0
     ea4:	d1f8      	bne.n	e98 <msg_finalize+0x14>
     ea6:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
     eaa:	f04f 0320 	mov.w	r3, #32
     eae:	f3ef 8611 	mrs	r6, BASEPRI
     eb2:	f383 8811 	msr	BASEPRI, r3
     eb6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     eba:	481e      	ldr	r0, [pc, #120]	; (f34 <msg_finalize+0xb0>)
     ebc:	4621      	mov	r1, r4
     ebe:	f008 fbf4 	bl	96aa <log_list_add_tail>
	__asm__ volatile(
     ec2:	f386 8811 	msr	BASEPRI, r6
     ec6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     eca:	4b1b      	ldr	r3, [pc, #108]	; (f38 <msg_finalize+0xb4>)
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	b183      	cbz	r3, ef2 <msg_finalize+0x6e>
	__asm__ volatile(
     ed0:	f04f 0320 	mov.w	r3, #32
     ed4:	f3ef 8411 	mrs	r4, BASEPRI
     ed8:	f383 8811 	msr	BASEPRI, r3
     edc:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     ee0:	2000      	movs	r0, #0
     ee2:	f7ff ff17 	bl	d14 <z_impl_log_process>
	__asm__ volatile(
     ee6:	f384 8811 	msr	BASEPRI, r4
     eea:	f3bf 8f6f 	isb	sy
}
     eee:	b002      	add	sp, #8
     ef0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     ef2:	4a12      	ldr	r2, [pc, #72]	; (f3c <msg_finalize+0xb8>)
     ef4:	682b      	ldr	r3, [r5, #0]
     ef6:	6812      	ldr	r2, [r2, #0]
     ef8:	2a00      	cmp	r2, #0
     efa:	d0f8      	beq.n	eee <msg_finalize+0x6a>
     efc:	2b01      	cmp	r3, #1
     efe:	d10a      	bne.n	f16 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
     f00:	2200      	movs	r2, #0
     f02:	2300      	movs	r3, #0
     f04:	e9cd 2300 	strd	r2, r3, [sp]
     f08:	480d      	ldr	r0, [pc, #52]	; (f40 <msg_finalize+0xbc>)
     f0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     f0e:	2300      	movs	r3, #0
     f10:	f008 f846 	bl	8fa0 <z_impl_k_timer_start>
     f14:	e7eb      	b.n	eee <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     f16:	2b0a      	cmp	r3, #10
     f18:	d1e9      	bne.n	eee <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
     f1a:	4809      	ldr	r0, [pc, #36]	; (f40 <msg_finalize+0xbc>)
     f1c:	f00a f9cc 	bl	b2b8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
     f20:	4808      	ldr	r0, [pc, #32]	; (f44 <msg_finalize+0xc0>)
}
     f22:	b002      	add	sp, #8
     f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     f28:	f007 bdb0 	b.w	8a8c <z_impl_k_sem_give>
     f2c:	200000ec 	.word	0x200000ec
     f30:	200004d8 	.word	0x200004d8
     f34:	200004e4 	.word	0x200004e4
     f38:	2000140f 	.word	0x2000140f
     f3c:	2000057c 	.word	0x2000057c
     f40:	200004a0 	.word	0x200004a0
     f44:	200003b4 	.word	0x200003b4

00000f48 <log_process_thread_func>:
{
     f48:	b510      	push	{r4, lr}
	log_init();
     f4a:	f7ff fe75 	bl	c38 <log_init>
	return z_impl_k_current_get();
     f4e:	f007 fd97 	bl	8a80 <z_impl_k_current_get>
	proc_tid = process_tid;
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <log_process_thread_func+0x3c>)
     f54:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
     f56:	b130      	cbz	r0, f66 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <log_process_thread_func+0x40>)
	    process_tid &&
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	2b09      	cmp	r3, #9
     f5e:	dd02      	ble.n	f66 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
     f60:	480a      	ldr	r0, [pc, #40]	; (f8c <log_process_thread_func+0x44>)
     f62:	f007 fd93 	bl	8a8c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
     f66:	4c09      	ldr	r4, [pc, #36]	; (f8c <log_process_thread_func+0x44>)
     f68:	2000      	movs	r0, #0
     f6a:	f7ff fed3 	bl	d14 <z_impl_log_process>
		if (log_process(false) == false) {
     f6e:	2800      	cmp	r0, #0
     f70:	d1fa      	bne.n	f68 <log_process_thread_func+0x20>
     f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f7a:	4620      	mov	r0, r4
     f7c:	f007 fdac 	bl	8ad8 <z_impl_k_sem_take>
     f80:	e7f2      	b.n	f68 <log_process_thread_func+0x20>
     f82:	bf00      	nop
     f84:	2000057c 	.word	0x2000057c
     f88:	200004d8 	.word	0x200004d8
     f8c:	200003b4 	.word	0x200003b4

00000f90 <z_impl_log_panic>:
{
     f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
     f92:	4f0e      	ldr	r7, [pc, #56]	; (fcc <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x2c>)
     f94:	783d      	ldrb	r5, [r7, #0]
     f96:	b975      	cbnz	r5, fb6 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x16>
	return __log_backends_end - __log_backends_start;
     f98:	4c0d      	ldr	r4, [pc, #52]	; (fd0 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x30>)
     f9a:	4e0e      	ldr	r6, [pc, #56]	; (fd4 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x34>)
	log_init();
     f9c:	f7ff fe4c 	bl	c38 <log_init>
     fa0:	1b36      	subs	r6, r6, r4
     fa2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     fa4:	42b5      	cmp	r5, r6
     fa6:	db07      	blt.n	fb8 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x18>
     fa8:	2000      	movs	r0, #0
     faa:	f7ff feb3 	bl	d14 <z_impl_log_process>
		while (log_process(false) == true) {
     fae:	2800      	cmp	r0, #0
     fb0:	d1fa      	bne.n	fa8 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x8>
	panic_mode = true;
     fb2:	2301      	movs	r3, #1
     fb4:	703b      	strb	r3, [r7, #0]
}
     fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
     fb8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     fba:	795b      	ldrb	r3, [r3, #5]
     fbc:	b11b      	cbz	r3, fc6 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x26>
	backend->api->panic(backend);
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	4620      	mov	r0, r4
     fc2:	691b      	ldr	r3, [r3, #16]
     fc4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     fc6:	3501      	adds	r5, #1
     fc8:	3410      	adds	r4, #16
     fca:	e7eb      	b.n	fa4 <CONFIG_BT_CTLR_DFE_SAMPLE_SPACING_NS+0x4>
     fcc:	2000140f 	.word	0x2000140f
     fd0:	0000b818 	.word	0x0000b818
     fd4:	0000b838 	.word	0x0000b838

00000fd8 <log_free>:
{
     fd8:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
     fda:	3804      	subs	r0, #4
     fdc:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     fde:	f3bf 8f5b 	dmb	ish
     fe2:	e850 3f00 	ldrex	r3, [r0]
     fe6:	1e5a      	subs	r2, r3, #1
     fe8:	e840 2100 	strex	r1, r2, [r0]
     fec:	2900      	cmp	r1, #0
     fee:	d1f8      	bne.n	fe2 <log_free+0xa>
     ff0:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
     ff4:	2b01      	cmp	r3, #1
     ff6:	d103      	bne.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
     ff8:	4803      	ldr	r0, [pc, #12]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     ffa:	a901      	add	r1, sp, #4
     ffc:	f007 f8da 	bl	81b4 <k_mem_slab_free>
}
    1000:	b003      	add	sp, #12
    1002:	f85d fb04 	ldr.w	pc, [sp], #4
    1006:	bf00      	nop
    1008:	200004ec 	.word	0x200004ec

0000100c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    100c:	2320      	movs	r3, #32
    100e:	4902      	ldr	r1, [pc, #8]	; (1018 <log_msg_pool_init+0xc>)
    1010:	4802      	ldr	r0, [pc, #8]	; (101c <log_msg_pool_init+0x10>)
    1012:	461a      	mov	r2, r3
    1014:	f009 beb4 	b.w	ad80 <k_mem_slab_init>
    1018:	20003640 	.word	0x20003640
    101c:	20000580 	.word	0x20000580

00001020 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1020:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    1022:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1024:	4d09      	ldr	r5, [pc, #36]	; (104c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    1026:	9301      	str	r3, [sp, #4]
    1028:	2001      	movs	r0, #1
    102a:	f7ff fe73 	bl	d14 <z_impl_log_process>
    102e:	4604      	mov	r4, r0
			log_dropped();
    1030:	f7ff fdca 	bl	bc8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1034:	2200      	movs	r2, #0
    1036:	2300      	movs	r3, #0
    1038:	a901      	add	r1, sp, #4
    103a:	4628      	mov	r0, r5
    103c:	f007 f888 	bl	8150 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1040:	b108      	cbz	r0, 1046 <log_msg_no_space_handle+0x26>
    1042:	2c00      	cmp	r4, #0
    1044:	d1f0      	bne.n	1028 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    1046:	9801      	ldr	r0, [sp, #4]
    1048:	b003      	add	sp, #12
    104a:	bd30      	pop	{r4, r5, pc}
    104c:	20000580 	.word	0x20000580

00001050 <log_msg_chunk_alloc>:
{
    1050:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    1052:	2300      	movs	r3, #0
    1054:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1056:	4807      	ldr	r0, [pc, #28]	; (1074 <log_msg_chunk_alloc+0x24>)
    1058:	2200      	movs	r2, #0
    105a:	2300      	movs	r3, #0
    105c:	a901      	add	r1, sp, #4
    105e:	f007 f877 	bl	8150 <k_mem_slab_alloc>
	if (err != 0) {
    1062:	b110      	cbz	r0, 106a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    1064:	f7ff ffdc 	bl	1020 <log_msg_no_space_handle>
    1068:	9001      	str	r0, [sp, #4]
}
    106a:	9801      	ldr	r0, [sp, #4]
    106c:	b003      	add	sp, #12
    106e:	f85d fb04 	ldr.w	pc, [sp], #4
    1072:	bf00      	nop
    1074:	20000580 	.word	0x20000580

00001078 <msg_free>:
{
    1078:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    107a:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    107c:	7a45      	ldrb	r5, [r0, #9]
{
    107e:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    1080:	092d      	lsrs	r5, r5, #4
{
    1082:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1084:	07d8      	lsls	r0, r3, #31
    1086:	d41c      	bmi.n	10c2 <msg_free+0x4a>
    1088:	b1dd      	cbz	r5, 10c2 <msg_free+0x4a>
		u32_t smask = 0;
    108a:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    108c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    108e:	9801      	ldr	r0, [sp, #4]
    1090:	4631      	mov	r1, r6
    1092:	f008 fc0e 	bl	98b2 <log_msg_arg_get>
    1096:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    1098:	f7ff fe2e 	bl	cf8 <log_is_strdup>
    109c:	b170      	cbz	r0, 10bc <msg_free+0x44>
				if (smask == 0) {
    109e:	b934      	cbnz	r4, 10ae <msg_free+0x36>
					smask = z_log_get_s_mask(
    10a0:	9b01      	ldr	r3, [sp, #4]
    10a2:	4629      	mov	r1, r5
    10a4:	6918      	ldr	r0, [r3, #16]
    10a6:	f008 fb1f 	bl	96e8 <z_log_get_s_mask>
					if (smask == 0) {
    10aa:	4604      	mov	r4, r0
    10ac:	b148      	cbz	r0, 10c2 <msg_free+0x4a>
				if (smask & BIT(i)) {
    10ae:	fa24 f306 	lsr.w	r3, r4, r6
    10b2:	07d9      	lsls	r1, r3, #31
    10b4:	d502      	bpl.n	10bc <msg_free+0x44>
					log_free(buf);
    10b6:	4638      	mov	r0, r7
    10b8:	f7ff ff8e 	bl	fd8 <log_free>
		for (i = 0; i < nargs; i++) {
    10bc:	3601      	adds	r6, #1
    10be:	42ae      	cmp	r6, r5
    10c0:	d3e5      	bcc.n	108e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    10c2:	9b01      	ldr	r3, [sp, #4]
    10c4:	7a1a      	ldrb	r2, [r3, #8]
    10c6:	0792      	lsls	r2, r2, #30
    10c8:	d504      	bpl.n	10d4 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    10ca:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    10cc:	4c08      	ldr	r4, [pc, #32]	; (10f0 <msg_free+0x78>)
    10ce:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    10d0:	9b03      	ldr	r3, [sp, #12]
    10d2:	b92b      	cbnz	r3, 10e0 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    10d4:	4806      	ldr	r0, [pc, #24]	; (10f0 <msg_free+0x78>)
    10d6:	a901      	add	r1, sp, #4
    10d8:	f007 f86c 	bl	81b4 <k_mem_slab_free>
}
    10dc:	b005      	add	sp, #20
    10de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    10e0:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    10e2:	a903      	add	r1, sp, #12
    10e4:	4620      	mov	r0, r4
    10e6:	f007 f865 	bl	81b4 <k_mem_slab_free>
		cont = next;
    10ea:	9503      	str	r5, [sp, #12]
    10ec:	e7f0      	b.n	10d0 <msg_free+0x58>
    10ee:	bf00      	nop
    10f0:	20000580 	.word	0x20000580

000010f4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    10f4:	b40e      	push	{r1, r2, r3}
    10f6:	b503      	push	{r0, r1, lr}
    10f8:	ab03      	add	r3, sp, #12
    10fa:	4601      	mov	r1, r0
    10fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1100:	4804      	ldr	r0, [pc, #16]	; (1114 <print_formatted+0x20>)
	va_start(args, fmt);
    1102:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1104:	f7ff fb30 	bl	768 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    1108:	2000      	movs	r0, #0
    110a:	b002      	add	sp, #8
    110c:	f85d eb04 	ldr.w	lr, [sp], #4
    1110:	b003      	add	sp, #12
    1112:	4770      	bx	lr
    1114:	00009cbf 	.word	0x00009cbf

00001118 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    1118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    111c:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    111e:	f011 0402 	ands.w	r4, r1, #2
{
    1122:	4690      	mov	r8, r2
    1124:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1128:	4606      	mov	r6, r0
    112a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    112c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1130:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1134:	d007      	beq.n	1146 <prefix_print+0x2e>
	if (!format) {
    1136:	f011 0f44 	tst.w	r1, #68	; 0x44
    113a:	d137      	bne.n	11ac <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    113c:	4932      	ldr	r1, [pc, #200]	; (1208 <prefix_print+0xf0>)
    113e:	f7ff ffd9 	bl	10f4 <print_formatted>
			length = print_formatted(log_output,
    1142:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    1144:	460c      	mov	r4, r1
	if (color) {
    1146:	f1b9 0f00 	cmp.w	r9, #0
    114a:	d00a      	beq.n	1162 <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    114c:	4b2f      	ldr	r3, [pc, #188]	; (120c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    114e:	4930      	ldr	r1, [pc, #192]	; (1210 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    1150:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    1154:	4b2f      	ldr	r3, [pc, #188]	; (1214 <prefix_print+0xfc>)
    1156:	4630      	mov	r0, r6
    1158:	2a00      	cmp	r2, #0
    115a:	bf08      	it	eq
    115c:	461a      	moveq	r2, r3
    115e:	f7ff ffc9 	bl	10f4 <print_formatted>
	if (level_on) {
    1162:	b13d      	cbz	r5, 1174 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1164:	4b2c      	ldr	r3, [pc, #176]	; (1218 <prefix_print+0x100>)
    1166:	492d      	ldr	r1, [pc, #180]	; (121c <prefix_print+0x104>)
    1168:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    116c:	4630      	mov	r0, r6
    116e:	f7ff ffc1 	bl	10f4 <print_formatted>
    1172:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    1174:	f1b8 0f00 	cmp.w	r8, #0
    1178:	d043      	beq.n	1202 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    117a:	2301      	movs	r3, #1
    117c:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    1180:	4b27      	ldr	r3, [pc, #156]	; (1220 <prefix_print+0x108>)
    1182:	f017 0f10 	tst.w	r7, #16
    1186:	4f27      	ldr	r7, [pc, #156]	; (1224 <prefix_print+0x10c>)
    1188:	bf18      	it	ne
    118a:	461f      	movne	r7, r3
    118c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    1190:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1194:	f7ff fd28 	bl	be8 <log_source_name_get>
    1198:	4639      	mov	r1, r7
    119a:	4602      	mov	r2, r0
    119c:	4630      	mov	r0, r6
    119e:	f7ff ffa9 	bl	10f4 <print_formatted>
    11a2:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    11a4:	4420      	add	r0, r4
    11a6:	b005      	add	sp, #20
    11a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    11ac:	4b1e      	ldr	r3, [pc, #120]	; (1228 <prefix_print+0x110>)
    11ae:	6819      	ldr	r1, [r3, #0]
    11b0:	2900      	cmp	r1, #0
    11b2:	d0c7      	beq.n	1144 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    11b4:	4b1d      	ldr	r3, [pc, #116]	; (122c <prefix_print+0x114>)
    11b6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    11c0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    11c4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    11c8:	fbb4 f2fe 	udiv	r2, r4, lr
    11cc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    11d0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    11d4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    11d8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    11dc:	fbb4 fbf1 	udiv	fp, r4, r1
    11e0:	fb01 441b 	mls	r4, r1, fp, r4
    11e4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    11e8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    11ec:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    11f0:	e9cd b101 	strd	fp, r1, [sp, #4]
    11f4:	fb0a e113 	mls	r1, sl, r3, lr
    11f8:	9100      	str	r1, [sp, #0]
    11fa:	490d      	ldr	r1, [pc, #52]	; (1230 <prefix_print+0x118>)
    11fc:	f7ff ff7a 	bl	10f4 <print_formatted>
    1200:	e79f      	b.n	1142 <prefix_print+0x2a>
	total += print_formatted(log_output,
    1202:	4f08      	ldr	r7, [pc, #32]	; (1224 <prefix_print+0x10c>)
    1204:	e7c2      	b.n	118c <prefix_print+0x74>
    1206:	bf00      	nop
    1208:	0000bc6f 	.word	0x0000bc6f
    120c:	0000b8a0 	.word	0x0000b8a0
    1210:	0000c56a 	.word	0x0000c56a
    1214:	0000bc61 	.word	0x0000bc61
    1218:	0000b8b4 	.word	0x0000b8b4
    121c:	0000bc94 	.word	0x0000bc94
    1220:	0000bc6b 	.word	0x0000bc6b
    1224:	0000bc66 	.word	0x0000bc66
    1228:	2000059c 	.word	0x2000059c
    122c:	200005a0 	.word	0x200005a0
    1230:	0000bc78 	.word	0x0000bc78

00001234 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    1234:	b538      	push	{r3, r4, r5, lr}
    1236:	460c      	mov	r4, r1
	if (color) {
    1238:	07e1      	lsls	r1, r4, #31
{
    123a:	4605      	mov	r5, r0
	if (color) {
    123c:	d503      	bpl.n	1246 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    123e:	4a08      	ldr	r2, [pc, #32]	; (1260 <postfix_print+0x2c>)
    1240:	4908      	ldr	r1, [pc, #32]	; (1264 <postfix_print+0x30>)
    1242:	f7ff ff57 	bl	10f4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1246:	06e2      	lsls	r2, r4, #27
    1248:	d408      	bmi.n	125c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    124a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    124c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    124e:	bf4c      	ite	mi
    1250:	4905      	ldrmi	r1, [pc, #20]	; (1268 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1252:	4906      	ldrpl	r1, [pc, #24]	; (126c <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    1254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1258:	f7ff bf4c 	b.w	10f4 <print_formatted>
}
    125c:	bd38      	pop	{r3, r4, r5, pc}
    125e:	bf00      	nop
    1260:	0000bc61 	.word	0x0000bc61
    1264:	0000c56a 	.word	0x0000c56a
    1268:	0000bbec 	.word	0x0000bbec
    126c:	0000bbeb 	.word	0x0000bbeb

00001270 <hexdump_line_print>:
{
    1270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1274:	461d      	mov	r5, r3
    1276:	9b08      	ldr	r3, [sp, #32]
    1278:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    127a:	06da      	lsls	r2, r3, #27
{
    127c:	4604      	mov	r4, r0
    127e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1280:	d405      	bmi.n	128e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1282:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1284:	bf4c      	ite	mi
    1286:	492a      	ldrmi	r1, [pc, #168]	; (1330 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1288:	492a      	ldrpl	r1, [pc, #168]	; (1334 <hexdump_line_print+0xc4>)
    128a:	f7ff ff33 	bl	10f4 <print_formatted>
		print_formatted(log_output, " ");
    128e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 133c <hexdump_line_print+0xcc>
{
    1292:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1296:	45a8      	cmp	r8, r5
    1298:	db2a      	blt.n	12f0 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    129a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1340 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    129e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1344 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    12a2:	f8df a098 	ldr.w	sl, [pc, #152]	; 133c <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12a6:	2500      	movs	r5, #0
		if (i < length) {
    12a8:	42bd      	cmp	r5, r7
    12aa:	d22f      	bcs.n	130c <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    12ac:	5d72      	ldrb	r2, [r6, r5]
    12ae:	4649      	mov	r1, r9
    12b0:	4620      	mov	r0, r4
    12b2:	f7ff ff1f 	bl	10f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12b6:	3501      	adds	r5, #1
    12b8:	2d10      	cmp	r5, #16
    12ba:	d120      	bne.n	12fe <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    12bc:	491e      	ldr	r1, [pc, #120]	; (1338 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    12be:	f8df 807c 	ldr.w	r8, [pc, #124]	; 133c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    12c2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1348 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    12c6:	4620      	mov	r0, r4
    12c8:	f7ff ff14 	bl	10f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12cc:	2500      	movs	r5, #0
		if (i < length) {
    12ce:	42af      	cmp	r7, r5
    12d0:	d928      	bls.n	1324 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    12d2:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    12d4:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    12d8:	2b5f      	cmp	r3, #95	; 0x5f
    12da:	bf28      	it	cs
    12dc:	222e      	movcs	r2, #46	; 0x2e
    12de:	4649      	mov	r1, r9
    12e0:	4620      	mov	r0, r4
    12e2:	f7ff ff07 	bl	10f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12e6:	3501      	adds	r5, #1
    12e8:	2d10      	cmp	r5, #16
    12ea:	d114      	bne.n	1316 <hexdump_line_print+0xa6>
}
    12ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    12f0:	4649      	mov	r1, r9
    12f2:	4620      	mov	r0, r4
    12f4:	f7ff fefe 	bl	10f4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    12f8:	f108 0801 	add.w	r8, r8, #1
    12fc:	e7cb      	b.n	1296 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    12fe:	076a      	lsls	r2, r5, #29
    1300:	d1d2      	bne.n	12a8 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    1302:	4651      	mov	r1, sl
    1304:	4620      	mov	r0, r4
    1306:	f7ff fef5 	bl	10f4 <print_formatted>
    130a:	e7cd      	b.n	12a8 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    130c:	4641      	mov	r1, r8
    130e:	4620      	mov	r0, r4
    1310:	f7ff fef0 	bl	10f4 <print_formatted>
    1314:	e7cf      	b.n	12b6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1316:	076b      	lsls	r3, r5, #29
    1318:	d1d9      	bne.n	12ce <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    131a:	4641      	mov	r1, r8
    131c:	4620      	mov	r0, r4
    131e:	f7ff fee9 	bl	10f4 <print_formatted>
    1322:	e7d4      	b.n	12ce <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1324:	4641      	mov	r1, r8
    1326:	4620      	mov	r0, r4
    1328:	f7ff fee4 	bl	10f4 <print_formatted>
    132c:	e7db      	b.n	12e6 <hexdump_line_print+0x76>
    132e:	bf00      	nop
    1330:	0000bbec 	.word	0x0000bbec
    1334:	0000bbeb 	.word	0x0000bbeb
    1338:	0000bca4 	.word	0x0000bca4
    133c:	0000bca2 	.word	0x0000bca2
    1340:	0000bca0 	.word	0x0000bca0
    1344:	0000bc9a 	.word	0x0000bc9a
    1348:	0000bca6 	.word	0x0000bca6

0000134c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1350:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1352:	f013 0807 	ands.w	r8, r3, #7
{
    1356:	4617      	mov	r7, r2
    1358:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    135a:	7a0a      	ldrb	r2, [r1, #8]
    135c:	4605      	mov	r5, r0
    135e:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1360:	d020      	beq.n	13a4 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    1362:	8949      	ldrh	r1, [r1, #10]
    1364:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1368:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    136a:	43d2      	mvns	r2, r2
    136c:	e9cd 8300 	strd	r8, r3, [sp]
    1370:	9102      	str	r1, [sp, #8]
    1372:	68f3      	ldr	r3, [r6, #12]
    1374:	f002 0201 	and.w	r2, r2, #1
    1378:	4639      	mov	r1, r7
    137a:	f7ff fecd 	bl	1118 <prefix_print>
    137e:	4681      	mov	r9, r0
    1380:	7a34      	ldrb	r4, [r6, #8]
    1382:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1384:	f014 0401 	ands.w	r4, r4, #1
    1388:	d00e      	beq.n	13a8 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    138a:	4629      	mov	r1, r5
    138c:	4630      	mov	r0, r6
    138e:	f008 fb2c 	bl	99ea <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1392:	f1b8 0f00 	cmp.w	r8, #0
    1396:	d02b      	beq.n	13f0 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    1398:	4642      	mov	r2, r8
    139a:	4639      	mov	r1, r7
    139c:	4628      	mov	r0, r5
    139e:	f7ff ff49 	bl	1234 <postfix_print>
    13a2:	e025      	b.n	13f0 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    13a4:	46c1      	mov	r9, r8
    13a6:	e7eb      	b.n	1380 <log_output_msg_process+0x34>
	} else if (raw_string) {
    13a8:	f1b8 0f00 	cmp.w	r8, #0
    13ac:	d126      	bne.n	13fc <log_output_msg_process+0xb0>
	size_t offset = 0;
    13ae:	4627      	mov	r7, r4
		length = log_output->size;
    13b0:	68eb      	ldr	r3, [r5, #12]
    13b2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    13b4:	aa06      	add	r2, sp, #24
    13b6:	463b      	mov	r3, r7
    13b8:	68a9      	ldr	r1, [r5, #8]
    13ba:	4630      	mov	r0, r6
    13bc:	f008 fb01 	bl	99c2 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    13c0:	9a06      	ldr	r2, [sp, #24]
    13c2:	686b      	ldr	r3, [r5, #4]
    13c4:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    13c6:	b13a      	cbz	r2, 13d8 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    13c8:	68ab      	ldr	r3, [r5, #8]
    13ca:	4413      	add	r3, r2
    13cc:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    13d0:	f1a4 030a 	sub.w	r3, r4, #10
    13d4:	425c      	negs	r4, r3
    13d6:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    13d8:	4628      	mov	r0, r5
    13da:	f008 fc63 	bl	9ca4 <log_output_flush>
		offset += length;
    13de:	9b06      	ldr	r3, [sp, #24]
    13e0:	441f      	add	r7, r3
	} while (length > 0);
    13e2:	2b00      	cmp	r3, #0
    13e4:	d1e4      	bne.n	13b0 <log_output_msg_process+0x64>
	if (eol) {
    13e6:	b11c      	cbz	r4, 13f0 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    13e8:	4913      	ldr	r1, [pc, #76]	; (1438 <log_output_msg_process+0xec>)
    13ea:	4628      	mov	r0, r5
    13ec:	f7ff fe82 	bl	10f4 <print_formatted>
	}

	log_output_flush(log_output);
    13f0:	4628      	mov	r0, r5
    13f2:	f008 fc57 	bl	9ca4 <log_output_flush>
}
    13f6:	b00a      	add	sp, #40	; 0x28
    13f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    13fc:	4630      	mov	r0, r6
    13fe:	f008 fa8a 	bl	9916 <log_msg_str_get>
    1402:	490e      	ldr	r1, [pc, #56]	; (143c <log_output_msg_process+0xf0>)
    1404:	4602      	mov	r2, r0
    1406:	4628      	mov	r0, r5
    1408:	f7ff fe74 	bl	10f4 <print_formatted>
		length = sizeof(buf);
    140c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1410:	aa05      	add	r2, sp, #20
    1412:	4623      	mov	r3, r4
    1414:	a906      	add	r1, sp, #24
    1416:	4630      	mov	r0, r6
		length = sizeof(buf);
    1418:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    141c:	f008 fad1 	bl	99c2 <log_msg_hexdump_data_get>
		if (length) {
    1420:	9a05      	ldr	r2, [sp, #20]
    1422:	2a00      	cmp	r2, #0
    1424:	d0b8      	beq.n	1398 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    1426:	464b      	mov	r3, r9
    1428:	9700      	str	r7, [sp, #0]
    142a:	a906      	add	r1, sp, #24
    142c:	4628      	mov	r0, r5
    142e:	f7ff ff1f 	bl	1270 <hexdump_line_print>
			offset += length;
    1432:	9b05      	ldr	r3, [sp, #20]
    1434:	441c      	add	r4, r3
		length = sizeof(buf);
    1436:	e7eb      	b.n	1410 <log_output_msg_process+0xc4>
    1438:	0000bca9 	.word	0x0000bca9
    143c:	0000c56a 	.word	0x0000c56a

00001440 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    1440:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    1442:	e9d0 4300 	ldrd	r4, r3, [r0]
    1446:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1448:	4a0f      	ldr	r2, [pc, #60]	; (1488 <log_output_dropped_process+0x48>)
    144a:	f242 730f 	movw	r3, #9999	; 0x270f
    144e:	428b      	cmp	r3, r1
    1450:	bf28      	it	cs
    1452:	460b      	movcs	r3, r1
    1454:	4668      	mov	r0, sp
    1456:	2105      	movs	r1, #5
    1458:	f007 fe93 	bl	9182 <snprintk>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    145c:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    145e:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    1460:	490a      	ldr	r1, [pc, #40]	; (148c <log_output_dropped_process+0x4c>)
    1462:	4620      	mov	r0, r4
    1464:	220b      	movs	r2, #11
    1466:	f008 fab3 	bl	99d0 <buffer_write>
	buffer_write(outf, buf, len, dev);
    146a:	462b      	mov	r3, r5
    146c:	4632      	mov	r2, r6
    146e:	4669      	mov	r1, sp
    1470:	4620      	mov	r0, r4
    1472:	f008 faad 	bl	99d0 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    1476:	4906      	ldr	r1, [pc, #24]	; (1490 <log_output_dropped_process+0x50>)
    1478:	462b      	mov	r3, r5
    147a:	221b      	movs	r2, #27
    147c:	4620      	mov	r0, r4
    147e:	f008 faa7 	bl	99d0 <buffer_write>
}
    1482:	b002      	add	sp, #8
    1484:	bd70      	pop	{r4, r5, r6, pc}
    1486:	bf00      	nop
    1488:	0000c98b 	.word	0x0000c98b
    148c:	0000bce3 	.word	0x0000bce3
    1490:	0000bcc7 	.word	0x0000bcc7

00001494 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1494:	4a08      	ldr	r2, [pc, #32]	; (14b8 <log_output_timestamp_freq_set+0x24>)
{
    1496:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1498:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    149a:	4c08      	ldr	r4, [pc, #32]	; (14bc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    149c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    149e:	2100      	movs	r1, #0
    14a0:	42a0      	cmp	r0, r4
    14a2:	d804      	bhi.n	14ae <log_output_timestamp_freq_set+0x1a>
    14a4:	b101      	cbz	r1, 14a8 <log_output_timestamp_freq_set+0x14>
    14a6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    14a8:	4b05      	ldr	r3, [pc, #20]	; (14c0 <log_output_timestamp_freq_set+0x2c>)
    14aa:	6018      	str	r0, [r3, #0]
}
    14ac:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    14ae:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    14b0:	005b      	lsls	r3, r3, #1
    14b2:	2101      	movs	r1, #1
    14b4:	e7f4      	b.n	14a0 <log_output_timestamp_freq_set+0xc>
    14b6:	bf00      	nop
    14b8:	200005a0 	.word	0x200005a0
    14bc:	000f4240 	.word	0x000f4240
    14c0:	2000059c 	.word	0x2000059c

000014c4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    14c4:	4801      	ldr	r0, [pc, #4]	; (14cc <panic+0x8>)
    14c6:	f008 bbed 	b.w	9ca4 <log_output_flush>
    14ca:	bf00      	nop
    14cc:	0000b8e0 	.word	0x0000b8e0

000014d0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    14d0:	4801      	ldr	r0, [pc, #4]	; (14d8 <dropped+0x8>)
    14d2:	f7ff bfb5 	b.w	1440 <log_output_dropped_process>
    14d6:	bf00      	nop
    14d8:	0000b8e0 	.word	0x0000b8e0

000014dc <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    14dc:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    14de:	4803      	ldr	r0, [pc, #12]	; (14ec <log_backend_uart_init+0x10>)
    14e0:	f006 fc94 	bl	7e0c <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    14e4:	4b02      	ldr	r3, [pc, #8]	; (14f0 <log_backend_uart_init+0x14>)
    14e6:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    14e8:	bd08      	pop	{r3, pc}
    14ea:	bf00      	nop
    14ec:	0000bcef 	.word	0x0000bcef
    14f0:	200005ac 	.word	0x200005ac

000014f4 <put>:
{
    14f4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    14f6:	4608      	mov	r0, r1
    14f8:	460c      	mov	r4, r1
    14fa:	f008 f9ca 	bl	9892 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    14fe:	4805      	ldr	r0, [pc, #20]	; (1514 <put+0x20>)
    1500:	4621      	mov	r1, r4
    1502:	220f      	movs	r2, #15
    1504:	f7ff ff22 	bl	134c <log_output_msg_process>
	log_msg_put(msg);
    1508:	4620      	mov	r0, r4
}
    150a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    150e:	f008 b9ef 	b.w	98f0 <log_msg_put>
    1512:	bf00      	nop
    1514:	0000b8e0 	.word	0x0000b8e0

00001518 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1518:	4b01      	ldr	r3, [pc, #4]	; (1520 <log_backend_rtt_init+0x8>)
    151a:	2201      	movs	r2, #1
    151c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    151e:	4770      	bx	lr
    1520:	20001421 	.word	0x20001421

00001524 <panic>:

static void panic(struct log_backend const *const backend)
{
    1524:	b508      	push	{r3, lr}
	log_output_flush(log_output);
    1526:	4803      	ldr	r0, [pc, #12]	; (1534 <panic+0x10>)
    1528:	f008 fbbc 	bl	9ca4 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    152c:	4b02      	ldr	r3, [pc, #8]	; (1538 <panic+0x14>)
    152e:	2201      	movs	r2, #1
    1530:	701a      	strb	r2, [r3, #0]
}
    1532:	bd08      	pop	{r3, pc}
    1534:	0000b908 	.word	0x0000b908
    1538:	20001422 	.word	0x20001422

0000153c <dropped>:
	log_output_dropped_process(log_output, cnt);
    153c:	4801      	ldr	r0, [pc, #4]	; (1544 <dropped+0x8>)
    153e:	f7ff bf7f 	b.w	1440 <log_output_dropped_process>
    1542:	bf00      	nop
    1544:	0000b908 	.word	0x0000b908

00001548 <put>:
{
    1548:	b510      	push	{r4, lr}
	log_msg_get(msg);
    154a:	4608      	mov	r0, r1
    154c:	460c      	mov	r4, r1
    154e:	f008 f9a0 	bl	9892 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    1552:	4805      	ldr	r0, [pc, #20]	; (1568 <put+0x20>)
    1554:	4621      	mov	r1, r4
    1556:	220f      	movs	r2, #15
    1558:	f7ff fef8 	bl	134c <log_output_msg_process>
	log_msg_put(msg);
    155c:	4620      	mov	r0, r4
}
    155e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1562:	f008 b9c5 	b.w	98f0 <log_msg_put>
    1566:	bf00      	nop
    1568:	0000b908 	.word	0x0000b908

0000156c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    156c:	4b05      	ldr	r3, [pc, #20]	; (1584 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	b11b      	cbz	r3, 157a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1572:	f241 3088 	movw	r0, #5000	; 0x1388
    1576:	f009 be1f 	b.w	b1b8 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    157a:	20a4      	movs	r0, #164	; 0xa4
    157c:	2100      	movs	r1, #0
    157e:	f007 ba5f 	b.w	8a40 <z_impl_k_sleep>
    1582:	bf00      	nop
    1584:	20001422 	.word	0x20001422

00001588 <data_out_block_mode>:
{
    1588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    158c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1620 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    1590:	f8df b090 	ldr.w	fp, [pc, #144]	; 1624 <data_out_block_mode+0x9c>
{
    1594:	4607      	mov	r7, r0
    1596:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    1598:	2404      	movs	r4, #4
    159a:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    159c:	f899 3000 	ldrb.w	r3, [r9]
    15a0:	b933      	cbnz	r3, 15b0 <data_out_block_mode+0x28>
    15a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    15a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    15aa:	4658      	mov	r0, fp
    15ac:	f006 fe2c 	bl	8208 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    15b0:	4632      	mov	r2, r6
    15b2:	4639      	mov	r1, r7
    15b4:	2000      	movs	r0, #0
    15b6:	f000 f9e5 	bl	1984 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    15ba:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    15be:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    15c0:	b913      	cbnz	r3, 15c8 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    15c2:	4658      	mov	r0, fp
    15c4:	f006 fe98 	bl	82f8 <z_impl_k_mutex_unlock>
		if (ret) {
    15c8:	4d14      	ldr	r5, [pc, #80]	; (161c <data_out_block_mode+0x94>)
    15ca:	f1b8 0f00 	cmp.w	r8, #0
    15ce:	d018      	beq.n	1602 <data_out_block_mode+0x7a>
	host_present = true;
    15d0:	2301      	movs	r3, #1
    15d2:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    15d4:	f89a 3000 	ldrb.w	r3, [sl]
    15d8:	b933      	cbnz	r3, 15e8 <data_out_block_mode+0x60>
}
    15da:	4630      	mov	r0, r6
    15dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    15e0:	b95c      	cbnz	r4, 15fa <data_out_block_mode+0x72>
		host_present = false;
    15e2:	702c      	strb	r4, [r5, #0]
    15e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    15e8:	2000      	movs	r0, #0
    15ea:	f000 fa17 	bl	1a1c <SEGGER_RTT_HasDataUp>
    15ee:	2800      	cmp	r0, #0
    15f0:	d0f3      	beq.n	15da <data_out_block_mode+0x52>
    15f2:	782b      	ldrb	r3, [r5, #0]
    15f4:	2b00      	cmp	r3, #0
    15f6:	d1f3      	bne.n	15e0 <data_out_block_mode+0x58>
    15f8:	e7ef      	b.n	15da <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    15fa:	3c01      	subs	r4, #1
    15fc:	f7ff ffb6 	bl	156c <on_failed_write.part.0>
    1600:	e7f2      	b.n	15e8 <data_out_block_mode+0x60>
		} else if (host_present) {
    1602:	782b      	ldrb	r3, [r5, #0]
    1604:	b113      	cbz	r3, 160c <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    1606:	3c01      	subs	r4, #1
    1608:	d104      	bne.n	1614 <data_out_block_mode+0x8c>
		host_present = false;
    160a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    160c:	782b      	ldrb	r3, [r5, #0]
    160e:	2b00      	cmp	r3, #0
    1610:	d1c4      	bne.n	159c <data_out_block_mode+0x14>
    1612:	e7e2      	b.n	15da <data_out_block_mode+0x52>
    1614:	f7ff ffaa 	bl	156c <on_failed_write.part.0>
    1618:	e7f8      	b.n	160c <data_out_block_mode+0x84>
    161a:	bf00      	nop
    161c:	20001421 	.word	0x20001421
    1620:	20001422 	.word	0x20001422
    1624:	200003f8 	.word	0x200003f8

00001628 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1628:	b510      	push	{r4, lr}
    162a:	4807      	ldr	r0, [pc, #28]	; (1648 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    162c:	4c07      	ldr	r4, [pc, #28]	; (164c <uart_console_init+0x24>)
    162e:	f006 fbed 	bl	7e0c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1632:	4b07      	ldr	r3, [pc, #28]	; (1650 <uart_console_init+0x28>)
    1634:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1636:	4620      	mov	r0, r4
    1638:	f000 fe96 	bl	2368 <__stdout_hook_install>
	__printk_hook_install(console_out);
    163c:	4620      	mov	r0, r4
    163e:	f7ff f88d 	bl	75c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    1642:	2000      	movs	r0, #0
    1644:	bd10      	pop	{r4, pc}
    1646:	bf00      	nop
    1648:	0000bcef 	.word	0x0000bcef
    164c:	00001655 	.word	0x00001655
    1650:	200005cc 	.word	0x200005cc

00001654 <console_out>:
	if ('\n' == c) {
    1654:	280a      	cmp	r0, #10
{
    1656:	b538      	push	{r3, r4, r5, lr}
    1658:	4d07      	ldr	r5, [pc, #28]	; (1678 <console_out+0x24>)
    165a:	4604      	mov	r4, r0
	if ('\n' == c) {
    165c:	d104      	bne.n	1668 <console_out+0x14>
    165e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1660:	6883      	ldr	r3, [r0, #8]
    1662:	210d      	movs	r1, #13
    1664:	685b      	ldr	r3, [r3, #4]
    1666:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1668:	6828      	ldr	r0, [r5, #0]
    166a:	6883      	ldr	r3, [r0, #8]
    166c:	b2e1      	uxtb	r1, r4
    166e:	685b      	ldr	r3, [r3, #4]
    1670:	4798      	blx	r3
}
    1672:	4620      	mov	r0, r4
    1674:	bd38      	pop	{r3, r4, r5, pc}
    1676:	bf00      	nop
    1678:	200005cc 	.word	0x200005cc

0000167c <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    167e:	4e12      	ldr	r6, [pc, #72]	; (16c8 <clkstarted_handle.constprop.0+0x4c>)
    1680:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    1682:	240c      	movs	r4, #12
    1684:	fb04 3400 	mla	r4, r4, r0, r3
    1688:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    168a:	4605      	mov	r5, r0
	sub_data->started = true;
    168c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    168e:	f04f 0320 	mov.w	r3, #32
    1692:	f3ef 8111 	mrs	r1, BASEPRI
    1696:	f383 8811 	msr	BASEPRI, r3
    169a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    169e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    16a0:	b12b      	cbz	r3, 16ae <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    16a2:	6860      	ldr	r0, [r4, #4]
    16a4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    16a6:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    16a8:	4283      	cmp	r3, r0
	list->tail = node;
    16aa:	bf08      	it	eq
    16ac:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    16ae:	f381 8811 	msr	BASEPRI, r1
    16b2:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    16b6:	b903      	cbnz	r3, 16ba <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    16b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    16ba:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    16be:	4629      	mov	r1, r5
    16c0:	4630      	mov	r0, r6
    16c2:	47b8      	blx	r7
    16c4:	e7e3      	b.n	168e <clkstarted_handle.constprop.0+0x12>
    16c6:	bf00      	nop
    16c8:	20000344 	.word	0x20000344

000016cc <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    16cc:	4b15      	ldr	r3, [pc, #84]	; (1724 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    16ce:	b507      	push	{r0, r1, r2, lr}
    16d0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    16d2:	b182      	cbz	r2, 16f6 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    16d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    16d8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    16dc:	07d1      	lsls	r1, r2, #31
    16de:	d50a      	bpl.n	16f6 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    16e0:	2200      	movs	r2, #0
    16e2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	9300      	str	r3, [sp, #0]
    (void)dummy;
    16e8:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    16ea:	4b0f      	ldr	r3, [pc, #60]	; (1728 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    16ec:	68db      	ldr	r3, [r3, #12]
    16ee:	7a58      	ldrb	r0, [r3, #9]
    16f0:	b908      	cbnz	r0, 16f6 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    16f2:	f7ff ffc3 	bl	167c <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    16f6:	4b0d      	ldr	r3, [pc, #52]	; (172c <nrf_power_clock_isr+0x60>)
    16f8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    16fa:	b182      	cbz	r2, 171e <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    16fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1700:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1704:	0792      	lsls	r2, r2, #30
    1706:	d50a      	bpl.n	171e <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1708:	2200      	movs	r2, #0
    170a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1710:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1712:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1714:	b003      	add	sp, #12
    1716:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    171a:	f7ff bfaf 	b.w	167c <clkstarted_handle.constprop.0>
}
    171e:	b003      	add	sp, #12
    1720:	f85d fb04 	ldr.w	pc, [sp], #4
    1724:	40000100 	.word	0x40000100
    1728:	20000344 	.word	0x20000344
    172c:	40000104 	.word	0x40000104

00001730 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    1730:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1732:	4b08      	ldr	r3, [pc, #32]	; (1754 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1734:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1738:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    173c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1740:	4290      	cmp	r0, r2
    1742:	d100      	bne.n	1746 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1744:	4770      	bx	lr
    1746:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    174a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    174c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1750:	e7f2      	b.n	1738 <handle_next_tick_case+0x8>
    1752:	bf00      	nop
    1754:	40011000 	.word	0x40011000

00001758 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <event_clear+0x14>)
    175a:	2200      	movs	r2, #0
{
    175c:	b082      	sub	sp, #8
    175e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1760:	681b      	ldr	r3, [r3, #0]
    1762:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1764:	9b01      	ldr	r3, [sp, #4]
}
    1766:	b002      	add	sp, #8
    1768:	4770      	bx	lr
    176a:	bf00      	nop
    176c:	40011140 	.word	0x40011140

00001770 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    1770:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    1772:	f7ff fff1 	bl	1758 <event_clear>
    return p_reg->CC[ch];
    1776:	4b07      	ldr	r3, [pc, #28]	; (1794 <rtc1_nrf_isr+0x24>)

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1778:	4a07      	ldr	r2, [pc, #28]	; (1798 <rtc1_nrf_isr+0x28>)
    177a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    177e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1780:	1ac0      	subs	r0, r0, r3
    1782:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1786:	4403      	add	r3, r0
    1788:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    178a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    178e:	f007 bb73 	b.w	8e78 <z_clock_announce>
    1792:	bf00      	nop
    1794:	40011000 	.word	0x40011000
    1798:	200005e8 	.word	0x200005e8

0000179c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    179c:	b538      	push	{r3, r4, r5, lr}
    179e:	4814      	ldr	r0, [pc, #80]	; (17f0 <z_clock_driver_init+0x54>)
    17a0:	f006 fb34 	bl	7e0c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    17a4:	b300      	cbz	r0, 17e8 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    17a6:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    17a8:	4d12      	ldr	r5, [pc, #72]	; (17f4 <z_clock_driver_init+0x58>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	2101      	movs	r1, #1
    17ae:	2400      	movs	r4, #0
    17b0:	4798      	blx	r3
    17b2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    17b6:	f7ff ffcf 	bl	1758 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17ba:	4b0f      	ldr	r3, [pc, #60]	; (17f8 <z_clock_driver_init+0x5c>)
    17bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    17c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    17c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    17c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    17cc:	4622      	mov	r2, r4
    17ce:	2101      	movs	r1, #1
    17d0:	2011      	movs	r0, #17
    17d2:	f000 f9ad 	bl	1b30 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    17d6:	2011      	movs	r0, #17
    17d8:	f000 f978 	bl	1acc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    17dc:	4a07      	ldr	r2, [pc, #28]	; (17fc <z_clock_driver_init+0x60>)
    17de:	2301      	movs	r3, #1
    17e0:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    17e2:	4620      	mov	r0, r4
    17e4:	602b      	str	r3, [r5, #0]
}
    17e6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    17e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17ec:	e7fb      	b.n	17e6 <z_clock_driver_init+0x4a>
    17ee:	bf00      	nop
    17f0:	0000bd1d 	.word	0x0000bd1d
    17f4:	40011000 	.word	0x40011000
    17f8:	e000e100 	.word	0xe000e100
    17fc:	40011008 	.word	0x40011008

00001800 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1800:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    1802:	4b2a      	ldr	r3, [pc, #168]	; (18ac <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    1804:	4c2a      	ldr	r4, [pc, #168]	; (18b0 <z_clock_set_timeout+0xb0>)
    1806:	6819      	ldr	r1, [r3, #0]
    1808:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    180c:	4d29      	ldr	r5, [pc, #164]	; (18b4 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    180e:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1810:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1814:	bf08      	it	eq
    1816:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    1818:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    181c:	0212      	lsls	r2, r2, #8
    181e:	d434      	bmi.n	188a <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1820:	3801      	subs	r0, #1
    1822:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1826:	42a8      	cmp	r0, r5
    1828:	bfa8      	it	ge
    182a:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    182c:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    182e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    1832:	4418      	add	r0, r3
    1834:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1838:	42a8      	cmp	r0, r5
    183a:	bf94      	ite	ls
    183c:	180d      	addls	r5, r1, r0
    183e:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    1840:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1844:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    1848:	f7ff ff86 	bl	1758 <event_clear>
	return (a - b) & COUNTER_MAX;
    184c:	1a09      	subs	r1, r1, r0
    184e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1852:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    1856:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    1858:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    185c:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    1860:	d104      	bne.n	186c <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    1862:	200f      	movs	r0, #15
    1864:	f009 fca8 	bl	b1b8 <z_impl_k_busy_wait>
		event_clear();
    1868:	f7ff ff76 	bl	1758 <event_clear>
    186c:	4b12      	ldr	r3, [pc, #72]	; (18b8 <z_clock_set_timeout+0xb8>)
    186e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1872:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1876:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    187a:	1a2b      	subs	r3, r5, r0
    187c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1880:	2b01      	cmp	r3, #1
    1882:	d104      	bne.n	188e <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    1884:	f7ff ff54 	bl	1730 <handle_next_tick_case>
    1888:	e00b      	b.n	18a2 <z_clock_set_timeout+0xa2>
		ticks = 0;
    188a:	2000      	movs	r0, #0
    188c:	e7ce      	b.n	182c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    188e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1892:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1896:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    189a:	1a2d      	subs	r5, r5, r0
    189c:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    189e:	022b      	lsls	r3, r5, #8
    18a0:	d4f0      	bmi.n	1884 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    18a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    18a6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    18aa:	bd70      	pop	{r4, r5, r6, pc}
    18ac:	200005e8 	.word	0x200005e8
    18b0:	40011000 	.word	0x40011000
    18b4:	007fffff 	.word	0x007fffff
    18b8:	e000e100 	.word	0xe000e100

000018bc <z_clock_elapsed>:
	__asm__ volatile(
    18bc:	f04f 0220 	mov.w	r2, #32
    18c0:	f3ef 8311 	mrs	r3, BASEPRI
    18c4:	f382 8811 	msr	BASEPRI, r2
    18c8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    18cc:	4a06      	ldr	r2, [pc, #24]	; (18e8 <z_clock_elapsed+0x2c>)
    18ce:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    18d2:	4a06      	ldr	r2, [pc, #24]	; (18ec <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    18d4:	6812      	ldr	r2, [r2, #0]
    18d6:	1a80      	subs	r0, r0, r2
    18d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    18dc:	f383 8811 	msr	BASEPRI, r3
    18e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    18e4:	4770      	bx	lr
    18e6:	bf00      	nop
    18e8:	40011000 	.word	0x40011000
    18ec:	200005e8 	.word	0x200005e8

000018f0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    18f0:	f04f 0320 	mov.w	r3, #32
    18f4:	f3ef 8211 	mrs	r2, BASEPRI
    18f8:	f383 8811 	msr	BASEPRI, r3
    18fc:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1900:	4906      	ldr	r1, [pc, #24]	; (191c <z_timer_cycle_get_32+0x2c>)
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <z_timer_cycle_get_32+0x30>)
    1904:	6808      	ldr	r0, [r1, #0]
    1906:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    190a:	f382 8811 	msr	BASEPRI, r2
    190e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1912:	1a1b      	subs	r3, r3, r0
    1914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1918:	4418      	add	r0, r3
    191a:	4770      	bx	lr
    191c:	200005e8 	.word	0x200005e8
    1920:	40011000 	.word	0x40011000

00001924 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    1924:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1926:	4c11      	ldr	r4, [pc, #68]	; (196c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1928:	4a11      	ldr	r2, [pc, #68]	; (1970 <_DoInit+0x4c>)
    192a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    192c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    192e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1932:	4b10      	ldr	r3, [pc, #64]	; (1974 <_DoInit+0x50>)
    1934:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1936:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1938:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    193c:	4a0e      	ldr	r2, [pc, #56]	; (1978 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    193e:	490f      	ldr	r1, [pc, #60]	; (197c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1940:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1942:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1944:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1946:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1948:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    194a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    194c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    194e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1950:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1952:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1954:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1956:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1958:	f008 faac 	bl	9eb4 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    195c:	4908      	ldr	r1, [pc, #32]	; (1980 <_DoInit+0x5c>)
    195e:	4620      	mov	r0, r4
    1960:	f008 faa8 	bl	9eb4 <strcpy>
  p->acID[6] = ' ';
    1964:	2320      	movs	r3, #32
    1966:	71a3      	strb	r3, [r4, #6]
}
    1968:	bd10      	pop	{r4, pc}
    196a:	bf00      	nop
    196c:	200005ec 	.word	0x200005ec
    1970:	0000bd47 	.word	0x0000bd47
    1974:	20001433 	.word	0x20001433
    1978:	20001423 	.word	0x20001423
    197c:	0000bd50 	.word	0x0000bd50
    1980:	0000bd54 	.word	0x0000bd54

00001984 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    1988:	4f23      	ldr	r7, [pc, #140]	; (1a18 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    198a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    198e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    1990:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1994:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    1996:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    1998:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    199a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    199c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    199e:	d834      	bhi.n	1a0a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    19a0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    19a4:	ebaa 0905 	sub.w	r9, sl, r5
    19a8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    19ac:	4294      	cmp	r4, r2
    19ae:	d811      	bhi.n	19d4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    19b0:	f04f 0918 	mov.w	r9, #24
    19b4:	fb06 9309 	mla	r3, r6, r9, r9
    19b8:	443b      	add	r3, r7
    19ba:	4622      	mov	r2, r4
    19bc:	6858      	ldr	r0, [r3, #4]
    19be:	4641      	mov	r1, r8
    19c0:	4428      	add	r0, r5
    19c2:	f008 fab7 	bl	9f34 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    19c6:	fb09 7606 	mla	r6, r9, r6, r7
    19ca:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    19cc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    19ce:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    19d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    19d4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    19d6:	429c      	cmp	r4, r3
    19d8:	d81b      	bhi.n	1a12 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    19da:	fb00 bb0b 	mla	fp, r0, fp, fp
    19de:	44bb      	add	fp, r7
    19e0:	464a      	mov	r2, r9
    19e2:	f8db 0004 	ldr.w	r0, [fp, #4]
    19e6:	442c      	add	r4, r5
    19e8:	4428      	add	r0, r5
    19ea:	f008 faa3 	bl	9f34 <memcpy>
      if (NumBytes) {
    19ee:	ebb4 040a 	subs.w	r4, r4, sl
    19f2:	d006      	beq.n	1a02 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    19f4:	f8db 0004 	ldr.w	r0, [fp, #4]
    19f8:	4622      	mov	r2, r4
    19fa:	eb08 0109 	add.w	r1, r8, r9
    19fe:	f008 fa99 	bl	9f34 <memcpy>
      pRing->WrOff = NumBytes;
    1a02:	2018      	movs	r0, #24
    1a04:	fb00 7606 	mla	r6, r0, r6, r7
    1a08:	e7e0      	b.n	19cc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    1a0a:	3b01      	subs	r3, #1
    1a0c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    1a0e:	42a3      	cmp	r3, r4
    1a10:	d2ce      	bcs.n	19b0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    1a12:	2000      	movs	r0, #0
    1a14:	e7dc      	b.n	19d0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    1a16:	bf00      	nop
    1a18:	200005ec 	.word	0x200005ec

00001a1c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    1a1c:	4b03      	ldr	r3, [pc, #12]	; (1a2c <SEGGER_RTT_HasDataUp+0x10>)
    1a1e:	2218      	movs	r2, #24
    1a20:	fb02 3300 	mla	r3, r2, r0, r3
    1a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    1a26:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1a28:	1a80      	subs	r0, r0, r2
    1a2a:	4770      	bx	lr
    1a2c:	200005ec 	.word	0x200005ec

00001a30 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1a30:	4a09      	ldr	r2, [pc, #36]	; (1a58 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a32:	490a      	ldr	r1, [pc, #40]	; (1a5c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a34:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a36:	6809      	ldr	r1, [r1, #0]
    1a38:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a3a:	4909      	ldr	r1, [pc, #36]	; (1a60 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a3c:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a3e:	684b      	ldr	r3, [r1, #4]
    1a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a44:	604b      	str	r3, [r1, #4]
    1a46:	2300      	movs	r3, #0
    1a48:	f383 8811 	msr	BASEPRI, r3
    1a4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a50:	6893      	ldr	r3, [r2, #8]
}
    1a52:	6f18      	ldr	r0, [r3, #112]	; 0x70
    1a54:	4770      	bx	lr
    1a56:	bf00      	nop
    1a58:	20001340 	.word	0x20001340
    1a5c:	0000ba8c 	.word	0x0000ba8c
    1a60:	e000ed00 	.word	0xe000ed00

00001a64 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a64:	490f      	ldr	r1, [pc, #60]	; (1aa4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a66:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a68:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a6c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a6e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a72:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a76:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a78:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a7c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a80:	4f09      	ldr	r7, [pc, #36]	; (1aa8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a82:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1a86:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1a88:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1a8a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1a8c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    1a8e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1a90:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1a92:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1a96:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1a9a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1a9e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1aa2:	4770      	bx	lr
    ldr r1, =_kernel
    1aa4:	20001340 	.word	0x20001340
    ldr v4, =_SCS_ICSR
    1aa8:	e000ed04 	.word	0xe000ed04

00001aac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1aac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ab0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ab2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1ab6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1aba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1abc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ac0:	2902      	cmp	r1, #2
    beq _oops
    1ac2:	d0ff      	beq.n	1ac4 <_oops>

00001ac4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1ac4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1ac6:	f008 f9ea 	bl	9e9e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1aca:	bd01      	pop	{r0, pc}

00001acc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1acc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1ace:	2b00      	cmp	r3, #0
    1ad0:	db08      	blt.n	1ae4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad2:	2201      	movs	r2, #1
    1ad4:	f000 001f 	and.w	r0, r0, #31
    1ad8:	fa02 f000 	lsl.w	r0, r2, r0
    1adc:	095b      	lsrs	r3, r3, #5
    1ade:	4a02      	ldr	r2, [pc, #8]	; (1ae8 <arch_irq_enable+0x1c>)
    1ae0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1ae4:	4770      	bx	lr
    1ae6:	bf00      	nop
    1ae8:	e000e100 	.word	0xe000e100

00001aec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1aec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1aee:	2b00      	cmp	r3, #0
    1af0:	db0d      	blt.n	1b0e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1af2:	2201      	movs	r2, #1
    1af4:	095b      	lsrs	r3, r3, #5
    1af6:	f000 001f 	and.w	r0, r0, #31
    1afa:	fa02 f000 	lsl.w	r0, r2, r0
    1afe:	3320      	adds	r3, #32
    1b00:	4a03      	ldr	r2, [pc, #12]	; (1b10 <arch_irq_disable+0x24>)
    1b02:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b0a:	f3bf 8f6f 	isb	sy
}
    1b0e:	4770      	bx	lr
    1b10:	e000e100 	.word	0xe000e100

00001b14 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <arch_irq_is_enabled+0x18>)
    1b16:	0942      	lsrs	r2, r0, #5
    1b18:	f000 001f 	and.w	r0, r0, #31
    1b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b20:	2301      	movs	r3, #1
    1b22:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b26:	4010      	ands	r0, r2
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop
    1b2c:	e000e100 	.word	0xe000e100

00001b30 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b30:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b32:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b34:	bfa8      	it	ge
    1b36:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1b3a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b3e:	bfb8      	it	lt
    1b40:	4b06      	ldrlt	r3, [pc, #24]	; (1b5c <z_arm_irq_priority_set+0x2c>)
    1b42:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b46:	bfac      	ite	ge
    1b48:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b4c:	f000 000f 	andlt.w	r0, r0, #15
    1b50:	b2c9      	uxtb	r1, r1
    1b52:	bfb4      	ite	lt
    1b54:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b56:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1b5a:	4770      	bx	lr
    1b5c:	e000ed14 	.word	0xe000ed14

00001b60 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1b60:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1b62:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1b64:	4b04      	ldr	r3, [pc, #16]	; (1b78 <_arch_isr_direct_pm+0x18>)
    1b66:	6a18      	ldr	r0, [r3, #32]
    1b68:	b118      	cbz	r0, 1b72 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1b6a:	2200      	movs	r2, #0
    1b6c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    1b6e:	f009 f880 	bl	ac72 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1b72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    1b74:	bd08      	pop	{r3, pc}
    1b76:	bf00      	nop
    1b78:	20001340 	.word	0x20001340

00001b7c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    1b7c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    1b80:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    1b82:	3a20      	subs	r2, #32
    1b84:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1b88:	4908      	ldr	r1, [pc, #32]	; (1bac <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    1b8a:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1b8c:	9b00      	ldr	r3, [sp, #0]
    1b8e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1b90:	9b01      	ldr	r3, [sp, #4]
    1b92:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1b94:	9b02      	ldr	r3, [sp, #8]
    1b96:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    1b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b9c:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    1b9e:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    1ba2:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    1ba4:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    1ba6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1ba8:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1baa:	4770      	bx	lr
    1bac:	0000919d 	.word	0x0000919d

00001bb0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bb2:	4606      	mov	r6, r0
    1bb4:	460c      	mov	r4, r1
    1bb6:	4617      	mov	r7, r2
    1bb8:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1bba:	f000 fb0d 	bl	21d8 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    1bbe:	4b09      	ldr	r3, [pc, #36]	; (1be4 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    1bc0:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1bc2:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    1bc6:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1bc8:	4628      	mov	r0, r5
    1bca:	f384 8809 	msr	PSP, r4
    1bce:	2100      	movs	r1, #0
    1bd0:	b663      	cpsie	if
    1bd2:	f381 8811 	msr	BASEPRI, r1
    1bd6:	f3bf 8f6f 	isb	sy
    1bda:	2200      	movs	r2, #0
    1bdc:	2300      	movs	r3, #0
    1bde:	f007 fadd 	bl	919c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1be2:	bf00      	nop
    1be4:	20001340 	.word	0x20001340

00001be8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1be8:	4901      	ldr	r1, [pc, #4]	; (1bf0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1bea:	2210      	movs	r2, #16
	str	r2, [r1]
    1bec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1bee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1bf0:	e000ed10 	.word	0xe000ed10

00001bf4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1bf4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1bf6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1bf8:	f380 8811 	msr	BASEPRI, r0
	isb
    1bfc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1c00:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1c04:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1c06:	b662      	cpsie	i
	isb
    1c08:	f3bf 8f6f 	isb	sy

	bx	lr
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop

00001c10 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1c12:	4606      	mov	r6, r0

	if (esf != NULL) {
    1c14:	460c      	mov	r4, r1
    1c16:	b301      	cbz	r1, 1c5a <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1c18:	4b13      	ldr	r3, [pc, #76]	; (1c68 <z_arm_fatal_error+0x58>)
    1c1a:	4d14      	ldr	r5, [pc, #80]	; (1c6c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1c1c:	4814      	ldr	r0, [pc, #80]	; (1c70 <z_arm_fatal_error+0x60>)
    1c1e:	1aed      	subs	r5, r5, r3
    1c20:	08ed      	lsrs	r5, r5, #3
    1c22:	01ad      	lsls	r5, r5, #6
    1c24:	f045 0501 	orr.w	r5, r5, #1
    1c28:	f8ad 5000 	strh.w	r5, [sp]
    1c2c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1c30:	6809      	ldr	r1, [r1, #0]
    1c32:	f007 fdb3 	bl	979c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1c36:	f8ad 5000 	strh.w	r5, [sp]
    1c3a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    1c3e:	68e1      	ldr	r1, [r4, #12]
    1c40:	480c      	ldr	r0, [pc, #48]	; (1c74 <z_arm_fatal_error+0x64>)
    1c42:	f007 fdab 	bl	979c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1c46:	69e1      	ldr	r1, [r4, #28]
    1c48:	480b      	ldr	r0, [pc, #44]	; (1c78 <z_arm_fatal_error+0x68>)
    1c4a:	462a      	mov	r2, r5
    1c4c:	f007 fd79 	bl	9742 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1c50:	69a1      	ldr	r1, [r4, #24]
    1c52:	480a      	ldr	r0, [pc, #40]	; (1c7c <z_arm_fatal_error+0x6c>)
    1c54:	462a      	mov	r2, r5
    1c56:	f007 fd74 	bl	9742 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1c5a:	4621      	mov	r1, r4
    1c5c:	4630      	mov	r0, r6
}
    1c5e:	b002      	add	sp, #8
    1c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    1c64:	f006 b8f6 	b.w	7e54 <z_fatal_error>
    1c68:	0000b750 	.word	0x0000b750
    1c6c:	0000b7f8 	.word	0x0000b7f8
    1c70:	0000bd5b 	.word	0x0000bd5b
    1c74:	0000bd8a 	.word	0x0000bd8a
    1c78:	0000bdb9 	.word	0x0000bdb9
    1c7c:	0000bdc8 	.word	0x0000bdc8

00001c80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c80:	bf30      	wfi
    b z_SysNmiOnReset
    1c82:	f7ff bffd 	b.w	1c80 <z_SysNmiOnReset>
    1c86:	bf00      	nop

00001c88 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c88:	4a0e      	ldr	r2, [pc, #56]	; (1cc4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1c8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c8c:	4b0e      	ldr	r3, [pc, #56]	; (1cc8 <z_arm_prep_c+0x40>)
    1c8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c92:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c98:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1ca0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1ca8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1cac:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1cb0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1cb4:	f006 f94a 	bl	7f4c <z_bss_zero>
	z_data_copy();
    1cb8:	f006 f952 	bl	7f60 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1cbc:	f000 fa5a 	bl	2174 <z_arm_interrupt_init>
	z_cstart();
    1cc0:	f006 f98c 	bl	7fdc <z_cstart>
    1cc4:	00000000 	.word	0x00000000
    1cc8:	e000ed00 	.word	0xe000ed00

00001ccc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1ccc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1cce:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1cd0:	4a0b      	ldr	r2, [pc, #44]	; (1d00 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1cd2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1cd4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1cd6:	bf1e      	ittt	ne
	movne	r1, #0
    1cd8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1cda:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1cdc:	f008 ffc9 	blne	ac72 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ce0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1ce2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ce6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1cea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1cee:	4905      	ldr	r1, [pc, #20]	; (1d04 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1cf0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1cf2:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1cf4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1cf6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1cfa:	4903      	ldr	r1, [pc, #12]	; (1d08 <_isr_wrapper+0x3c>)
	bx r1
    1cfc:	4708      	bx	r1
    1cfe:	0000      	.short	0x0000
	ldr r2, =_kernel
    1d00:	20001340 	.word	0x20001340
	ldr r1, =_sw_isr_table
    1d04:	0000b5d0 	.word	0x0000b5d0
	ldr r1, =z_arm_int_exit
    1d08:	00002159 	.word	0x00002159

00001d0c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1d0c:	f008 f963 	bl	9fd6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d10:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1d12:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1d16:	4808      	ldr	r0, [pc, #32]	; (1d38 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1d1c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1d1e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1d22:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1d26:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1d28:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1d2a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1d2e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1d32:	f7ff ffa9 	bl	1c88 <z_arm_prep_c>
    1d36:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1d38:	200029a0 	.word	0x200029a0

00001d3c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1d3c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1d40:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1d44:	4672      	mov	r2, lr

	push {r0, lr}
    1d46:	b501      	push	{r0, lr}

	bl z_arm_fault
    1d48:	f000 f932 	bl	1fb0 <z_arm_fault>

	pop {r0, pc}
    1d4c:	bd01      	pop	{r0, pc}
    1d4e:	bf00      	nop

00001d50 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    1d50:	b570      	push	{r4, r5, r6, lr}
    1d52:	4b23      	ldr	r3, [pc, #140]	; (1de0 <usage_fault.isra.0+0x90>)
    1d54:	4c23      	ldr	r4, [pc, #140]	; (1de4 <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d56:	4d24      	ldr	r5, [pc, #144]	; (1de8 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1d58:	4824      	ldr	r0, [pc, #144]	; (1dec <usage_fault.isra.0+0x9c>)
    1d5a:	1ae4      	subs	r4, r4, r3
    1d5c:	08e4      	lsrs	r4, r4, #3
    1d5e:	01a4      	lsls	r4, r4, #6
    1d60:	f044 0601 	orr.w	r6, r4, #1
    1d64:	4631      	mov	r1, r6
    1d66:	f007 fcdf 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d6a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1d6c:	0193      	lsls	r3, r2, #6
    1d6e:	d503      	bpl.n	1d78 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    1d70:	481f      	ldr	r0, [pc, #124]	; (1df0 <usage_fault.isra.0+0xa0>)
    1d72:	4631      	mov	r1, r6
    1d74:	f007 fcd8 	bl	9728 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d7a:	01dd      	lsls	r5, r3, #7
    1d7c:	d504      	bpl.n	1d88 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    1d7e:	481d      	ldr	r0, [pc, #116]	; (1df4 <usage_fault.isra.0+0xa4>)
    1d80:	f044 0101 	orr.w	r1, r4, #1
    1d84:	f007 fcd0 	bl	9728 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d88:	4d17      	ldr	r5, [pc, #92]	; (1de8 <usage_fault.isra.0+0x98>)
    1d8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1d8c:	0310      	lsls	r0, r2, #12
    1d8e:	d504      	bpl.n	1d9a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1d90:	4819      	ldr	r0, [pc, #100]	; (1df8 <usage_fault.isra.0+0xa8>)
    1d92:	f044 0101 	orr.w	r1, r4, #1
    1d96:	f007 fcc7 	bl	9728 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d9c:	0359      	lsls	r1, r3, #13
    1d9e:	d504      	bpl.n	1daa <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1da0:	4816      	ldr	r0, [pc, #88]	; (1dfc <usage_fault.isra.0+0xac>)
    1da2:	f044 0101 	orr.w	r1, r4, #1
    1da6:	f007 fcbf 	bl	9728 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1daa:	4d0f      	ldr	r5, [pc, #60]	; (1de8 <usage_fault.isra.0+0x98>)
    1dac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1dae:	0392      	lsls	r2, r2, #14
    1db0:	d504      	bpl.n	1dbc <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1db2:	4813      	ldr	r0, [pc, #76]	; (1e00 <usage_fault.isra.0+0xb0>)
    1db4:	f044 0101 	orr.w	r1, r4, #1
    1db8:	f007 fcb6 	bl	9728 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1dbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1dbe:	03db      	lsls	r3, r3, #15
    1dc0:	d504      	bpl.n	1dcc <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1dc2:	4810      	ldr	r0, [pc, #64]	; (1e04 <usage_fault.isra.0+0xb4>)
    1dc4:	f044 0101 	orr.w	r1, r4, #1
    1dc8:	f007 fcae 	bl	9728 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1dcc:	4a06      	ldr	r2, [pc, #24]	; (1de8 <usage_fault.isra.0+0x98>)
    1dce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1dd0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1dd4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1dd8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1dda:	2000      	movs	r0, #0
    1ddc:	bd70      	pop	{r4, r5, r6, pc}
    1dde:	bf00      	nop
    1de0:	0000b750 	.word	0x0000b750
    1de4:	0000b7f8 	.word	0x0000b7f8
    1de8:	e000ed00 	.word	0xe000ed00
    1dec:	0000bdf6 	.word	0x0000bdf6
    1df0:	0000be0e 	.word	0x0000be0e
    1df4:	0000be21 	.word	0x0000be21
    1df8:	0000be3b 	.word	0x0000be3b
    1dfc:	0000be59 	.word	0x0000be59
    1e00:	0000be7e 	.word	0x0000be7e
    1e04:	0000be98 	.word	0x0000be98

00001e08 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e0c:	4b27      	ldr	r3, [pc, #156]	; (1eac <mem_manage_fault.isra.0+0xa4>)
    1e0e:	4c28      	ldr	r4, [pc, #160]	; (1eb0 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e10:	4d28      	ldr	r5, [pc, #160]	; (1eb4 <mem_manage_fault.isra.0+0xac>)
    1e12:	1ae4      	subs	r4, r4, r3
    1e14:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    1e16:	01a4      	lsls	r4, r4, #6
    1e18:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e1c:	4607      	mov	r7, r0
    1e1e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1e20:	4825      	ldr	r0, [pc, #148]	; (1eb8 <mem_manage_fault.isra.0+0xb0>)
    1e22:	4641      	mov	r1, r8
    1e24:	f007 fc80 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1e2a:	06d1      	lsls	r1, r2, #27
    1e2c:	d503      	bpl.n	1e36 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1e2e:	4823      	ldr	r0, [pc, #140]	; (1ebc <mem_manage_fault.isra.0+0xb4>)
    1e30:	4641      	mov	r1, r8
    1e32:	f007 fc79 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1e36:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e38:	071a      	lsls	r2, r3, #28
    1e3a:	d504      	bpl.n	1e46 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    1e3c:	4820      	ldr	r0, [pc, #128]	; (1ec0 <mem_manage_fault.isra.0+0xb8>)
    1e3e:	f044 0101 	orr.w	r1, r4, #1
    1e42:	f007 fc71 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1e46:	4d1b      	ldr	r5, [pc, #108]	; (1eb4 <mem_manage_fault.isra.0+0xac>)
    1e48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e4a:	079b      	lsls	r3, r3, #30
    1e4c:	d512      	bpl.n	1e74 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    1e4e:	f044 0801 	orr.w	r8, r4, #1
    1e52:	481c      	ldr	r0, [pc, #112]	; (1ec4 <mem_manage_fault.isra.0+0xbc>)
    1e54:	4641      	mov	r1, r8
    1e56:	f007 fc67 	bl	9728 <log_0>
		mmfar = SCB->MMFAR;
    1e5a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1e5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e5e:	0618      	lsls	r0, r3, #24
    1e60:	d508      	bpl.n	1e74 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1e62:	4819      	ldr	r0, [pc, #100]	; (1ec8 <mem_manage_fault.isra.0+0xc0>)
    1e64:	4642      	mov	r2, r8
    1e66:	f007 fc6c 	bl	9742 <log_1>
			if (from_hard_fault) {
    1e6a:	b11f      	cbz	r7, 1e74 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1e6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1e72:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1e74:	4d0f      	ldr	r5, [pc, #60]	; (1eb4 <mem_manage_fault.isra.0+0xac>)
    1e76:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1e78:	07d2      	lsls	r2, r2, #31
    1e7a:	d504      	bpl.n	1e86 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    1e7c:	4813      	ldr	r0, [pc, #76]	; (1ecc <mem_manage_fault.isra.0+0xc4>)
    1e7e:	f044 0101 	orr.w	r1, r4, #1
    1e82:	f007 fc51 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1e86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1e88:	069b      	lsls	r3, r3, #26
    1e8a:	d504      	bpl.n	1e96 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    1e8c:	4810      	ldr	r0, [pc, #64]	; (1ed0 <mem_manage_fault.isra.0+0xc8>)
    1e8e:	f044 0101 	orr.w	r1, r4, #1
    1e92:	f007 fc49 	bl	9728 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1e96:	4b07      	ldr	r3, [pc, #28]	; (1eb4 <mem_manage_fault.isra.0+0xac>)
    1e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1e9c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1e9e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1ea2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1ea4:	7030      	strb	r0, [r6, #0]
}
    1ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eaa:	bf00      	nop
    1eac:	0000b750 	.word	0x0000b750
    1eb0:	0000b7f8 	.word	0x0000b7f8
    1eb4:	e000ed00 	.word	0xe000ed00
    1eb8:	0000bec3 	.word	0x0000bec3
    1ebc:	0000bed9 	.word	0x0000bed9
    1ec0:	0000bf0c 	.word	0x0000bf0c
    1ec4:	0000bf1f 	.word	0x0000bf1f
    1ec8:	0000bf37 	.word	0x0000bf37
    1ecc:	0000bf4d 	.word	0x0000bf4d
    1ed0:	0000bf6c 	.word	0x0000bf6c

00001ed4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ed8:	4b2a      	ldr	r3, [pc, #168]	; (1f84 <bus_fault.isra.0+0xb0>)
    1eda:	4c2b      	ldr	r4, [pc, #172]	; (1f88 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1edc:	4d2b      	ldr	r5, [pc, #172]	; (1f8c <bus_fault.isra.0+0xb8>)
    1ede:	1ae4      	subs	r4, r4, r3
    1ee0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    1ee2:	01a4      	lsls	r4, r4, #6
    1ee4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1ee8:	4607      	mov	r7, r0
    1eea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1eec:	4828      	ldr	r0, [pc, #160]	; (1f90 <bus_fault.isra.0+0xbc>)
    1eee:	4641      	mov	r1, r8
    1ef0:	f007 fc1a 	bl	9728 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1ef4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1ef6:	04d1      	lsls	r1, r2, #19
    1ef8:	d503      	bpl.n	1f02 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    1efa:	4826      	ldr	r0, [pc, #152]	; (1f94 <bus_fault.isra.0+0xc0>)
    1efc:	4641      	mov	r1, r8
    1efe:	f007 fc13 	bl	9728 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1f02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f04:	051a      	lsls	r2, r3, #20
    1f06:	d504      	bpl.n	1f12 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    1f08:	4823      	ldr	r0, [pc, #140]	; (1f98 <bus_fault.isra.0+0xc4>)
    1f0a:	f044 0101 	orr.w	r1, r4, #1
    1f0e:	f007 fc0b 	bl	9728 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1f12:	4d1e      	ldr	r5, [pc, #120]	; (1f8c <bus_fault.isra.0+0xb8>)
    1f14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f16:	059b      	lsls	r3, r3, #22
    1f18:	d512      	bpl.n	1f40 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    1f1a:	f044 0801 	orr.w	r8, r4, #1
    1f1e:	481f      	ldr	r0, [pc, #124]	; (1f9c <bus_fault.isra.0+0xc8>)
    1f20:	4641      	mov	r1, r8
    1f22:	f007 fc01 	bl	9728 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    1f26:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1f28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f2a:	0418      	lsls	r0, r3, #16
    1f2c:	d508      	bpl.n	1f40 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1f2e:	481c      	ldr	r0, [pc, #112]	; (1fa0 <bus_fault.isra.0+0xcc>)
    1f30:	4642      	mov	r2, r8
    1f32:	f007 fc06 	bl	9742 <log_1>
			if (from_hard_fault) {
    1f36:	b11f      	cbz	r7, 1f40 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1f38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1f3e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1f40:	4d12      	ldr	r5, [pc, #72]	; (1f8c <bus_fault.isra.0+0xb8>)
    1f42:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f44:	0559      	lsls	r1, r3, #21
    1f46:	d504      	bpl.n	1f52 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    1f48:	4816      	ldr	r0, [pc, #88]	; (1fa4 <bus_fault.isra.0+0xd0>)
    1f4a:	f044 0101 	orr.w	r1, r4, #1
    1f4e:	f007 fbeb 	bl	9728 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1f52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f54:	05da      	lsls	r2, r3, #23
    1f56:	d50d      	bpl.n	1f74 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    1f58:	4813      	ldr	r0, [pc, #76]	; (1fa8 <bus_fault.isra.0+0xd4>)
    1f5a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f5e:	f007 fbe3 	bl	9728 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f62:	4a0a      	ldr	r2, [pc, #40]	; (1f8c <bus_fault.isra.0+0xb8>)
    1f64:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1f66:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f68:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1f6c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1f6e:	7030      	strb	r0, [r6, #0]
}
    1f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1f74:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f76:	049b      	lsls	r3, r3, #18
    1f78:	d5f3      	bpl.n	1f62 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f7a:	480c      	ldr	r0, [pc, #48]	; (1fac <bus_fault.isra.0+0xd8>)
    1f7c:	f044 0101 	orr.w	r1, r4, #1
    1f80:	e7ed      	b.n	1f5e <bus_fault.isra.0+0x8a>
    1f82:	bf00      	nop
    1f84:	0000b750 	.word	0x0000b750
    1f88:	0000b7f8 	.word	0x0000b7f8
    1f8c:	e000ed00 	.word	0xe000ed00
    1f90:	0000bf9b 	.word	0x0000bf9b
    1f94:	0000bfb1 	.word	0x0000bfb1
    1f98:	0000bf0c 	.word	0x0000bf0c
    1f9c:	0000bfc2 	.word	0x0000bfc2
    1fa0:	0000bfdb 	.word	0x0000bfdb
    1fa4:	0000bff0 	.word	0x0000bff0
    1fa8:	0000c00b 	.word	0x0000c00b
    1fac:	0000bf6c 	.word	0x0000bf6c

00001fb0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1fb4:	4b56      	ldr	r3, [pc, #344]	; (2110 <z_arm_fault+0x160>)
    1fb6:	685e      	ldr	r6, [r3, #4]
{
    1fb8:	b08a      	sub	sp, #40	; 0x28
    1fba:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1fbc:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1fc0:	2500      	movs	r5, #0
    1fc2:	f385 8811 	msr	BASEPRI, r5
    1fc6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1fca:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1fce:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1fd2:	d10d      	bne.n	1ff0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1fd4:	f002 030c 	and.w	r3, r2, #12
    1fd8:	2b08      	cmp	r3, #8
    1fda:	d10b      	bne.n	1ff4 <z_arm_fault+0x44>
    1fdc:	494d      	ldr	r1, [pc, #308]	; (2114 <z_arm_fault+0x164>)
    1fde:	4b4e      	ldr	r3, [pc, #312]	; (2118 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1fe0:	484e      	ldr	r0, [pc, #312]	; (211c <z_arm_fault+0x16c>)
    1fe2:	1ac9      	subs	r1, r1, r3
    1fe4:	08c9      	lsrs	r1, r1, #3
    1fe6:	0189      	lsls	r1, r1, #6
    1fe8:	f041 0101 	orr.w	r1, r1, #1
    1fec:	f007 fb9c 	bl	9728 <log_0>
		return NULL;
    1ff0:	462f      	mov	r7, r5
    1ff2:	e003      	b.n	1ffc <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1ff4:	0712      	lsls	r2, r2, #28
    1ff6:	d401      	bmi.n	1ffc <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    1ff8:	4607      	mov	r7, r0
			*nested_exc = true;
    1ffa:	2501      	movs	r5, #1
	*recoverable = false;
    1ffc:	2300      	movs	r3, #0
    1ffe:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2002:	1ee3      	subs	r3, r4, #3
    2004:	2b09      	cmp	r3, #9
    2006:	d86a      	bhi.n	20de <z_arm_fault+0x12e>
    2008:	e8df f003 	tbb	[pc, r3]
    200c:	3c5c5805 	.word	0x3c5c5805
    2010:	69696969 	.word	0x69696969
    2014:	6069      	.short	0x6069
    2016:	4b40      	ldr	r3, [pc, #256]	; (2118 <z_arm_fault+0x168>)
    2018:	4e3e      	ldr	r6, [pc, #248]	; (2114 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    201a:	4841      	ldr	r0, [pc, #260]	; (2120 <z_arm_fault+0x170>)
    201c:	1af6      	subs	r6, r6, r3
    201e:	08f6      	lsrs	r6, r6, #3
    2020:	01b6      	lsls	r6, r6, #6
    2022:	f046 0601 	orr.w	r6, r6, #1
    2026:	4631      	mov	r1, r6
    2028:	f007 fb7e 	bl	9728 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    202c:	4b38      	ldr	r3, [pc, #224]	; (2110 <z_arm_fault+0x160>)
    202e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    2030:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2034:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    2038:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    203c:	d005      	beq.n	204a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    203e:	4839      	ldr	r0, [pc, #228]	; (2124 <z_arm_fault+0x174>)
    2040:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    2042:	f007 fb71 	bl	9728 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2046:	2400      	movs	r4, #0
}
    2048:	e01f      	b.n	208a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    204c:	005b      	lsls	r3, r3, #1
    204e:	d51c      	bpl.n	208a <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    2050:	4835      	ldr	r0, [pc, #212]	; (2128 <z_arm_fault+0x178>)
    2052:	4631      	mov	r1, r6
    2054:	f007 fb68 	bl	9728 <log_0>
		if (SCB_MMFSR != 0) {
    2058:	4b34      	ldr	r3, [pc, #208]	; (212c <z_arm_fault+0x17c>)
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	b12b      	cbz	r3, 206a <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    205e:	f10d 0107 	add.w	r1, sp, #7
    2062:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2064:	f7ff fed0 	bl	1e08 <mem_manage_fault.isra.0>
    2068:	e00e      	b.n	2088 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    206a:	4b31      	ldr	r3, [pc, #196]	; (2130 <z_arm_fault+0x180>)
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	b12b      	cbz	r3, 207c <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    2070:	f10d 0107 	add.w	r1, sp, #7
    2074:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2076:	f7ff ff2d 	bl	1ed4 <bus_fault.isra.0>
    207a:	e005      	b.n	2088 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    207c:	4b2d      	ldr	r3, [pc, #180]	; (2134 <z_arm_fault+0x184>)
    207e:	881b      	ldrh	r3, [r3, #0]
    2080:	b29b      	uxth	r3, r3
    2082:	b113      	cbz	r3, 208a <z_arm_fault+0xda>
			reason = usage_fault(esf);
    2084:	f7ff fe64 	bl	1d50 <usage_fault.isra.0>
    2088:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    208a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    208e:	b993      	cbnz	r3, 20b6 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2090:	2220      	movs	r2, #32
    2092:	4639      	mov	r1, r7
    2094:	a802      	add	r0, sp, #8
    2096:	f007 ff4d 	bl	9f34 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    209a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    209c:	b39d      	cbz	r5, 2106 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    209e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    20a2:	b922      	cbnz	r2, 20ae <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    20a4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    20a8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20ac:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    20ae:	a902      	add	r1, sp, #8
    20b0:	4620      	mov	r0, r4
    20b2:	f7ff fdad 	bl	1c10 <z_arm_fatal_error>
}
    20b6:	b00a      	add	sp, #40	; 0x28
    20b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    20bc:	f10d 0107 	add.w	r1, sp, #7
    20c0:	2000      	movs	r0, #0
    20c2:	e7cf      	b.n	2064 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    20c4:	f10d 0107 	add.w	r1, sp, #7
    20c8:	2000      	movs	r0, #0
    20ca:	e7d4      	b.n	2076 <z_arm_fault+0xc6>
    20cc:	4911      	ldr	r1, [pc, #68]	; (2114 <z_arm_fault+0x164>)
    20ce:	4b12      	ldr	r3, [pc, #72]	; (2118 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    20d0:	4819      	ldr	r0, [pc, #100]	; (2138 <z_arm_fault+0x188>)
    20d2:	1ac9      	subs	r1, r1, r3
    20d4:	08c9      	lsrs	r1, r1, #3
    20d6:	0189      	lsls	r1, r1, #6
    20d8:	f041 0101 	orr.w	r1, r1, #1
    20dc:	e7b1      	b.n	2042 <z_arm_fault+0x92>
    20de:	4a0e      	ldr	r2, [pc, #56]	; (2118 <z_arm_fault+0x168>)
    20e0:	4b0c      	ldr	r3, [pc, #48]	; (2114 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    20e2:	4816      	ldr	r0, [pc, #88]	; (213c <z_arm_fault+0x18c>)
    20e4:	4916      	ldr	r1, [pc, #88]	; (2140 <z_arm_fault+0x190>)
    20e6:	1a9b      	subs	r3, r3, r2
    20e8:	08db      	lsrs	r3, r3, #3
    20ea:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    20ee:	ea4f 1383 	mov.w	r3, r3, lsl #6
    20f2:	bf18      	it	ne
    20f4:	4601      	movne	r1, r0
    20f6:	f043 0301 	orr.w	r3, r3, #1
    20fa:	4812      	ldr	r0, [pc, #72]	; (2144 <z_arm_fault+0x194>)
    20fc:	f1a4 0210 	sub.w	r2, r4, #16
    2100:	f007 fb33 	bl	976a <log_2>
    2104:	e79f      	b.n	2046 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2106:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    210a:	f023 0301 	bic.w	r3, r3, #1
    210e:	e7cd      	b.n	20ac <z_arm_fault+0xfc>
    2110:	e000ed00 	.word	0xe000ed00
    2114:	0000b7f8 	.word	0x0000b7f8
    2118:	0000b750 	.word	0x0000b750
    211c:	0000c023 	.word	0x0000c023
    2120:	0000c04e 	.word	0x0000c04e
    2124:	0000c065 	.word	0x0000c065
    2128:	0000c086 	.word	0x0000c086
    212c:	e000ed28 	.word	0xe000ed28
    2130:	e000ed29 	.word	0xe000ed29
    2134:	e000ed2a 	.word	0xe000ed2a
    2138:	0000c0a5 	.word	0x0000c0a5
    213c:	0000c0f0 	.word	0x0000c0f0
    2140:	0000c0db 	.word	0x0000c0db
    2144:	0000c109 	.word	0x0000c109

00002148 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2148:	4a02      	ldr	r2, [pc, #8]	; (2154 <z_arm_fault_init+0xc>)
    214a:	6953      	ldr	r3, [r2, #20]
    214c:	f043 0310 	orr.w	r3, r3, #16
    2150:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2152:	4770      	bx	lr
    2154:	e000ed00 	.word	0xe000ed00

00002158 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    215a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    215c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    215e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2160:	d003      	beq.n	216a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2162:	4903      	ldr	r1, [pc, #12]	; (2170 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2168:	600a      	str	r2, [r1, #0]

0000216a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    216a:	4770      	bx	lr
	ldr r3, =_kernel
    216c:	20001340 	.word	0x20001340
	ldr r1, =_SCS_ICSR
    2170:	e000ed04 	.word	0xe000ed04

00002174 <z_arm_interrupt_init>:
    2174:	4804      	ldr	r0, [pc, #16]	; (2188 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2176:	2300      	movs	r3, #0
    2178:	2120      	movs	r1, #32
    217a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    217c:	3301      	adds	r3, #1
    217e:	2b30      	cmp	r3, #48	; 0x30
    2180:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2184:	d1f9      	bne.n	217a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2186:	4770      	bx	lr
    2188:	e000e100 	.word	0xe000e100

0000218c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    218c:	b538      	push	{r3, r4, r5, lr}
    218e:	4604      	mov	r4, r0
	__asm__ volatile(
    2190:	f04f 0320 	mov.w	r3, #32
    2194:	f3ef 8511 	mrs	r5, BASEPRI
    2198:	f383 8811 	msr	BASEPRI, r3
    219c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    21a0:	f006 fad2 	bl	8748 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    21a4:	4b0a      	ldr	r3, [pc, #40]	; (21d0 <z_impl_k_thread_abort+0x44>)
    21a6:	689b      	ldr	r3, [r3, #8]
    21a8:	42a3      	cmp	r3, r4
    21aa:	d10b      	bne.n	21c4 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    21ac:	4b09      	ldr	r3, [pc, #36]	; (21d4 <z_impl_k_thread_abort+0x48>)
    21ae:	685a      	ldr	r2, [r3, #4]
    21b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    21b4:	b912      	cbnz	r2, 21bc <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    21b6:	4628      	mov	r0, r5
    21b8:	f7ff fc3a 	bl	1a30 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21bc:	685a      	ldr	r2, [r3, #4]
    21be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    21c2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    21c4:	4628      	mov	r0, r5
}
    21c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    21ca:	f008 beef 	b.w	afac <z_reschedule_irqlock>
    21ce:	bf00      	nop
    21d0:	20001340 	.word	0x20001340
    21d4:	e000ed00 	.word	0xe000ed00

000021d8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    21d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    21da:	4b08      	ldr	r3, [pc, #32]	; (21fc <z_arm_configure_static_mpu_regions+0x24>)
    21dc:	9301      	str	r3, [sp, #4]
    21de:	4b08      	ldr	r3, [pc, #32]	; (2200 <z_arm_configure_static_mpu_regions+0x28>)
    21e0:	9302      	str	r3, [sp, #8]
    21e2:	4b08      	ldr	r3, [pc, #32]	; (2204 <z_arm_configure_static_mpu_regions+0x2c>)
    21e4:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    21e6:	ab01      	add	r3, sp, #4
    21e8:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    21ea:	4a07      	ldr	r2, [pc, #28]	; (2208 <z_arm_configure_static_mpu_regions+0x30>)
    21ec:	4b07      	ldr	r3, [pc, #28]	; (220c <z_arm_configure_static_mpu_regions+0x34>)
    21ee:	2101      	movs	r1, #1
    21f0:	4668      	mov	r0, sp
    21f2:	f000 f8af 	bl	2354 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    21f6:	b005      	add	sp, #20
    21f8:	f85d fb04 	ldr.w	pc, [sp], #4
    21fc:	20000000 	.word	0x20000000
    2200:	00000000 	.word	0x00000000
    2204:	060b0000 	.word	0x060b0000
    2208:	20000000 	.word	0x20000000
    220c:	20020000 	.word	0x20020000

00002210 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    2210:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 22d0 <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    2214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2216:	4606      	mov	r6, r0
    2218:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    221a:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    221c:	2100      	movs	r1, #0
    221e:	42b9      	cmp	r1, r7
    2220:	da1b      	bge.n	225a <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    2222:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    2226:	f8de 4004 	ldr.w	r4, [lr, #4]
    222a:	2c00      	cmp	r4, #0
    222c:	d046      	beq.n	22bc <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    222e:	b1ab      	cbz	r3, 225c <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    2230:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2232:	422c      	tst	r4, r5
    2234:	d105      	bne.n	2242 <mpu_configure_regions+0x32>
		&&
    2236:	2c1f      	cmp	r4, #31
    2238:	d903      	bls.n	2242 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    223a:	f8de 2000 	ldr.w	r2, [lr]
		&&
    223e:	4215      	tst	r5, r2
    2240:	d00c      	beq.n	225c <mpu_configure_regions+0x4c>
    2242:	4a1f      	ldr	r2, [pc, #124]	; (22c0 <mpu_configure_regions+0xb0>)
    2244:	4b1f      	ldr	r3, [pc, #124]	; (22c4 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2246:	4820      	ldr	r0, [pc, #128]	; (22c8 <mpu_configure_regions+0xb8>)
    2248:	1ad2      	subs	r2, r2, r3
    224a:	08d2      	lsrs	r2, r2, #3
    224c:	0192      	lsls	r2, r2, #6
    224e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2252:	f007 fa76 	bl	9742 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    2256:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    225c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    225e:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    2260:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    2264:	f8de 0008 	ldr.w	r0, [lr, #8]
    2268:	d916      	bls.n	2298 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    226a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    226e:	d815      	bhi.n	229c <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2270:	3c01      	subs	r4, #1
    2272:	fab4 f484 	clz	r4, r4
    2276:	f1c4 041f 	rsb	r4, r4, #31
    227a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    227c:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    227e:	ea44 0400 	orr.w	r4, r4, r0
    2282:	d90d      	bls.n	22a0 <mpu_configure_regions+0x90>
    2284:	4a0e      	ldr	r2, [pc, #56]	; (22c0 <mpu_configure_regions+0xb0>)
    2286:	4b0f      	ldr	r3, [pc, #60]	; (22c4 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2288:	4810      	ldr	r0, [pc, #64]	; (22cc <mpu_configure_regions+0xbc>)
    228a:	1ad2      	subs	r2, r2, r3
    228c:	08d2      	lsrs	r2, r2, #3
    228e:	0192      	lsls	r2, r2, #6
    2290:	f042 0201 	orr.w	r2, r2, #1
    2294:	4629      	mov	r1, r5
    2296:	e7dc      	b.n	2252 <mpu_configure_regions+0x42>
		return REGION_32B;
    2298:	2408      	movs	r4, #8
    229a:	e7ef      	b.n	227c <mpu_configure_regions+0x6c>
		return REGION_4G;
    229c:	243e      	movs	r4, #62	; 0x3e
    229e:	e7ed      	b.n	227c <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22a0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    22a4:	432a      	orrs	r2, r5
    22a6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    22aa:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    22ae:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    22b2:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22b4:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    22b8:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    22bc:	3101      	adds	r1, #1
    22be:	e7ae      	b.n	221e <mpu_configure_regions+0xe>
    22c0:	0000b7e8 	.word	0x0000b7e8
    22c4:	0000b750 	.word	0x0000b750
    22c8:	0000c120 	.word	0x0000c120
    22cc:	0000c143 	.word	0x0000c143
    22d0:	e000ed90 	.word	0xe000ed90

000022d4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    22d4:	4b03      	ldr	r3, [pc, #12]	; (22e4 <arm_core_mpu_enable+0x10>)
    22d6:	2205      	movs	r2, #5
    22d8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    22da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22de:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    22e2:	4770      	bx	lr
    22e4:	e000ed90 	.word	0xe000ed90

000022e8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    22e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    22ec:	4b01      	ldr	r3, [pc, #4]	; (22f4 <arm_core_mpu_disable+0xc>)
    22ee:	2200      	movs	r2, #0
    22f0:	605a      	str	r2, [r3, #4]
}
    22f2:	4770      	bx	lr
    22f4:	e000ed90 	.word	0xe000ed90

000022f8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    22f8:	4913      	ldr	r1, [pc, #76]	; (2348 <arm_mpu_init+0x50>)
    22fa:	6808      	ldr	r0, [r1, #0]
    22fc:	2808      	cmp	r0, #8
{
    22fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2300:	d81e      	bhi.n	2340 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2302:	f7ff fff1 	bl	22e8 <arm_core_mpu_disable>
	MPU->RNR = index;
    2306:	4c11      	ldr	r4, [pc, #68]	; (234c <arm_mpu_init+0x54>)
    2308:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    230a:	2200      	movs	r2, #0
    230c:	4290      	cmp	r0, r2
    230e:	f101 010c 	add.w	r1, r1, #12
    2312:	d105      	bne.n	2320 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2314:	4b0e      	ldr	r3, [pc, #56]	; (2350 <arm_mpu_init+0x58>)
    2316:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2318:	f7ff ffdc 	bl	22d4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    231c:	2000      	movs	r0, #0
}
    231e:	bd10      	pop	{r4, pc}
    2320:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2322:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2326:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    232a:	4313      	orrs	r3, r2
    232c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2330:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2332:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2336:	f043 0301 	orr.w	r3, r3, #1
    233a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    233c:	3201      	adds	r2, #1
    233e:	e7e5      	b.n	230c <arm_mpu_init+0x14>
		return -1;
    2340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2344:	e7eb      	b.n	231e <arm_mpu_init+0x26>
    2346:	bf00      	nop
    2348:	0000b93c 	.word	0x0000b93c
    234c:	e000ed90 	.word	0xe000ed90
    2350:	20001833 	.word	0x20001833

00002354 <arm_core_mpu_configure_static_mpu_regions>:
{
    2354:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2356:	4c03      	ldr	r4, [pc, #12]	; (2364 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2358:	2301      	movs	r3, #1
    235a:	7822      	ldrb	r2, [r4, #0]
    235c:	f7ff ff58 	bl	2210 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2360:	7020      	strb	r0, [r4, #0]
}
    2362:	bd10      	pop	{r4, pc}
    2364:	20001833 	.word	0x20001833

00002368 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2368:	4b01      	ldr	r3, [pc, #4]	; (2370 <__stdout_hook_install+0x8>)
    236a:	6018      	str	r0, [r3, #0]
}
    236c:	4770      	bx	lr
    236e:	bf00      	nop
    2370:	200000f0 	.word	0x200000f0

00002374 <nordicsemi_nrf52_init>:
    2374:	f04f 0320 	mov.w	r3, #32
    2378:	f3ef 8211 	mrs	r2, BASEPRI
    237c:	f383 8811 	msr	BASEPRI, r3
    2380:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2384:	4906      	ldr	r1, [pc, #24]	; (23a0 <nordicsemi_nrf52_init+0x2c>)
    2386:	2301      	movs	r3, #1
    2388:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    238c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2390:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2394:	f382 8811 	msr	BASEPRI, r2
    2398:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    239c:	2000      	movs	r0, #0
    239e:	4770      	bx	lr
    23a0:	4001e000 	.word	0x4001e000

000023a4 <sys_arch_reboot>:
    *p_gpregret = val;
    23a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23a8:	b2c0      	uxtb	r0, r0
    23aa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    23ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    23b2:	4905      	ldr	r1, [pc, #20]	; (23c8 <sys_arch_reboot+0x24>)
    23b4:	4b05      	ldr	r3, [pc, #20]	; (23cc <sys_arch_reboot+0x28>)
    23b6:	68ca      	ldr	r2, [r1, #12]
    23b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    23bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    23be:	60cb      	str	r3, [r1, #12]
    23c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    23c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    23c6:	e7fd      	b.n	23c4 <sys_arch_reboot+0x20>
    23c8:	e000ed00 	.word	0xe000ed00
    23cc:	05fa0004 	.word	0x05fa0004

000023d0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    23d0:	b120      	cbz	r0, 23dc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    23d2:	4b03      	ldr	r3, [pc, #12]	; (23e0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    23d4:	0180      	lsls	r0, r0, #6
    23d6:	f043 0301 	orr.w	r3, r3, #1
    23da:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	0000b890 	.word	0x0000b890

000023e4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    23e4:	4b0e      	ldr	r3, [pc, #56]	; (2420 <bt_hex_real+0x3c>)
    23e6:	2940      	cmp	r1, #64	; 0x40
{
    23e8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    23ea:	bf28      	it	cs
    23ec:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    23ee:	4c0d      	ldr	r4, [pc, #52]	; (2424 <bt_hex_real+0x40>)
    23f0:	1846      	adds	r6, r0, r1
    23f2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    23f4:	42b0      	cmp	r0, r6
    23f6:	f103 0302 	add.w	r3, r3, #2
    23fa:	d104      	bne.n	2406 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    23fc:	2300      	movs	r3, #0
    23fe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    2402:	4807      	ldr	r0, [pc, #28]	; (2420 <bt_hex_real+0x3c>)
    2404:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    2406:	7802      	ldrb	r2, [r0, #0]
    2408:	0912      	lsrs	r2, r2, #4
    240a:	5ca2      	ldrb	r2, [r4, r2]
    240c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    2410:	f810 2b01 	ldrb.w	r2, [r0], #1
    2414:	f002 020f 	and.w	r2, r2, #15
    2418:	5ca2      	ldrb	r2, [r4, r2]
    241a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    241e:	e7e9      	b.n	23f4 <bt_hex_real+0x10>
    2420:	20001834 	.word	0x20001834
    2424:	0000c1c1 	.word	0x0000c1c1

00002428 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    2428:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    242a:	7803      	ldrb	r3, [r0, #0]
    242c:	b08b      	sub	sp, #44	; 0x2c
    242e:	4604      	mov	r4, r0
    2430:	ad07      	add	r5, sp, #28
    2432:	2b03      	cmp	r3, #3
    2434:	d821      	bhi.n	247a <bt_addr_le_str_real+0x52>
    2436:	e8df f003 	tbb	[pc, r3]
    243a:	1a02      	.short	0x1a02
    243c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    243e:	4912      	ldr	r1, [pc, #72]	; (2488 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2440:	4628      	mov	r0, r5
    2442:	f007 fd37 	bl	9eb4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2446:	7863      	ldrb	r3, [r4, #1]
    2448:	9304      	str	r3, [sp, #16]
    244a:	78a3      	ldrb	r3, [r4, #2]
    244c:	9303      	str	r3, [sp, #12]
    244e:	78e3      	ldrb	r3, [r4, #3]
    2450:	9302      	str	r3, [sp, #8]
    2452:	7923      	ldrb	r3, [r4, #4]
    2454:	9301      	str	r3, [sp, #4]
    2456:	7963      	ldrb	r3, [r4, #5]
    2458:	9300      	str	r3, [sp, #0]
    245a:	4a0c      	ldr	r2, [pc, #48]	; (248c <bt_addr_le_str_real+0x64>)
    245c:	79a3      	ldrb	r3, [r4, #6]
    245e:	9505      	str	r5, [sp, #20]
    2460:	211e      	movs	r1, #30
    2462:	480b      	ldr	r0, [pc, #44]	; (2490 <bt_addr_le_str_real+0x68>)
    2464:	f006 fe8d 	bl	9182 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    2468:	4809      	ldr	r0, [pc, #36]	; (2490 <bt_addr_le_str_real+0x68>)
    246a:	b00b      	add	sp, #44	; 0x2c
    246c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    246e:	4909      	ldr	r1, [pc, #36]	; (2494 <bt_addr_le_str_real+0x6c>)
    2470:	e7e6      	b.n	2440 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    2472:	4909      	ldr	r1, [pc, #36]	; (2498 <bt_addr_le_str_real+0x70>)
    2474:	e7e4      	b.n	2440 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    2476:	4909      	ldr	r1, [pc, #36]	; (249c <bt_addr_le_str_real+0x74>)
    2478:	e7e2      	b.n	2440 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    247a:	4a09      	ldr	r2, [pc, #36]	; (24a0 <bt_addr_le_str_real+0x78>)
    247c:	210a      	movs	r1, #10
    247e:	4628      	mov	r0, r5
    2480:	f006 fe7f 	bl	9182 <snprintk>
		break;
    2484:	e7df      	b.n	2446 <bt_addr_le_str_real+0x1e>
    2486:	bf00      	nop
    2488:	0000c17c 	.word	0x0000c17c
    248c:	0000c19e 	.word	0x0000c19e
    2490:	200018b5 	.word	0x200018b5
    2494:	0000c183 	.word	0x0000c183
    2498:	0000c18a 	.word	0x0000c18a
    249c:	0000c194 	.word	0x0000c194
    24a0:	0000c45d 	.word	0x0000c45d

000024a4 <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    24a4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    24a6:	4d0b      	ldr	r5, [pc, #44]	; (24d4 <ver_str+0x30>)
{
    24a8:	4606      	mov	r6, r0
	const char * const str[] = {
    24aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    24ac:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    24ae:	466c      	mov	r4, sp
    24b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    24b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    24ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
    24be:	2e0b      	cmp	r6, #11
		return str[ver];
    24c0:	bf9b      	ittet	ls
    24c2:	ab0c      	addls	r3, sp, #48	; 0x30
    24c4:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    24c8:	4803      	ldrhi	r0, [pc, #12]	; (24d8 <ver_str+0x34>)
		return str[ver];
    24ca:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    24ce:	b00c      	add	sp, #48	; 0x30
    24d0:	bd70      	pop	{r4, r5, r6, pc}
    24d2:	bf00      	nop
    24d4:	0000b854 	.word	0x0000b854
    24d8:	0000c2bd 	.word	0x0000c2bd

000024dc <hci_vendor_event>:
{
    24dc:	b510      	push	{r4, lr}
    24de:	4a0a      	ldr	r2, [pc, #40]	; (2508 <hci_vendor_event+0x2c>)
    24e0:	4c0a      	ldr	r4, [pc, #40]	; (250c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    24e2:	8981      	ldrh	r1, [r0, #12]
    24e4:	6880      	ldr	r0, [r0, #8]
    24e6:	1aa4      	subs	r4, r4, r2
    24e8:	f7ff ff7c 	bl	23e4 <bt_hex_real>
    24ec:	f7fe fbce 	bl	c8c <log_strdup>
    24f0:	08e4      	lsrs	r4, r4, #3
    24f2:	01a4      	lsls	r4, r4, #6
    24f4:	f044 0402 	orr.w	r4, r4, #2
    24f8:	4601      	mov	r1, r0
    24fa:	4622      	mov	r2, r4
    24fc:	4804      	ldr	r0, [pc, #16]	; (2510 <hci_vendor_event+0x34>)
}
    24fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    2502:	f007 b91e 	b.w	9742 <log_1>
    2506:	bf00      	nop
    2508:	0000b750 	.word	0x0000b750
    250c:	0000b7c8 	.word	0x0000b7c8
    2510:	0000c2c5 	.word	0x0000c2c5

00002514 <handle_event>:
{
    2514:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2516:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    251a:	4605      	mov	r5, r0
    251c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    251e:	4293      	cmp	r3, r2
    2520:	d117      	bne.n	2552 <handle_event+0x3e>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    2522:	8986      	ldrh	r6, [r0, #12]
    2524:	4b19      	ldr	r3, [pc, #100]	; (258c <handle_event+0x78>)
    2526:	4c1a      	ldr	r4, [pc, #104]	; (2590 <handle_event+0x7c>)
    2528:	6880      	ldr	r0, [r0, #8]
    252a:	4631      	mov	r1, r6
    252c:	1ae4      	subs	r4, r4, r3
    252e:	f7ff ff59 	bl	23e4 <bt_hex_real>
    2532:	f7fe fbab 	bl	c8c <log_strdup>
    2536:	08e4      	lsrs	r4, r4, #3
    2538:	01a4      	lsls	r4, r4, #6
    253a:	f044 0402 	orr.w	r4, r4, #2
    253e:	4603      	mov	r3, r0
    2540:	f8ad 4000 	strh.w	r4, [sp]
    2544:	4813      	ldr	r0, [pc, #76]	; (2594 <handle_event+0x80>)
    2546:	4632      	mov	r2, r6
    2548:	4629      	mov	r1, r5
    254a:	f007 f927 	bl	979c <log_3>
}
    254e:	b002      	add	sp, #8
    2550:	bd70      	pop	{r4, r5, r6, pc}
		const struct event_handler *handler = &handlers[i];
    2552:	4614      	mov	r4, r2
		if (handler->event != event) {
    2554:	f812 1b08 	ldrb.w	r1, [r2], #8
    2558:	42a9      	cmp	r1, r5
    255a:	d1e0      	bne.n	251e <handle_event+0xa>
		if (buf->len < handler->min_len) {
    255c:	8981      	ldrh	r1, [r0, #12]
    255e:	7863      	ldrb	r3, [r4, #1]
    2560:	428b      	cmp	r3, r1
    2562:	d90d      	bls.n	2580 <handle_event+0x6c>
    2564:	4a09      	ldr	r2, [pc, #36]	; (258c <handle_event+0x78>)
    2566:	4b0a      	ldr	r3, [pc, #40]	; (2590 <handle_event+0x7c>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    2568:	480b      	ldr	r0, [pc, #44]	; (2598 <handle_event+0x84>)
    256a:	1a9b      	subs	r3, r3, r2
    256c:	08db      	lsrs	r3, r3, #3
    256e:	019b      	lsls	r3, r3, #6
    2570:	f043 0301 	orr.w	r3, r3, #1
    2574:	462a      	mov	r2, r5
}
    2576:	b002      	add	sp, #8
    2578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    257c:	f007 b8f5 	b.w	976a <log_2>
		handler->handler(buf);
    2580:	6863      	ldr	r3, [r4, #4]
}
    2582:	b002      	add	sp, #8
    2584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    2588:	4718      	bx	r3
    258a:	bf00      	nop
    258c:	0000b750 	.word	0x0000b750
    2590:	0000b7c8 	.word	0x0000b7c8
    2594:	0000c30b 	.word	0x0000c30b
    2598:	0000c2e9 	.word	0x0000c2e9

0000259c <hci_le_meta_event>:
{
    259c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    259e:	2101      	movs	r1, #1
{
    25a0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    25a2:	3008      	adds	r0, #8
    25a4:	f008 fa18 	bl	a9d8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    25a8:	4621      	mov	r1, r4
    25aa:	4a03      	ldr	r2, [pc, #12]	; (25b8 <hci_le_meta_event+0x1c>)
    25ac:	7800      	ldrb	r0, [r0, #0]
}
    25ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    25b2:	2300      	movs	r3, #0
    25b4:	f7ff bfae 	b.w	2514 <handle_event>
    25b8:	0000b95c 	.word	0x0000b95c

000025bc <hci_cmd_done>:
{
    25bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    25c0:	4607      	mov	r7, r0
    25c2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    25c4:	7990      	ldrb	r0, [r2, #6]
    25c6:	4e34      	ldr	r6, [pc, #208]	; (2698 <hci_cmd_done+0xdc>)
{
    25c8:	4688      	mov	r8, r1
    25ca:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    25cc:	f004 fcde 	bl	6f8c <net_buf_pool_get>
    25d0:	4286      	cmp	r6, r0
    25d2:	d016      	beq.n	2602 <hci_cmd_done+0x46>
    25d4:	4b31      	ldr	r3, [pc, #196]	; (269c <hci_cmd_done+0xe0>)
    25d6:	4d32      	ldr	r5, [pc, #200]	; (26a0 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    25d8:	79a0      	ldrb	r0, [r4, #6]
    25da:	9700      	str	r7, [sp, #0]
    25dc:	1aed      	subs	r5, r5, r3
    25de:	08ed      	lsrs	r5, r5, #3
    25e0:	9001      	str	r0, [sp, #4]
    25e2:	f004 fcd3 	bl	6f8c <net_buf_pool_get>
    25e6:	01ad      	lsls	r5, r5, #6
    25e8:	f045 0502 	orr.w	r5, r5, #2
    25ec:	e9cd 0602 	strd	r0, r6, [sp, #8]
    25f0:	462b      	mov	r3, r5
    25f2:	482c      	ldr	r0, [pc, #176]	; (26a4 <hci_cmd_done+0xe8>)
    25f4:	2204      	movs	r2, #4
    25f6:	4669      	mov	r1, sp
    25f8:	f007 f8ec 	bl	97d4 <log_n>
}
    25fc:	b005      	add	sp, #20
    25fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    2602:	4620      	mov	r0, r4
    2604:	f004 fcca 	bl	6f9c <net_buf_id>
    2608:	4d27      	ldr	r5, [pc, #156]	; (26a8 <hci_cmd_done+0xec>)
    260a:	f04f 090c 	mov.w	r9, #12
    260e:	fb09 5300 	mla	r3, r9, r0, r5
    2612:	885b      	ldrh	r3, [r3, #2]
    2614:	42bb      	cmp	r3, r7
    2616:	d011      	beq.n	263c <hci_cmd_done+0x80>
    2618:	4b20      	ldr	r3, [pc, #128]	; (269c <hci_cmd_done+0xe0>)
    261a:	4e21      	ldr	r6, [pc, #132]	; (26a0 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    261c:	4620      	mov	r0, r4
    261e:	1af6      	subs	r6, r6, r3
    2620:	f004 fcbc 	bl	6f9c <net_buf_id>
    2624:	08f6      	lsrs	r6, r6, #3
    2626:	fb09 5000 	mla	r0, r9, r0, r5
    262a:	01b6      	lsls	r6, r6, #6
    262c:	f046 0602 	orr.w	r6, r6, #2
    2630:	8842      	ldrh	r2, [r0, #2]
    2632:	481e      	ldr	r0, [pc, #120]	; (26ac <hci_cmd_done+0xf0>)
    2634:	4633      	mov	r3, r6
    2636:	4639      	mov	r1, r7
    2638:	f007 f897 	bl	976a <log_2>
	if (cmd(buf)->state && !status) {
    263c:	4620      	mov	r0, r4
    263e:	f004 fcad 	bl	6f9c <net_buf_id>
    2642:	260c      	movs	r6, #12
    2644:	fb06 5000 	mla	r0, r6, r0, r5
    2648:	6843      	ldr	r3, [r0, #4]
    264a:	b16b      	cbz	r3, 2668 <hci_cmd_done+0xac>
    264c:	f1b8 0f00 	cmp.w	r8, #0
    2650:	d10a      	bne.n	2668 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    2652:	4620      	mov	r0, r4
    2654:	f004 fca2 	bl	6f9c <net_buf_id>
    2658:	fb06 5000 	mla	r0, r6, r0, r5
    265c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    265e:	e9d3 0100 	ldrd	r0, r1, [r3]
    2662:	7a1a      	ldrb	r2, [r3, #8]
    2664:	f007 fcd1 	bl	a00a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    2668:	4620      	mov	r0, r4
    266a:	f004 fc97 	bl	6f9c <net_buf_id>
    266e:	260c      	movs	r6, #12
    2670:	fb06 5000 	mla	r0, r6, r0, r5
    2674:	6883      	ldr	r3, [r0, #8]
    2676:	2b00      	cmp	r3, #0
    2678:	d0c0      	beq.n	25fc <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    267a:	4620      	mov	r0, r4
    267c:	f004 fc8e 	bl	6f9c <net_buf_id>
    2680:	4370      	muls	r0, r6
    2682:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    2686:	4620      	mov	r0, r4
    2688:	f004 fc88 	bl	6f9c <net_buf_id>
    268c:	fb06 5500 	mla	r5, r6, r0, r5
    2690:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    2692:	f006 f9fb 	bl	8a8c <z_impl_k_sem_give>
}
    2696:	e7b1      	b.n	25fc <hci_cmd_done+0x40>
    2698:	2000044c 	.word	0x2000044c
    269c:	0000b750 	.word	0x0000b750
    26a0:	0000b7c8 	.word	0x0000b7c8
    26a4:	0000c32d 	.word	0x0000c32d
    26a8:	20000694 	.word	0x20000694
    26ac:	0000c362 	.word	0x0000c362

000026b0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    26b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    26b2:	4f0b      	ldr	r7, [pc, #44]	; (26e0 <id_find+0x30>)
{
    26b4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    26b6:	2500      	movs	r5, #0
    26b8:	79fb      	ldrb	r3, [r7, #7]
    26ba:	b2ec      	uxtb	r4, r5
    26bc:	42a3      	cmp	r3, r4
    26be:	d802      	bhi.n	26c6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    26c0:	f06f 0401 	mvn.w	r4, #1
    26c4:	e009      	b.n	26da <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    26c6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    26ca:	2207      	movs	r2, #7
    26cc:	4439      	add	r1, r7
    26ce:	4630      	mov	r0, r6
    26d0:	f007 fc20 	bl	9f14 <memcmp>
    26d4:	3501      	adds	r5, #1
    26d6:	2800      	cmp	r0, #0
    26d8:	d1ee      	bne.n	26b8 <id_find+0x8>
}
    26da:	4620      	mov	r0, r4
    26dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26de:	bf00      	nop
    26e0:	20000000 	.word	0x20000000

000026e4 <hci_cmd_status>:
{
    26e4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    26e6:	2104      	movs	r1, #4
{
    26e8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    26ea:	3008      	adds	r0, #8
    26ec:	f008 f974 	bl	a9d8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    26f0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    26f2:	7801      	ldrb	r1, [r0, #0]
    26f4:	8840      	ldrh	r0, [r0, #2]
    26f6:	4622      	mov	r2, r4
    26f8:	f7ff ff60 	bl	25bc <hci_cmd_done>
	if (ncmd) {
    26fc:	b125      	cbz	r5, 2708 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    26fe:	4803      	ldr	r0, [pc, #12]	; (270c <hci_cmd_status+0x28>)
}
    2700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2704:	f006 b9c2 	b.w	8a8c <z_impl_k_sem_give>
    2708:	bd38      	pop	{r3, r4, r5, pc}
    270a:	bf00      	nop
    270c:	200000b0 	.word	0x200000b0

00002710 <hci_cmd_complete>:
{
    2710:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    2712:	2103      	movs	r1, #3
{
    2714:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    2716:	3008      	adds	r0, #8
    2718:	f008 f95e 	bl	a9d8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    271c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    271e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    2720:	7819      	ldrb	r1, [r3, #0]
    2722:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    2726:	4622      	mov	r2, r4
    2728:	f7ff ff48 	bl	25bc <hci_cmd_done>
	if (ncmd) {
    272c:	b125      	cbz	r5, 2738 <hci_cmd_complete+0x28>
    272e:	4803      	ldr	r0, [pc, #12]	; (273c <hci_cmd_complete+0x2c>)
}
    2730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2734:	f006 b9aa 	b.w	8a8c <z_impl_k_sem_give>
    2738:	bd38      	pop	{r3, r4, r5, pc}
    273a:	bf00      	nop
    273c:	200000b0 	.word	0x200000b0

00002740 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    2740:	6843      	ldr	r3, [r0, #4]
{
    2742:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2744:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    2746:	0558      	lsls	r0, r3, #21
    2748:	d408      	bmi.n	275c <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    274a:	6922      	ldr	r2, [r4, #16]
    274c:	b10a      	cbz	r2, 2752 <valid_adv_param+0x12>
    274e:	07d9      	lsls	r1, r3, #31
    2750:	d504      	bpl.n	275c <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    2752:	4d17      	ldr	r5, [pc, #92]	; (27b0 <valid_adv_param+0x70>)
    2754:	7820      	ldrb	r0, [r4, #0]
    2756:	79eb      	ldrb	r3, [r5, #7]
    2758:	4283      	cmp	r3, r0
    275a:	d802      	bhi.n	2762 <valid_adv_param+0x22>
			return false;
    275c:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    275e:	b003      	add	sp, #12
    2760:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    2762:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2766:	2300      	movs	r3, #0
    2768:	2207      	movs	r2, #7
    276a:	4669      	mov	r1, sp
    276c:	4428      	add	r0, r5
    276e:	9300      	str	r3, [sp, #0]
    2770:	f8cd 3003 	str.w	r3, [sp, #3]
    2774:	f007 fbce 	bl	9f14 <memcmp>
	if (param->id >= bt_dev.id_count ||
    2778:	2800      	cmp	r0, #0
    277a:	d0ef      	beq.n	275c <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    277c:	6863      	ldr	r3, [r4, #4]
    277e:	07da      	lsls	r2, r3, #31
    2780:	d406      	bmi.n	2790 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2782:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    2786:	2a08      	cmp	r2, #8
    2788:	d802      	bhi.n	2790 <valid_adv_param+0x50>
    278a:	68a2      	ldr	r2, [r4, #8]
    278c:	2a9f      	cmp	r2, #159	; 0x9f
    278e:	d9e5      	bls.n	275c <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    2790:	06db      	lsls	r3, r3, #27
    2792:	d401      	bmi.n	2798 <valid_adv_param+0x58>
    2794:	6923      	ldr	r3, [r4, #16]
    2796:	b943      	cbnz	r3, 27aa <valid_adv_param+0x6a>
		if (param->interval_min > param->interval_max ||
    2798:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    279c:	429a      	cmp	r2, r3
    279e:	d8dd      	bhi.n	275c <valid_adv_param+0x1c>
    27a0:	2a1f      	cmp	r2, #31
    27a2:	d9db      	bls.n	275c <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    27a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    27a8:	d8d8      	bhi.n	275c <valid_adv_param+0x1c>
	return true;
    27aa:	2001      	movs	r0, #1
    27ac:	e7d7      	b.n	275e <valid_adv_param+0x1e>
    27ae:	bf00      	nop
    27b0:	20000000 	.word	0x20000000

000027b4 <bt_hci_cmd_create>:
{
    27b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    27b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    27c0:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    27c2:	4816      	ldr	r0, [pc, #88]	; (281c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    27c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2820 <bt_hci_cmd_create+0x6c>
{
    27c8:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    27ca:	f008 f8ba 	bl	a942 <net_buf_alloc_fixed>
    27ce:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    27d0:	f100 0b08 	add.w	fp, r0, #8
    27d4:	2100      	movs	r1, #0
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    27d6:	2700      	movs	r7, #0
    27d8:	4658      	mov	r0, fp
    27da:	f008 f8d1 	bl	a980 <net_buf_simple_reserve>
    27de:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    27e0:	4620      	mov	r0, r4
    27e2:	f004 fbdb 	bl	6f9c <net_buf_id>
    27e6:	f04f 0a0c 	mov.w	sl, #12
    27ea:	fb0a 8000 	mla	r0, sl, r0, r8
    27ee:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    27f0:	4620      	mov	r0, r4
    27f2:	f004 fbd3 	bl	6f9c <net_buf_id>
    27f6:	fb0a 8000 	mla	r0, sl, r0, r8
    27fa:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    27fc:	4620      	mov	r0, r4
    27fe:	f004 fbcd 	bl	6f9c <net_buf_id>
    2802:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    2806:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    2808:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    280a:	4658      	mov	r0, fp
    280c:	f008 f8cd 	bl	a9aa <net_buf_simple_add>
	hdr->param_len = param_len;
    2810:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2812:	8005      	strh	r5, [r0, #0]
}
    2814:	4620      	mov	r0, r4
    2816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    281a:	bf00      	nop
    281c:	2000044c 	.word	0x2000044c
    2820:	20000694 	.word	0x20000694

00002824 <bt_hci_cmd_send_sync>:
{
    2824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2828:	4607      	mov	r7, r0
    282a:	b086      	sub	sp, #24
    282c:	4615      	mov	r5, r2
	if (!buf) {
    282e:	460c      	mov	r4, r1
    2830:	b921      	cbnz	r1, 283c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    2832:	f7ff ffbf 	bl	27b4 <bt_hci_cmd_create>
		if (!buf) {
    2836:	4604      	mov	r4, r0
    2838:	2800      	cmp	r0, #0
    283a:	d055      	beq.n	28e8 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    283c:	2201      	movs	r2, #1
    283e:	2100      	movs	r1, #0
    2840:	4668      	mov	r0, sp
    2842:	f008 fca3 	bl	b18c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2846:	4620      	mov	r0, r4
    2848:	f004 fba8 	bl	6f9c <net_buf_id>
    284c:	4e28      	ldr	r6, [pc, #160]	; (28f0 <bt_hci_cmd_send_sync+0xcc>)
    284e:	230c      	movs	r3, #12
    2850:	fb03 6000 	mla	r0, r3, r0, r6
    2854:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    2858:	4620      	mov	r0, r4
    285a:	f008 f8a2 	bl	a9a2 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    285e:	4825      	ldr	r0, [pc, #148]	; (28f4 <bt_hci_cmd_send_sync+0xd0>)
    2860:	4621      	mov	r1, r4
    2862:	f008 f891 	bl	a988 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    2866:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    286a:	2300      	movs	r3, #0
    286c:	4668      	mov	r0, sp
    286e:	f006 f933 	bl	8ad8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    2872:	4680      	mov	r8, r0
    2874:	b180      	cbz	r0, 2898 <bt_hci_cmd_send_sync+0x74>
    2876:	4a20      	ldr	r2, [pc, #128]	; (28f8 <bt_hci_cmd_send_sync+0xd4>)
    2878:	4920      	ldr	r1, [pc, #128]	; (28fc <bt_hci_cmd_send_sync+0xd8>)
    287a:	4821      	ldr	r0, [pc, #132]	; (2900 <bt_hci_cmd_send_sync+0xdc>)
    287c:	f44f 73b9 	mov.w	r3, #370	; 0x172
    2880:	f006 fc72 	bl	9168 <printk>
    2884:	481f      	ldr	r0, [pc, #124]	; (2904 <bt_hci_cmd_send_sync+0xe0>)
    2886:	4641      	mov	r1, r8
    2888:	f006 fc6e 	bl	9168 <printk>
    288c:	4040      	eors	r0, r0
    288e:	f380 8811 	msr	BASEPRI, r0
    2892:	f04f 0003 	mov.w	r0, #3
    2896:	df02      	svc	2
	status = cmd(buf)->status;
    2898:	4620      	mov	r0, r4
    289a:	f004 fb7f 	bl	6f9c <net_buf_id>
    289e:	230c      	movs	r3, #12
    28a0:	4343      	muls	r3, r0
    28a2:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    28a4:	b1be      	cbz	r6, 28d6 <bt_hci_cmd_send_sync+0xb2>
    28a6:	4a18      	ldr	r2, [pc, #96]	; (2908 <bt_hci_cmd_send_sync+0xe4>)
    28a8:	4b18      	ldr	r3, [pc, #96]	; (290c <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    28aa:	4819      	ldr	r0, [pc, #100]	; (2910 <bt_hci_cmd_send_sync+0xec>)
    28ac:	1a9b      	subs	r3, r3, r2
    28ae:	08db      	lsrs	r3, r3, #3
    28b0:	019b      	lsls	r3, r3, #6
    28b2:	f043 0302 	orr.w	r3, r3, #2
    28b6:	4632      	mov	r2, r6
    28b8:	4639      	mov	r1, r7
    28ba:	f006 ff56 	bl	976a <log_2>
		net_buf_unref(buf);
    28be:	4620      	mov	r0, r4
    28c0:	f004 fc20 	bl	7104 <net_buf_unref>
			return -EIO;
    28c4:	2e09      	cmp	r6, #9
    28c6:	bf0c      	ite	eq
    28c8:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    28cc:	f06f 0004 	mvnne.w	r0, #4
}
    28d0:	b006      	add	sp, #24
    28d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    28d6:	b115      	cbz	r5, 28de <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    28d8:	602c      	str	r4, [r5, #0]
	return 0;
    28da:	4630      	mov	r0, r6
    28dc:	e7f8      	b.n	28d0 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    28de:	4620      	mov	r0, r4
    28e0:	f004 fc10 	bl	7104 <net_buf_unref>
	return 0;
    28e4:	4628      	mov	r0, r5
    28e6:	e7f3      	b.n	28d0 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    28e8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    28ec:	e7f0      	b.n	28d0 <bt_hci_cmd_send_sync+0xac>
    28ee:	bf00      	nop
    28f0:	20000694 	.word	0x20000694
    28f4:	200000cc 	.word	0x200000cc
    28f8:	0000c395 	.word	0x0000c395
    28fc:	0000c402 	.word	0x0000c402
    2900:	0000c40b 	.word	0x0000c40b
    2904:	0000c428 	.word	0x0000c428
    2908:	0000b750 	.word	0x0000b750
    290c:	0000b7c8 	.word	0x0000b7c8
    2910:	0000c448 	.word	0x0000c448

00002914 <set_random_address>:
{
    2914:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2916:	4e15      	ldr	r6, [pc, #84]	; (296c <set_random_address+0x58>)
    2918:	2206      	movs	r2, #6
    291a:	f106 0131 	add.w	r1, r6, #49	; 0x31
    291e:	4605      	mov	r5, r0
    2920:	f007 faf8 	bl	9f14 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2924:	4604      	mov	r4, r0
    2926:	b1e0      	cbz	r0, 2962 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2928:	2106      	movs	r1, #6
    292a:	f242 0005 	movw	r0, #8197	; 0x2005
    292e:	f7ff ff41 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    2932:	4604      	mov	r4, r0
    2934:	b1b8      	cbz	r0, 2966 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2936:	2206      	movs	r2, #6
    2938:	4629      	mov	r1, r5
    293a:	3008      	adds	r0, #8
    293c:	f008 f83b 	bl	a9b6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2940:	4621      	mov	r1, r4
    2942:	2200      	movs	r2, #0
    2944:	f242 0005 	movw	r0, #8197	; 0x2005
    2948:	f7ff ff6c 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    294c:	4604      	mov	r4, r0
    294e:	b940      	cbnz	r0, 2962 <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2950:	2206      	movs	r2, #6
    2952:	4629      	mov	r1, r5
    2954:	f106 0031 	add.w	r0, r6, #49	; 0x31
    2958:	f007 faec 	bl	9f34 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    295c:	2301      	movs	r3, #1
    295e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    2962:	4620      	mov	r0, r4
    2964:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2966:	f06f 0436 	mvn.w	r4, #54	; 0x36
    296a:	e7fa      	b.n	2962 <set_random_address+0x4e>
    296c:	20000000 	.word	0x20000000

00002970 <le_adv_set_random_addr.isra.0>:
	} else {
		return BT_LE_ADV_FP_NO_WHITELIST;
	}
}

static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, u32_t options,
    2970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2972:	4604      	mov	r4, r0
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    2974:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, u32_t options,
    2978:	4615      	mov	r5, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    297a:	d015      	beq.n	29a8 <le_adv_set_random_addr.isra.0+0x38>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    297c:	4e1c      	ldr	r6, [pc, #112]	; (29f0 <le_adv_set_random_addr.isra.0+0x80>)
    297e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    2982:	00e7      	lsls	r7, r4, #3
    2984:	5cf3      	ldrb	r3, [r6, r3]
    2986:	2b01      	cmp	r3, #1
    2988:	d005      	beq.n	2996 <le_adv_set_random_addr.isra.0+0x26>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    298a:	1b3c      	subs	r4, r7, r4
		if (err) {
			return err;
		}
	}

	return 0;
    298c:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    298e:	5d33      	ldrb	r3, [r6, r4]
    2990:	702b      	strb	r3, [r5, #0]
}
    2992:	b003      	add	sp, #12
    2994:	bdf0      	pop	{r4, r5, r6, r7, pc}
				err = set_adv_random_address(adv, &id_addr->a);
    2996:	2007      	movs	r0, #7
    2998:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    299c:	4430      	add	r0, r6
    299e:	f7ff ffb9 	bl	2914 <set_random_address>
				if (err) {
    29a2:	2800      	cmp	r0, #0
    29a4:	d0f1      	beq.n	298a <le_adv_set_random_addr.isra.0+0x1a>
    29a6:	e7f4      	b.n	2992 <le_adv_set_random_addr.isra.0+0x22>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    29a8:	074b      	lsls	r3, r1, #29
    29aa:	d510      	bpl.n	29ce <le_adv_set_random_addr.isra.0+0x5e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    29ac:	4e10      	ldr	r6, [pc, #64]	; (29f0 <le_adv_set_random_addr.isra.0+0x80>)
    29ae:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    29b2:	00e7      	lsls	r7, r4, #3
    29b4:	5cf3      	ldrb	r3, [r6, r3]
    29b6:	2b01      	cmp	r3, #1
    29b8:	d105      	bne.n	29c6 <le_adv_set_random_addr.isra.0+0x56>
				err = set_adv_random_address(adv, &id_addr->a);
    29ba:	2007      	movs	r0, #7
    29bc:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    29c0:	4430      	add	r0, r6
    29c2:	f7ff ffa7 	bl	2914 <set_random_address>
			*own_addr_type = id_addr->type;
    29c6:	1b3c      	subs	r4, r7, r4
    29c8:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    29ca:	702b      	strb	r3, [r5, #0]
		if (err) {
    29cc:	e7e1      	b.n	2992 <le_adv_set_random_addr.isra.0+0x22>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    29ce:	2106      	movs	r1, #6
    29d0:	4668      	mov	r0, sp
    29d2:	f007 fe42 	bl	a65a <bt_rand>
	if (err) {
    29d6:	b940      	cbnz	r0, 29ea <le_adv_set_random_addr.isra.0+0x7a>
	nrpa.val[5] &= 0x3f;
    29d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    29dc:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    29de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    29e2:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    29e6:	f7ff ff95 	bl	2914 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    29ea:	2301      	movs	r3, #1
    29ec:	e7ed      	b.n	29ca <le_adv_set_random_addr.isra.0+0x5a>
    29ee:	bf00      	nop
    29f0:	20000000 	.word	0x20000000

000029f4 <hci_set_ad>:
{
    29f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29f8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    29fa:	2120      	movs	r1, #32
{
    29fc:	4682      	mov	sl, r0
    29fe:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2a00:	f7ff fed8 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    2a04:	4606      	mov	r6, r0
    2a06:	2800      	cmp	r0, #0
    2a08:	d05b      	beq.n	2ac2 <hci_set_ad+0xce>
	set_data = net_buf_add(buf, sizeof(*set_data));
    2a0a:	2120      	movs	r1, #32
    2a0c:	3008      	adds	r0, #8
    2a0e:	f007 ffcc 	bl	a9aa <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    2a12:	2220      	movs	r2, #32
    2a14:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2a16:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    2a18:	f007 fab7 	bl	9f8a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    2a1c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    2a20:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    2a24:	9300      	str	r3, [sp, #0]
	u8_t set_data_len = 0;
    2a26:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    2a28:	f8d4 8000 	ldr.w	r8, [r4]
    2a2c:	2300      	movs	r3, #0
    2a2e:	6862      	ldr	r2, [r4, #4]
    2a30:	4293      	cmp	r3, r2
    2a32:	d30d      	bcc.n	2a50 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    2a34:	9b00      	ldr	r3, [sp, #0]
    2a36:	3408      	adds	r4, #8
    2a38:	429c      	cmp	r4, r3
    2a3a:	d1f5      	bne.n	2a28 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2a3c:	2200      	movs	r2, #0
    2a3e:	4631      	mov	r1, r6
    2a40:	4650      	mov	r0, sl
	*data_len = set_data_len;
    2a42:	f889 5000 	strb.w	r5, [r9]
}
    2a46:	b003      	add	sp, #12
    2a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2a4c:	f7ff beea 	b.w	2824 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    2a50:	f898 2001 	ldrb.w	r2, [r8, #1]
			u8_t type = data[j].type;
    2a54:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    2a58:	1ca8      	adds	r0, r5, #2
    2a5a:	1881      	adds	r1, r0, r2
    2a5c:	291f      	cmp	r1, #31
    2a5e:	d919      	bls.n	2a94 <hci_set_ad+0xa0>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    2a60:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    2a64:	f1c5 021d 	rsb	r2, r5, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    2a68:	d100      	bne.n	2a6c <hci_set_ad+0x78>
    2a6a:	b98a      	cbnz	r2, 2a90 <hci_set_ad+0x9c>
    2a6c:	4b16      	ldr	r3, [pc, #88]	; (2ac8 <hci_set_ad+0xd4>)
    2a6e:	4917      	ldr	r1, [pc, #92]	; (2acc <hci_set_ad+0xd8>)
					BT_ERR("Too big advertising data");
    2a70:	4817      	ldr	r0, [pc, #92]	; (2ad0 <hci_set_ad+0xdc>)
    2a72:	1ac9      	subs	r1, r1, r3
    2a74:	08c9      	lsrs	r1, r1, #3
    2a76:	0189      	lsls	r1, r1, #6
    2a78:	f041 0101 	orr.w	r1, r1, #1
    2a7c:	f006 fe54 	bl	9728 <log_0>
		net_buf_unref(buf);
    2a80:	4630      	mov	r0, r6
    2a82:	f004 fb3f 	bl	7104 <net_buf_unref>
					return -EINVAL;
    2a86:	f06f 0015 	mvn.w	r0, #21
}
    2a8a:	b003      	add	sp, #12
    2a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    2a90:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    2a94:	b2d7      	uxtb	r7, r2
    2a96:	1c79      	adds	r1, r7, #1
    2a98:	f80b 1005 	strb.w	r1, [fp, r5]
    2a9c:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    2a9e:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    2aa0:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    2aa4:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    2aa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2aac:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    2aae:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    2ab0:	f007 fa40 	bl	9f34 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    2ab4:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    2ab6:	443d      	add	r5, r7
    2ab8:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    2aba:	3301      	adds	r3, #1
    2abc:	f108 0808 	add.w	r8, r8, #8
    2ac0:	e7b5      	b.n	2a2e <hci_set_ad+0x3a>
		return -ENOBUFS;
    2ac2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ac6:	e7e0      	b.n	2a8a <hci_set_ad+0x96>
    2ac8:	0000b750 	.word	0x0000b750
    2acc:	0000b7c8 	.word	0x0000b7c8
    2ad0:	0000c464 	.word	0x0000c464

00002ad4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    2ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ad8:	b086      	sub	sp, #24
    2ada:	4604      	mov	r4, r0
    2adc:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    2ae0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    2ae4:	460f      	mov	r7, r1
    2ae6:	4615      	mov	r5, r2
	struct bt_ad d[2] = {};
    2ae8:	2100      	movs	r1, #0
    2aea:	2210      	movs	r2, #16
    2aec:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    2aee:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    2af0:	f007 fa4b 	bl	9f8a <memset>
	if (use_name) {
    2af4:	f1b8 0f00 	cmp.w	r8, #0
    2af8:	d00f      	beq.n	2b1a <le_adv_update.constprop.0+0x46>
		if ((ad && ad_has_name(ad, ad_len)) ||
    2afa:	2c00      	cmp	r4, #0
    2afc:	d13e      	bne.n	2b7c <le_adv_update.constprop.0+0xa8>
    2afe:	2d00      	cmp	r5, #0
    2b00:	d147      	bne.n	2b92 <le_adv_update.constprop.0+0xbe>
		data = (struct bt_data)BT_DATA(
    2b02:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2bcc <le_adv_update.constprop.0+0xf8>
    2b06:	4650      	mov	r0, sl
    2b08:	f007 f9f1 	bl	9eee <strlen>
    2b0c:	2309      	movs	r3, #9
    2b0e:	f88d 3000 	strb.w	r3, [sp]
    2b12:	f88d 0001 	strb.w	r0, [sp, #1]
    2b16:	f8cd a004 	str.w	sl, [sp, #4]
	d[0].len = ad_len;
    2b1a:	e9cd 4702 	strd	r4, r7, [sp, #8]
	if (use_name && !scannable) {
    2b1e:	f1b8 0f00 	cmp.w	r8, #0
    2b22:	d038      	beq.n	2b96 <le_adv_update.constprop.0+0xc2>
    2b24:	f1b9 0f00 	cmp.w	r9, #0
    2b28:	d135      	bne.n	2b96 <le_adv_update.constprop.0+0xc2>
		d[1].len = 1;
    2b2a:	2301      	movs	r3, #1
		d[1].data = &data;
    2b2c:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    2b30:	9305      	str	r3, [sp, #20]
		d_len = 2;
    2b32:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    2b34:	a902      	add	r1, sp, #8
    2b36:	f242 0008 	movw	r0, #8200	; 0x2008
    2b3a:	f7ff ff5b 	bl	29f4 <hci_set_ad>
	if (err) {
    2b3e:	4604      	mov	r4, r0
    2b40:	b978      	cbnz	r0, 2b62 <le_adv_update.constprop.0+0x8e>
	if (scannable) {
    2b42:	f1b9 0f00 	cmp.w	r9, #0
    2b46:	d128      	bne.n	2b9a <le_adv_update.constprop.0+0xc6>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2b48:	4b1f      	ldr	r3, [pc, #124]	; (2bc8 <le_adv_update.constprop.0+0xf4>)
    2b4a:	f3bf 8f5b 	dmb	ish
    2b4e:	e853 2f00 	ldrex	r2, [r3]
    2b52:	f042 0204 	orr.w	r2, r2, #4
    2b56:	e843 2100 	strex	r1, r2, [r3]
    2b5a:	2900      	cmp	r1, #0
    2b5c:	d1f7      	bne.n	2b4e <le_adv_update.constprop.0+0x7a>
    2b5e:	f3bf 8f5b 	dmb	ish
}
    2b62:	4620      	mov	r0, r4
    2b64:	b006      	add	sp, #24
    2b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    2b6a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    2b6e:	3a08      	subs	r2, #8
    2b70:	2a01      	cmp	r2, #1
    2b72:	d925      	bls.n	2bc0 <le_adv_update.constprop.0+0xec>
	for (i = 0; i < ad_len; i++) {
    2b74:	3301      	adds	r3, #1
    2b76:	429f      	cmp	r7, r3
    2b78:	d1f7      	bne.n	2b6a <le_adv_update.constprop.0+0x96>
    2b7a:	e7c0      	b.n	2afe <le_adv_update.constprop.0+0x2a>
    2b7c:	2300      	movs	r3, #0
    2b7e:	e7fa      	b.n	2b76 <le_adv_update.constprop.0+0xa2>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    2b80:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    2b84:	3a08      	subs	r2, #8
    2b86:	2a01      	cmp	r2, #1
    2b88:	d91a      	bls.n	2bc0 <le_adv_update.constprop.0+0xec>
	for (i = 0; i < ad_len; i++) {
    2b8a:	3301      	adds	r3, #1
    2b8c:	429e      	cmp	r6, r3
    2b8e:	d1f7      	bne.n	2b80 <le_adv_update.constprop.0+0xac>
    2b90:	e7b7      	b.n	2b02 <le_adv_update.constprop.0+0x2e>
    2b92:	2300      	movs	r3, #0
    2b94:	e7fa      	b.n	2b8c <le_adv_update.constprop.0+0xb8>
	d_len = 1;
    2b96:	2201      	movs	r2, #1
    2b98:	e7cc      	b.n	2b34 <le_adv_update.constprop.0+0x60>
		d[0].len = sd_len;
    2b9a:	e9cd 5602 	strd	r5, r6, [sp, #8]
		if (use_name) {
    2b9e:	2201      	movs	r2, #1
    2ba0:	f1b8 0f00 	cmp.w	r8, #0
    2ba4:	d003      	beq.n	2bae <le_adv_update.constprop.0+0xda>
			d[1].len = 1;
    2ba6:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    2ba8:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    2bac:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    2bae:	a902      	add	r1, sp, #8
    2bb0:	f242 0009 	movw	r0, #8201	; 0x2009
    2bb4:	f7ff ff1e 	bl	29f4 <hci_set_ad>
		if (err) {
    2bb8:	2800      	cmp	r0, #0
    2bba:	d0c5      	beq.n	2b48 <le_adv_update.constprop.0+0x74>
    2bbc:	4604      	mov	r4, r0
    2bbe:	e7d0      	b.n	2b62 <le_adv_update.constprop.0+0x8e>
			return -EINVAL;
    2bc0:	f06f 0415 	mvn.w	r4, #21
    2bc4:	e7cd      	b.n	2b62 <le_adv_update.constprop.0+0x8e>
    2bc6:	bf00      	nop
    2bc8:	2000002c 	.word	0x2000002c
    2bcc:	0000bbee 	.word	0x0000bbee

00002bd0 <set_le_adv_enable_legacy.constprop.0>:
static int set_le_adv_enable_legacy(struct bt_le_ext_adv *adv, bool enable)
    2bd0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2bd2:	2101      	movs	r1, #1
static int set_le_adv_enable_legacy(struct bt_le_ext_adv *adv, bool enable)
    2bd4:	b085      	sub	sp, #20
    2bd6:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2bd8:	f242 000a 	movw	r0, #8202	; 0x200a
    2bdc:	f7ff fdea 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    2be0:	4604      	mov	r4, r0
    2be2:	b1e8      	cbz	r0, 2c20 <set_le_adv_enable_legacy.constprop.0+0x50>
	if (enable) {
    2be4:	3008      	adds	r0, #8
    2be6:	b1cd      	cbz	r5, 2c1c <set_le_adv_enable_legacy.constprop.0+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2be8:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2bea:	f007 feed 	bl	a9c8 <net_buf_simple_add_u8>
	state->target = target;
    2bee:	4b0e      	ldr	r3, [pc, #56]	; (2c28 <set_le_adv_enable_legacy.constprop.0+0x58>)
    2bf0:	9301      	str	r3, [sp, #4]
	cmd(buf)->state = &state;
    2bf2:	4620      	mov	r0, r4
	state->bit = bit;
    2bf4:	2306      	movs	r3, #6
    2bf6:	9302      	str	r3, [sp, #8]
	state->val = val;
    2bf8:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    2bfc:	f004 f9ce 	bl	6f9c <net_buf_id>
    2c00:	4b0a      	ldr	r3, [pc, #40]	; (2c2c <set_le_adv_enable_legacy.constprop.0+0x5c>)
    2c02:	220c      	movs	r2, #12
    2c04:	fb02 3000 	mla	r0, r2, r0, r3
    2c08:	ab01      	add	r3, sp, #4
    2c0a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2c0c:	2200      	movs	r2, #0
    2c0e:	4621      	mov	r1, r4
    2c10:	f242 000a 	movw	r0, #8202	; 0x200a
    2c14:	f7ff fe06 	bl	2824 <bt_hci_cmd_send_sync>
}
    2c18:	b005      	add	sp, #20
    2c1a:	bd30      	pop	{r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2c1c:	4629      	mov	r1, r5
    2c1e:	e7e4      	b.n	2bea <set_le_adv_enable_legacy.constprop.0+0x1a>
		return -ENOBUFS;
    2c20:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2c24:	e7f8      	b.n	2c18 <set_le_adv_enable_legacy.constprop.0+0x48>
    2c26:	bf00      	nop
    2c28:	2000002c 	.word	0x2000002c
    2c2c:	20000694 	.word	0x20000694

00002c30 <id_create.isra.0>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    2c30:	b530      	push	{r4, r5, lr}
    2c32:	4d14      	ldr	r5, [pc, #80]	; (2c84 <id_create.isra.0+0x54>)
    2c34:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c38:	b085      	sub	sp, #20
    2c3a:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    2c3c:	460c      	mov	r4, r1
    2c3e:	b179      	cbz	r1, 2c60 <id_create.isra.0+0x30>
    2c40:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2c42:	2207      	movs	r2, #7
    2c44:	4669      	mov	r1, sp
    2c46:	4620      	mov	r0, r4
    2c48:	9300      	str	r3, [sp, #0]
    2c4a:	f8cd 3003 	str.w	r3, [sp, #3]
    2c4e:	f007 f961 	bl	9f14 <memcmp>
    2c52:	b128      	cbz	r0, 2c60 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    2c54:	4621      	mov	r1, r4
    2c56:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    2c58:	f007 f9c5 	bl	9fe6 <bt_addr_le_copy>
}
    2c5c:	b005      	add	sp, #20
    2c5e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    2c60:	a802      	add	r0, sp, #8
    2c62:	f007 f9ec 	bl	a03e <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    2c66:	a802      	add	r0, sp, #8
    2c68:	f7ff fd22 	bl	26b0 <id_find>
    2c6c:	2800      	cmp	r0, #0
    2c6e:	daf7      	bge.n	2c60 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    2c70:	a902      	add	r1, sp, #8
    2c72:	4628      	mov	r0, r5
    2c74:	f007 f9b7 	bl	9fe6 <bt_addr_le_copy>
		if (addr) {
    2c78:	2c00      	cmp	r4, #0
    2c7a:	d0ef      	beq.n	2c5c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    2c7c:	4629      	mov	r1, r5
    2c7e:	4620      	mov	r0, r4
    2c80:	e7ea      	b.n	2c58 <id_create.isra.0+0x28>
    2c82:	bf00      	nop
    2c84:	20000000 	.word	0x20000000

00002c88 <bt_send>:
	return bt_dev.drv->send(buf);
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <bt_send+0xc>)
    2c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    2c8e:	691b      	ldr	r3, [r3, #16]
    2c90:	4718      	bx	r3
    2c92:	bf00      	nop
    2c94:	20000000 	.word	0x20000000

00002c98 <hci_tx_thread>:
{
    2c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c9c:	4b46      	ldr	r3, [pc, #280]	; (2db8 <hci_tx_thread+0x120>)
    2c9e:	4d47      	ldr	r5, [pc, #284]	; (2dbc <hci_tx_thread+0x124>)
    2ca0:	4e47      	ldr	r6, [pc, #284]	; (2dc0 <hci_tx_thread+0x128>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2ca2:	4f48      	ldr	r7, [pc, #288]	; (2dc4 <hci_tx_thread+0x12c>)
    2ca4:	1aed      	subs	r5, r5, r3
    2ca6:	08ed      	lsrs	r5, r5, #3
    2ca8:	f106 08b0 	add.w	r8, r6, #176	; 0xb0
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	f36f 3310 	bfc	r3, #12, #5
    2cb2:	60fb      	str	r3, [r7, #12]
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    2cb4:	4843      	ldr	r0, [pc, #268]	; (2dc4 <hci_tx_thread+0x12c>)
    2cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cbe:	2101      	movs	r1, #1
    2cc0:	f006 f9bc 	bl	903c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    2cc4:	b160      	cbz	r0, 2ce0 <hci_tx_thread+0x48>
    2cc6:	4a40      	ldr	r2, [pc, #256]	; (2dc8 <hci_tx_thread+0x130>)
    2cc8:	4940      	ldr	r1, [pc, #256]	; (2dcc <hci_tx_thread+0x134>)
    2cca:	4841      	ldr	r0, [pc, #260]	; (2dd0 <hci_tx_thread+0x138>)
    2ccc:	f241 43e3 	movw	r3, #5347	; 0x14e3
    2cd0:	f006 fa4a 	bl	9168 <printk>
    2cd4:	4040      	eors	r0, r0
    2cd6:	f380 8811 	msr	BASEPRI, r0
    2cda:	f04f 0003 	mov.w	r0, #3
    2cde:	df02      	svc	2
		switch (ev->state) {
    2ce0:	68f9      	ldr	r1, [r7, #12]
    2ce2:	f3c1 3104 	ubfx	r1, r1, #12, #5
    2ce6:	2901      	cmp	r1, #1
    2ce8:	d907      	bls.n	2cfa <hci_tx_thread+0x62>
    2cea:	2904      	cmp	r1, #4
    2cec:	d008      	beq.n	2d00 <hci_tx_thread+0x68>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2cee:	01aa      	lsls	r2, r5, #6
    2cf0:	4838      	ldr	r0, [pc, #224]	; (2dd4 <hci_tx_thread+0x13c>)
    2cf2:	f042 0202 	orr.w	r2, r2, #2
    2cf6:	f006 fd24 	bl	9742 <log_1>
	z_impl_k_yield();
    2cfa:	f005 fe53 	bl	89a4 <z_impl_k_yield>
	while (1) {
    2cfe:	e7d5      	b.n	2cac <hci_tx_thread+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2d00:	7b3b      	ldrb	r3, [r7, #12]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d1f9      	bne.n	2cfa <hci_tx_thread+0x62>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2d06:	4834      	ldr	r0, [pc, #208]	; (2dd8 <hci_tx_thread+0x140>)
    2d08:	2200      	movs	r2, #0
    2d0a:	2300      	movs	r3, #0
    2d0c:	f007 fe1e 	bl	a94c <net_buf_get>
	BT_ASSERT(buf);
    2d10:	4604      	mov	r4, r0
    2d12:	2800      	cmp	r0, #0
    2d14:	d042      	beq.n	2d9c <hci_tx_thread+0x104>
	return z_impl_k_sem_take(sem, timeout);
    2d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d1e:	4640      	mov	r0, r8
    2d20:	f005 feda 	bl	8ad8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2d24:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    2d28:	bb53      	cbnz	r3, 2d80 <hci_tx_thread+0xe8>
	bt_dev.sent_cmd = net_buf_ref(buf);
    2d2a:	4620      	mov	r0, r4
    2d2c:	f007 fe39 	bl	a9a2 <net_buf_ref>
    2d30:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
	err = bt_send(buf);
    2d34:	4620      	mov	r0, r4
    2d36:	f7ff ffa7 	bl	2c88 <bt_send>
	if (err) {
    2d3a:	4601      	mov	r1, r0
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d0dc      	beq.n	2cfa <hci_tx_thread+0x62>
		BT_ERR("Unable to send to driver (err %d)", err);
    2d40:	01aa      	lsls	r2, r5, #6
    2d42:	4826      	ldr	r0, [pc, #152]	; (2ddc <hci_tx_thread+0x144>)
    2d44:	f042 0201 	orr.w	r2, r2, #1
    2d48:	f006 fcfb 	bl	9742 <log_1>
	z_impl_k_sem_give(sem);
    2d4c:	4824      	ldr	r0, [pc, #144]	; (2de0 <hci_tx_thread+0x148>)
    2d4e:	f005 fe9d 	bl	8a8c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    2d52:	4620      	mov	r0, r4
    2d54:	f004 f922 	bl	6f9c <net_buf_id>
    2d58:	4b22      	ldr	r3, [pc, #136]	; (2de4 <hci_tx_thread+0x14c>)
    2d5a:	220c      	movs	r2, #12
    2d5c:	fb02 3000 	mla	r0, r2, r0, r3
    2d60:	211f      	movs	r1, #31
    2d62:	4622      	mov	r2, r4
    2d64:	8840      	ldrh	r0, [r0, #2]
    2d66:	f7ff fc29 	bl	25bc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2d6a:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    2d6e:	f004 f9c9 	bl	7104 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2d72:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2d74:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    2d76:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		net_buf_unref(buf);
    2d7a:	f004 f9c3 	bl	7104 <net_buf_unref>
    2d7e:	e7bc      	b.n	2cfa <hci_tx_thread+0x62>
		BT_ERR("Uncleared pending sent_cmd");
    2d80:	01a9      	lsls	r1, r5, #6
    2d82:	4819      	ldr	r0, [pc, #100]	; (2de8 <hci_tx_thread+0x150>)
    2d84:	f041 0101 	orr.w	r1, r1, #1
    2d88:	f006 fcce 	bl	9728 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    2d8c:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    2d90:	f004 f9b8 	bl	7104 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2d94:	2300      	movs	r3, #0
    2d96:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
    2d9a:	e7c6      	b.n	2d2a <hci_tx_thread+0x92>
	BT_ASSERT(buf);
    2d9c:	4a0a      	ldr	r2, [pc, #40]	; (2dc8 <hci_tx_thread+0x130>)
    2d9e:	4913      	ldr	r1, [pc, #76]	; (2dec <hci_tx_thread+0x154>)
    2da0:	480b      	ldr	r0, [pc, #44]	; (2dd0 <hci_tx_thread+0x138>)
    2da2:	f241 4385 	movw	r3, #5253	; 0x1485
    2da6:	f006 f9df 	bl	9168 <printk>
    2daa:	4040      	eors	r0, r0
    2dac:	f380 8811 	msr	BASEPRI, r0
    2db0:	f04f 0003 	mov.w	r0, #3
    2db4:	df02      	svc	2
    2db6:	e7ae      	b.n	2d16 <hci_tx_thread+0x7e>
    2db8:	0000b750 	.word	0x0000b750
    2dbc:	0000b7c8 	.word	0x0000b7c8
    2dc0:	20000000 	.word	0x20000000
    2dc4:	200000f4 	.word	0x200000f4
    2dc8:	0000c395 	.word	0x0000c395
    2dcc:	0000c402 	.word	0x0000c402
    2dd0:	0000c40b 	.word	0x0000c40b
    2dd4:	0000c49f 	.word	0x0000c49f
    2dd8:	200000cc 	.word	0x200000cc
    2ddc:	0000c47d 	.word	0x0000c47d
    2de0:	200000b0 	.word	0x200000b0
    2de4:	20000694 	.word	0x20000694
    2de8:	0000c4c0 	.word	0x0000c4c0
    2dec:	0000d16e 	.word	0x0000d16e

00002df0 <bt_recv>:
{
    2df0:	b538      	push	{r3, r4, r5, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2df2:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    2df4:	2901      	cmp	r1, #1
{
    2df6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2df8:	d131      	bne.n	2e5e <bt_recv+0x6e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2dfa:	8983      	ldrh	r3, [r0, #12]
    2dfc:	2b01      	cmp	r3, #1
    2dfe:	d80c      	bhi.n	2e1a <bt_recv+0x2a>
    2e00:	4a1f      	ldr	r2, [pc, #124]	; (2e80 <bt_recv+0x90>)
    2e02:	4920      	ldr	r1, [pc, #128]	; (2e84 <bt_recv+0x94>)
    2e04:	4820      	ldr	r0, [pc, #128]	; (2e88 <bt_recv+0x98>)
    2e06:	f241 4372 	movw	r3, #5234	; 0x1472
    2e0a:	f006 f9ad 	bl	9168 <printk>
    2e0e:	4040      	eors	r0, r0
    2e10:	f380 8811 	msr	BASEPRI, r0
    2e14:	f04f 0003 	mov.w	r0, #3
    2e18:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    2e1a:	2102      	movs	r1, #2
    2e1c:	f104 0008 	add.w	r0, r4, #8
    2e20:	f007 fdda 	bl	a9d8 <net_buf_simple_pull_mem>
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2e24:	7803      	ldrb	r3, [r0, #0]
    2e26:	3b0e      	subs	r3, #14
    2e28:	2b01      	cmp	r3, #1
    2e2a:	4605      	mov	r5, r0
    2e2c:	d80c      	bhi.n	2e48 <bt_recv+0x58>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2e2e:	4a14      	ldr	r2, [pc, #80]	; (2e80 <bt_recv+0x90>)
    2e30:	4916      	ldr	r1, [pc, #88]	; (2e8c <bt_recv+0x9c>)
    2e32:	4815      	ldr	r0, [pc, #84]	; (2e88 <bt_recv+0x98>)
    2e34:	f241 4376 	movw	r3, #5238	; 0x1476
    2e38:	f006 f996 	bl	9168 <printk>
    2e3c:	4040      	eors	r0, r0
    2e3e:	f380 8811 	msr	BASEPRI, r0
    2e42:	f04f 0003 	mov.w	r0, #3
    2e46:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    2e48:	4a11      	ldr	r2, [pc, #68]	; (2e90 <bt_recv+0xa0>)
    2e4a:	7828      	ldrb	r0, [r5, #0]
    2e4c:	2302      	movs	r3, #2
    2e4e:	4621      	mov	r1, r4
    2e50:	f7ff fb60 	bl	2514 <handle_event>
	net_buf_unref(buf);
    2e54:	4620      	mov	r0, r4
    2e56:	f004 f955 	bl	7104 <net_buf_unref>
		return 0;
    2e5a:	2000      	movs	r0, #0
}
    2e5c:	bd38      	pop	{r3, r4, r5, pc}
    2e5e:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <bt_recv+0xa4>)
    2e60:	4a0d      	ldr	r2, [pc, #52]	; (2e98 <bt_recv+0xa8>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2e62:	480e      	ldr	r0, [pc, #56]	; (2e9c <bt_recv+0xac>)
    2e64:	1ad2      	subs	r2, r2, r3
    2e66:	08d2      	lsrs	r2, r2, #3
    2e68:	0192      	lsls	r2, r2, #6
    2e6a:	f042 0201 	orr.w	r2, r2, #1
    2e6e:	f006 fc68 	bl	9742 <log_1>
		net_buf_unref(buf);
    2e72:	4620      	mov	r0, r4
    2e74:	f004 f946 	bl	7104 <net_buf_unref>
		return -EINVAL;
    2e78:	f06f 0015 	mvn.w	r0, #21
    2e7c:	e7ee      	b.n	2e5c <bt_recv+0x6c>
    2e7e:	bf00      	nop
    2e80:	0000c395 	.word	0x0000c395
    2e84:	0000c4db 	.word	0x0000c4db
    2e88:	0000c40b 	.word	0x0000c40b
    2e8c:	0000c4f4 	.word	0x0000c4f4
    2e90:	0000b99c 	.word	0x0000b99c
    2e94:	0000b750 	.word	0x0000b750
    2e98:	0000b7c8 	.word	0x0000b7c8
    2e9c:	0000c512 	.word	0x0000c512

00002ea0 <bt_recv_prio>:
{
    2ea0:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2ea2:	7d03      	ldrb	r3, [r0, #20]
    2ea4:	2b01      	cmp	r3, #1
{
    2ea6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2ea8:	d00c      	beq.n	2ec4 <bt_recv_prio+0x24>
    2eaa:	4a1f      	ldr	r2, [pc, #124]	; (2f28 <bt_recv_prio+0x88>)
    2eac:	491f      	ldr	r1, [pc, #124]	; (2f2c <bt_recv_prio+0x8c>)
    2eae:	4820      	ldr	r0, [pc, #128]	; (2f30 <bt_recv_prio+0x90>)
    2eb0:	f641 03f7 	movw	r3, #6391	; 0x18f7
    2eb4:	f006 f958 	bl	9168 <printk>
    2eb8:	4040      	eors	r0, r0
    2eba:	f380 8811 	msr	BASEPRI, r0
    2ebe:	f04f 0003 	mov.w	r0, #3
    2ec2:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2ec4:	89a3      	ldrh	r3, [r4, #12]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d80c      	bhi.n	2ee4 <bt_recv_prio+0x44>
    2eca:	4a17      	ldr	r2, [pc, #92]	; (2f28 <bt_recv_prio+0x88>)
    2ecc:	4919      	ldr	r1, [pc, #100]	; (2f34 <bt_recv_prio+0x94>)
    2ece:	4818      	ldr	r0, [pc, #96]	; (2f30 <bt_recv_prio+0x90>)
    2ed0:	f641 03f8 	movw	r3, #6392	; 0x18f8
    2ed4:	f006 f948 	bl	9168 <printk>
    2ed8:	4040      	eors	r0, r0
    2eda:	f380 8811 	msr	BASEPRI, r0
    2ede:	f04f 0003 	mov.w	r0, #3
    2ee2:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    2ee4:	2102      	movs	r1, #2
    2ee6:	f104 0008 	add.w	r0, r4, #8
    2eea:	f007 fd75 	bl	a9d8 <net_buf_simple_pull_mem>
    2eee:	7803      	ldrb	r3, [r0, #0]
    2ef0:	3b0e      	subs	r3, #14
    2ef2:	2b01      	cmp	r3, #1
    2ef4:	4605      	mov	r5, r0
    2ef6:	d90c      	bls.n	2f12 <bt_recv_prio+0x72>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2ef8:	4a0b      	ldr	r2, [pc, #44]	; (2f28 <bt_recv_prio+0x88>)
    2efa:	490f      	ldr	r1, [pc, #60]	; (2f38 <bt_recv_prio+0x98>)
    2efc:	480c      	ldr	r0, [pc, #48]	; (2f30 <bt_recv_prio+0x90>)
    2efe:	f641 03fb 	movw	r3, #6395	; 0x18fb
    2f02:	f006 f931 	bl	9168 <printk>
    2f06:	4040      	eors	r0, r0
    2f08:	f380 8811 	msr	BASEPRI, r0
    2f0c:	f04f 0003 	mov.w	r0, #3
    2f10:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    2f12:	4a0a      	ldr	r2, [pc, #40]	; (2f3c <bt_recv_prio+0x9c>)
    2f14:	7828      	ldrb	r0, [r5, #0]
    2f16:	2302      	movs	r3, #2
    2f18:	4621      	mov	r1, r4
    2f1a:	f7ff fafb 	bl	2514 <handle_event>
	net_buf_unref(buf);
    2f1e:	4620      	mov	r0, r4
    2f20:	f004 f8f0 	bl	7104 <net_buf_unref>
}
    2f24:	2000      	movs	r0, #0
    2f26:	bd38      	pop	{r3, r4, r5, pc}
    2f28:	0000c395 	.word	0x0000c395
    2f2c:	0000c526 	.word	0x0000c526
    2f30:	0000c40b 	.word	0x0000c40b
    2f34:	0000c4db 	.word	0x0000c4db
    2f38:	0000c4f5 	.word	0x0000c4f5
    2f3c:	0000b9bc 	.word	0x0000b9bc

00002f40 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2f40:	4a08      	ldr	r2, [pc, #32]	; (2f64 <bt_hci_driver_register+0x24>)
{
    2f42:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    2f44:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    2f48:	b930      	cbnz	r0, 2f58 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2f4a:	68d9      	ldr	r1, [r3, #12]
    2f4c:	b139      	cbz	r1, 2f5e <bt_hci_driver_register+0x1e>
    2f4e:	6919      	ldr	r1, [r3, #16]
    2f50:	b129      	cbz	r1, 2f5e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2f52:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	return 0;
    2f56:	4770      	bx	lr
		return -EALREADY;
    2f58:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2f5c:	4770      	bx	lr
		return -EINVAL;
    2f5e:	f06f 0015 	mvn.w	r0, #21
}
    2f62:	4770      	bx	lr
    2f64:	20000000 	.word	0x20000000

00002f68 <bt_finalize_init>:
{
    2f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f6c:	4c30      	ldr	r4, [pc, #192]	; (3030 <bt_finalize_init+0xc8>)
    2f6e:	f3bf 8f5b 	dmb	ish
    2f72:	b087      	sub	sp, #28
    2f74:	f104 0398 	add.w	r3, r4, #152	; 0x98
    2f78:	e853 2f00 	ldrex	r2, [r3]
    2f7c:	f042 0202 	orr.w	r2, r2, #2
    2f80:	e843 2100 	strex	r1, r2, [r3]
    2f84:	2900      	cmp	r1, #0
    2f86:	d1f7      	bne.n	2f78 <bt_finalize_init+0x10>
    2f88:	f3bf 8f5b 	dmb	ish
    2f8c:	4b29      	ldr	r3, [pc, #164]	; (3034 <bt_finalize_init+0xcc>)
    2f8e:	4d2a      	ldr	r5, [pc, #168]	; (3038 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    2f90:	492a      	ldr	r1, [pc, #168]	; (303c <bt_finalize_init+0xd4>)
    2f92:	4e2b      	ldr	r6, [pc, #172]	; (3040 <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
    2f94:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3050 <bt_finalize_init+0xe8>
    2f98:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    2f9a:	79e3      	ldrb	r3, [r4, #7]
    2f9c:	4620      	mov	r0, r4
    2f9e:	2b01      	cmp	r3, #1
    2fa0:	bf88      	it	hi
    2fa2:	460e      	movhi	r6, r1
    2fa4:	f7ff fa40 	bl	2428 <bt_addr_le_str_real>
    2fa8:	f7fd fe70 	bl	c8c <log_strdup>
    2fac:	08ed      	lsrs	r5, r5, #3
    2fae:	01ad      	lsls	r5, r5, #6
    2fb0:	f045 0703 	orr.w	r7, r5, #3
    2fb4:	4602      	mov	r2, r0
    2fb6:	4631      	mov	r1, r6
    2fb8:	4822      	ldr	r0, [pc, #136]	; (3044 <bt_finalize_init+0xdc>)
    2fba:	463b      	mov	r3, r7
    2fbc:	f006 fbd5 	bl	976a <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    2fc0:	46a0      	mov	r8, r4
    2fc2:	2601      	movs	r6, #1
    2fc4:	79e3      	ldrb	r3, [r4, #7]
    2fc6:	429e      	cmp	r6, r3
    2fc8:	f108 0807 	add.w	r8, r8, #7
    2fcc:	db22      	blt.n	3014 <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2fce:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
    2fd2:	4630      	mov	r0, r6
    2fd4:	f7ff fa66 	bl	24a4 <ver_str>
    2fd8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    2fda:	9304      	str	r3, [sp, #16]
    2fdc:	f045 0503 	orr.w	r5, r5, #3
    2fe0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    2fe2:	9305      	str	r3, [sp, #20]
    2fe4:	e9cd 0602 	strd	r0, r6, [sp, #8]
    2fe8:	462b      	mov	r3, r5
    2fea:	a902      	add	r1, sp, #8
    2fec:	2204      	movs	r2, #4
    2fee:	4816      	ldr	r0, [pc, #88]	; (3048 <bt_finalize_init+0xe0>)
    2ff0:	f006 fbf0 	bl	97d4 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2ff4:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
    2ff8:	4630      	mov	r0, r6
    2ffa:	f7ff fa53 	bl	24a4 <ver_str>
    2ffe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    3000:	f8ad 5000 	strh.w	r5, [sp]
    3004:	4601      	mov	r1, r0
    3006:	4632      	mov	r2, r6
    3008:	4810      	ldr	r0, [pc, #64]	; (304c <bt_finalize_init+0xe4>)
    300a:	f006 fbc7 	bl	979c <log_3>
}
    300e:	b007      	add	sp, #28
    3010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    3014:	4640      	mov	r0, r8
    3016:	f7ff fa07 	bl	2428 <bt_addr_le_str_real>
    301a:	f7fd fe37 	bl	c8c <log_strdup>
    301e:	4631      	mov	r1, r6
    3020:	4602      	mov	r2, r0
    3022:	463b      	mov	r3, r7
    3024:	4648      	mov	r0, r9
    3026:	f006 fba0 	bl	976a <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    302a:	3601      	adds	r6, #1
    302c:	e7ca      	b.n	2fc4 <bt_finalize_init+0x5c>
    302e:	bf00      	nop
    3030:	20000000 	.word	0x20000000
    3034:	0000b750 	.word	0x0000b750
    3038:	0000b7c8 	.word	0x0000b7c8
    303c:	0000c549 	.word	0x0000c549
    3040:	0000bbed 	.word	0x0000bbed
    3044:	0000c54d 	.word	0x0000c54d
    3048:	0000c56d 	.word	0x0000c56d
    304c:	0000c5ab 	.word	0x0000c5ab
    3050:	0000c55c 	.word	0x0000c55c

00003054 <bt_id_create>:
{
    3054:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3056:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    3058:	4605      	mov	r5, r0
    305a:	b918      	cbnz	r0, 3064 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    305c:	b34c      	cbz	r4, 30b2 <bt_id_create+0x5e>
		return -EINVAL;
    305e:	f06f 0415 	mvn.w	r4, #21
    3062:	e023      	b.n	30ac <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    3064:	2300      	movs	r3, #0
    3066:	2207      	movs	r2, #7
    3068:	4669      	mov	r1, sp
    306a:	9300      	str	r3, [sp, #0]
    306c:	f8cd 3003 	str.w	r3, [sp, #3]
    3070:	f006 ff50 	bl	9f14 <memcmp>
    3074:	2800      	cmp	r0, #0
    3076:	d0f1      	beq.n	305c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    3078:	782b      	ldrb	r3, [r5, #0]
    307a:	2b01      	cmp	r3, #1
    307c:	d104      	bne.n	3088 <bt_id_create+0x34>
    307e:	79ab      	ldrb	r3, [r5, #6]
    3080:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3084:	2bc0      	cmp	r3, #192	; 0xc0
    3086:	d00a      	beq.n	309e <bt_id_create+0x4a>
    3088:	4b11      	ldr	r3, [pc, #68]	; (30d0 <bt_id_create+0x7c>)
    308a:	4912      	ldr	r1, [pc, #72]	; (30d4 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    308c:	4812      	ldr	r0, [pc, #72]	; (30d8 <bt_id_create+0x84>)
    308e:	1ac9      	subs	r1, r1, r3
    3090:	08c9      	lsrs	r1, r1, #3
    3092:	0189      	lsls	r1, r1, #6
    3094:	f041 0101 	orr.w	r1, r1, #1
    3098:	f006 fb46 	bl	9728 <log_0>
			return -EINVAL;
    309c:	e7df      	b.n	305e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    309e:	4628      	mov	r0, r5
    30a0:	f7ff fb06 	bl	26b0 <id_find>
    30a4:	2800      	cmp	r0, #0
    30a6:	dbd9      	blt.n	305c <bt_id_create+0x8>
			return -EALREADY;
    30a8:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    30ac:	4620      	mov	r0, r4
    30ae:	b003      	add	sp, #12
    30b0:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    30b2:	4b0a      	ldr	r3, [pc, #40]	; (30dc <bt_id_create+0x88>)
    30b4:	79dc      	ldrb	r4, [r3, #7]
    30b6:	2c01      	cmp	r4, #1
    30b8:	d006      	beq.n	30c8 <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    30ba:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    30bc:	4629      	mov	r1, r5
    30be:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    30c0:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    30c2:	f7ff fdb5 	bl	2c30 <id_create.isra.0>
	return new_id;
    30c6:	e7f1      	b.n	30ac <bt_id_create+0x58>
		return -ENOMEM;
    30c8:	f06f 040b 	mvn.w	r4, #11
    30cc:	e7ee      	b.n	30ac <bt_id_create+0x58>
    30ce:	bf00      	nop
    30d0:	0000b750 	.word	0x0000b750
    30d4:	0000b7c8 	.word	0x0000b7c8
    30d8:	0000c5d2 	.word	0x0000c5d2
    30dc:	20000000 	.word	0x20000000

000030e0 <bt_set_id_addr>:
{
    30e0:	b513      	push	{r0, r1, r4, lr}
    30e2:	4601      	mov	r1, r0
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    30e4:	480e      	ldr	r0, [pc, #56]	; (3120 <bt_set_id_addr+0x40>)
    30e6:	f006 ff78 	bl	9fda <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    30ea:	0783      	lsls	r3, r0, #30
    30ec:	f3c0 0440 	ubfx	r4, r0, #1, #1
    30f0:	d50d      	bpl.n	310e <bt_set_id_addr+0x2e>
    30f2:	4b0c      	ldr	r3, [pc, #48]	; (3124 <bt_set_id_addr+0x44>)
    30f4:	490c      	ldr	r1, [pc, #48]	; (3128 <bt_set_id_addr+0x48>)
		BT_ERR("Setting identity not allowed after bt_enable()");
    30f6:	480d      	ldr	r0, [pc, #52]	; (312c <bt_set_id_addr+0x4c>)
    30f8:	1ac9      	subs	r1, r1, r3
    30fa:	08c9      	lsrs	r1, r1, #3
    30fc:	0189      	lsls	r1, r1, #6
    30fe:	f041 0101 	orr.w	r1, r1, #1
    3102:	f006 fb11 	bl	9728 <log_0>
		return -EBUSY;
    3106:	f06f 000f 	mvn.w	r0, #15
}
    310a:	b002      	add	sp, #8
    310c:	bd10      	pop	{r4, pc}
	bt_addr_le_copy(&non_const_addr, addr);
    310e:	4668      	mov	r0, sp
    3110:	f006 ff69 	bl	9fe6 <bt_addr_le_copy>
	return bt_id_create(&non_const_addr, NULL);
    3114:	4621      	mov	r1, r4
    3116:	4668      	mov	r0, sp
    3118:	f7ff ff9c 	bl	3054 <bt_id_create>
    311c:	e7f5      	b.n	310a <bt_set_id_addr+0x2a>
    311e:	bf00      	nop
    3120:	20000098 	.word	0x20000098
    3124:	0000b750 	.word	0x0000b750
    3128:	0000b7c8 	.word	0x0000b7c8
    312c:	0000c600 	.word	0x0000c600

00003130 <bt_setup_public_id_addr>:
{
    3130:	b570      	push	{r4, r5, r6, lr}
    3132:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    3134:	aa01      	add	r2, sp, #4
    3136:	2100      	movs	r1, #0
    3138:	f241 0009 	movw	r0, #4105	; 0x1009
    313c:	f7ff fb72 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    3140:	4e1f      	ldr	r6, [pc, #124]	; (31c0 <bt_setup_public_id_addr+0x90>)
    3142:	4604      	mov	r4, r0
    3144:	b168      	cbz	r0, 3162 <bt_setup_public_id_addr+0x32>
    3146:	491f      	ldr	r1, [pc, #124]	; (31c4 <bt_setup_public_id_addr+0x94>)
    3148:	4b1f      	ldr	r3, [pc, #124]	; (31c8 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    314a:	4820      	ldr	r0, [pc, #128]	; (31cc <bt_setup_public_id_addr+0x9c>)
    314c:	1ac9      	subs	r1, r1, r3
    314e:	08c9      	lsrs	r1, r1, #3
    3150:	0189      	lsls	r1, r1, #6
    3152:	f041 0102 	orr.w	r1, r1, #2
    3156:	f006 fae7 	bl	9728 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    315a:	2300      	movs	r3, #0
    315c:	71f3      	strb	r3, [r6, #7]
}
    315e:	b006      	add	sp, #24
    3160:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    3162:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    3164:	689d      	ldr	r5, [r3, #8]
    3166:	9004      	str	r0, [sp, #16]
    3168:	3501      	adds	r5, #1
    316a:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    316e:	2206      	movs	r2, #6
    3170:	a904      	add	r1, sp, #16
    3172:	4628      	mov	r0, r5
    3174:	f006 fece 	bl	9f14 <memcmp>
    3178:	b918      	cbnz	r0, 3182 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    317a:	9801      	ldr	r0, [sp, #4]
    317c:	f003 ffc2 	bl	7104 <net_buf_unref>
    3180:	e7eb      	b.n	315a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    3182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3186:	2206      	movs	r2, #6
    3188:	a902      	add	r1, sp, #8
    318a:	4628      	mov	r0, r5
    318c:	9302      	str	r3, [sp, #8]
    318e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3192:	f006 febf 	bl	9f14 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    3196:	2800      	cmp	r0, #0
    3198:	d0ef      	beq.n	317a <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    319a:	4629      	mov	r1, r5
    319c:	2206      	movs	r2, #6
    319e:	f10d 0011 	add.w	r0, sp, #17
    31a2:	f006 fec7 	bl	9f34 <memcpy>
	net_buf_unref(rsp);
    31a6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    31a8:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    31ac:	f003 ffaa 	bl	7104 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    31b0:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    31b2:	a904      	add	r1, sp, #16
    31b4:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    31b6:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    31b8:	f7ff fd3a 	bl	2c30 <id_create.isra.0>
    31bc:	e7cf      	b.n	315e <bt_setup_public_id_addr+0x2e>
    31be:	bf00      	nop
    31c0:	20000000 	.word	0x20000000
    31c4:	0000b7c8 	.word	0x0000b7c8
    31c8:	0000b750 	.word	0x0000b750
    31cc:	0000c62f 	.word	0x0000c62f

000031d0 <bt_read_static_addr>:
{
    31d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    31d4:	4b25      	ldr	r3, [pc, #148]	; (326c <bt_read_static_addr+0x9c>)
    31d6:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    31da:	f014 0401 	ands.w	r4, r4, #1
{
    31de:	4607      	mov	r7, r0
    31e0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    31e2:	d10a      	bne.n	31fa <bt_read_static_addr+0x2a>
    31e4:	4922      	ldr	r1, [pc, #136]	; (3270 <bt_read_static_addr+0xa0>)
    31e6:	4b23      	ldr	r3, [pc, #140]	; (3274 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    31e8:	4823      	ldr	r0, [pc, #140]	; (3278 <bt_read_static_addr+0xa8>)
    31ea:	1ac9      	subs	r1, r1, r3
    31ec:	08c9      	lsrs	r1, r1, #3
    31ee:	0189      	lsls	r1, r1, #6
    31f0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    31f4:	f006 fa98 	bl	9728 <log_0>
    31f8:	e012      	b.n	3220 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    31fa:	aa01      	add	r2, sp, #4
    31fc:	2100      	movs	r1, #0
    31fe:	f64f 4009 	movw	r0, #64521	; 0xfc09
    3202:	f7ff fb0f 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    3206:	4605      	mov	r5, r0
    3208:	b170      	cbz	r0, 3228 <bt_read_static_addr+0x58>
    320a:	4b1a      	ldr	r3, [pc, #104]	; (3274 <bt_read_static_addr+0xa4>)
    320c:	4918      	ldr	r1, [pc, #96]	; (3270 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    320e:	481b      	ldr	r0, [pc, #108]	; (327c <bt_read_static_addr+0xac>)
    3210:	1ac9      	subs	r1, r1, r3
    3212:	08c9      	lsrs	r1, r1, #3
    3214:	0189      	lsls	r1, r1, #6
    3216:	f041 0102 	orr.w	r1, r1, #2
    321a:	f006 fa85 	bl	9728 <log_0>
		return 0;
    321e:	2400      	movs	r4, #0
}
    3220:	4620      	mov	r0, r4
    3222:	b002      	add	sp, #8
    3224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    322c:	785c      	ldrb	r4, [r3, #1]
    322e:	42b4      	cmp	r4, r6
    3230:	bf28      	it	cs
    3232:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    3234:	f04f 0816 	mov.w	r8, #22
    3238:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    323a:	42a5      	cmp	r5, r4
    323c:	db0d      	blt.n	325a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    323e:	9801      	ldr	r0, [sp, #4]
    3240:	f003 ff60 	bl	7104 <net_buf_unref>
	if (!cnt) {
    3244:	2c00      	cmp	r4, #0
    3246:	d1eb      	bne.n	3220 <bt_read_static_addr+0x50>
    3248:	4909      	ldr	r1, [pc, #36]	; (3270 <bt_read_static_addr+0xa0>)
    324a:	4b0a      	ldr	r3, [pc, #40]	; (3274 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    324c:	480c      	ldr	r0, [pc, #48]	; (3280 <bt_read_static_addr+0xb0>)
    324e:	1ac9      	subs	r1, r1, r3
    3250:	08c9      	lsrs	r1, r1, #3
    3252:	0189      	lsls	r1, r1, #6
    3254:	f041 0102 	orr.w	r1, r1, #2
    3258:	e7cc      	b.n	31f4 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    325a:	fb08 7005 	mla	r0, r8, r5, r7
    325e:	2216      	movs	r2, #22
    3260:	4631      	mov	r1, r6
    3262:	f006 fe67 	bl	9f34 <memcpy>
	for (i = 0; i < cnt; i++) {
    3266:	3501      	adds	r5, #1
    3268:	e7e7      	b.n	323a <bt_read_static_addr+0x6a>
    326a:	bf00      	nop
    326c:	20000000 	.word	0x20000000
    3270:	0000b7c8 	.word	0x0000b7c8
    3274:	0000b750 	.word	0x0000b750
    3278:	0000c64d 	.word	0x0000c64d
    327c:	0000c679 	.word	0x0000c679
    3280:	0000c699 	.word	0x0000c699

00003284 <bt_setup_random_id_addr>:
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    3286:	4d14      	ldr	r5, [pc, #80]	; (32d8 <bt_setup_random_id_addr+0x54>)
    3288:	79ec      	ldrb	r4, [r5, #7]
{
    328a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    328c:	b9f4      	cbnz	r4, 32cc <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    328e:	2101      	movs	r1, #1
    3290:	a802      	add	r0, sp, #8
    3292:	f7ff ff9d 	bl	31d0 <bt_read_static_addr>
    3296:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    3298:	b1c0      	cbz	r0, 32cc <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    329a:	2716      	movs	r7, #22
    329c:	e00f      	b.n	32be <bt_setup_random_id_addr+0x3a>
    329e:	ab02      	add	r3, sp, #8
    32a0:	fb07 3106 	mla	r1, r7, r6, r3
    32a4:	2206      	movs	r2, #6
    32a6:	f10d 0001 	add.w	r0, sp, #1
    32aa:	f006 fe43 	bl	9f34 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    32ae:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    32b0:	4669      	mov	r1, sp
    32b2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    32b4:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    32b8:	f7ff fcba 	bl	2c30 <id_create.isra.0>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    32bc:	3401      	adds	r4, #1
    32be:	79eb      	ldrb	r3, [r5, #7]
    32c0:	b2e6      	uxtb	r6, r4
    32c2:	42b3      	cmp	r3, r6
    32c4:	d8eb      	bhi.n	329e <bt_setup_random_id_addr+0x1a>
			return 0;
    32c6:	2000      	movs	r0, #0
}
    32c8:	b009      	add	sp, #36	; 0x24
    32ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    32cc:	2100      	movs	r1, #0
    32ce:	4608      	mov	r0, r1
    32d0:	f7ff fec0 	bl	3054 <bt_id_create>
    32d4:	e7f8      	b.n	32c8 <bt_setup_random_id_addr+0x44>
    32d6:	bf00      	nop
    32d8:	20000000 	.word	0x20000000

000032dc <hci_init>:
{
    32dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    32de:	4dbc      	ldr	r5, [pc, #752]	; (35d0 <hci_init+0x2f4>)
    32e0:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    32e4:	6899      	ldr	r1, [r3, #8]
    32e6:	f011 0101 	ands.w	r1, r1, #1
{
    32ea:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    32ec:	d11f      	bne.n	332e <hci_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    32ee:	aa01      	add	r2, sp, #4
    32f0:	f640 4003 	movw	r0, #3075	; 0xc03
    32f4:	f7ff fa96 	bl	2824 <bt_hci_cmd_send_sync>
		if (err) {
    32f8:	4604      	mov	r4, r0
    32fa:	2800      	cmp	r0, #0
    32fc:	d16e      	bne.n	33dc <hci_init+0x100>
		hci_reset_complete(rsp);
    32fe:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
    3300:	689b      	ldr	r3, [r3, #8]
	if (status) {
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	b983      	cbnz	r3, 3328 <hci_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    3306:	f105 0398 	add.w	r3, r5, #152	; 0x98
    330a:	4618      	mov	r0, r3
    330c:	f006 fe65 	bl	9fda <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3310:	f3bf 8f5b 	dmb	ish
    3314:	f000 0005 	and.w	r0, r0, #5
    3318:	e853 2f00 	ldrex	r2, [r3]
    331c:	e843 0100 	strex	r1, r0, [r3]
    3320:	2900      	cmp	r1, #0
    3322:	d1f9      	bne.n	3318 <hci_init+0x3c>
    3324:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    3328:	9801      	ldr	r0, [sp, #4]
    332a:	f003 feeb 	bl	7104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    332e:	aa01      	add	r2, sp, #4
    3330:	2100      	movs	r1, #0
    3332:	f241 0003 	movw	r0, #4099	; 0x1003
    3336:	f7ff fa75 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    333a:	4604      	mov	r4, r0
    333c:	2800      	cmp	r0, #0
    333e:	d14d      	bne.n	33dc <hci_init+0x100>
	read_local_features_complete(rsp);
    3340:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3342:	48a4      	ldr	r0, [pc, #656]	; (35d4 <hci_init+0x2f8>)
    3344:	6899      	ldr	r1, [r3, #8]
    3346:	2208      	movs	r2, #8
    3348:	3101      	adds	r1, #1
    334a:	f006 fdf3 	bl	9f34 <memcpy>
	net_buf_unref(rsp);
    334e:	9801      	ldr	r0, [sp, #4]
    3350:	f003 fed8 	bl	7104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    3354:	4621      	mov	r1, r4
    3356:	aa01      	add	r2, sp, #4
    3358:	f241 0001 	movw	r0, #4097	; 0x1001
    335c:	f7ff fa62 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    3360:	4604      	mov	r4, r0
    3362:	2800      	cmp	r0, #0
    3364:	d13a      	bne.n	33dc <hci_init+0x100>
	read_local_ver_complete(rsp);
    3366:	9801      	ldr	r0, [sp, #4]
    3368:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    336a:	785a      	ldrb	r2, [r3, #1]
    336c:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3370:	78d9      	ldrb	r1, [r3, #3]
    3372:	789a      	ldrb	r2, [r3, #2]
    3374:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3378:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
    337a:	791a      	ldrb	r2, [r3, #4]
    337c:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3380:	7a19      	ldrb	r1, [r3, #8]
    3382:	79da      	ldrb	r2, [r3, #7]
    3384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3388:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    338a:	795a      	ldrb	r2, [r3, #5]
    338c:	799b      	ldrb	r3, [r3, #6]
    338e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    3392:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
    3394:	f003 feb6 	bl	7104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    3398:	4621      	mov	r1, r4
    339a:	aa01      	add	r2, sp, #4
    339c:	f241 0002 	movw	r0, #4098	; 0x1002
    33a0:	f7ff fa40 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    33a4:	4604      	mov	r4, r0
    33a6:	b9c8      	cbnz	r0, 33dc <hci_init+0x100>
	read_supported_commands_complete(rsp);
    33a8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    33aa:	488b      	ldr	r0, [pc, #556]	; (35d8 <hci_init+0x2fc>)
    33ac:	6899      	ldr	r1, [r3, #8]
    33ae:	2240      	movs	r2, #64	; 0x40
    33b0:	3101      	adds	r1, #1
    33b2:	f006 fdbf 	bl	9f34 <memcpy>
	net_buf_unref(rsp);
    33b6:	9801      	ldr	r0, [sp, #4]
    33b8:	f003 fea4 	bl	7104 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    33bc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    33c0:	0658      	lsls	r0, r3, #25
    33c2:	d40e      	bmi.n	33e2 <hci_init+0x106>
    33c4:	4b85      	ldr	r3, [pc, #532]	; (35dc <hci_init+0x300>)
    33c6:	4986      	ldr	r1, [pc, #536]	; (35e0 <hci_init+0x304>)
		BT_ERR("Non-LE capable controller detected!");
    33c8:	4886      	ldr	r0, [pc, #536]	; (35e4 <hci_init+0x308>)
    33ca:	1ac9      	subs	r1, r1, r3
    33cc:	08c9      	lsrs	r1, r1, #3
    33ce:	0189      	lsls	r1, r1, #6
    33d0:	f041 0101 	orr.w	r1, r1, #1
    33d4:	f006 f9a8 	bl	9728 <log_0>
		return -ENODEV;
    33d8:	f06f 0412 	mvn.w	r4, #18
}
    33dc:	4620      	mov	r0, r4
    33de:	b007      	add	sp, #28
    33e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    33e2:	4621      	mov	r1, r4
    33e4:	aa01      	add	r2, sp, #4
    33e6:	f242 0003 	movw	r0, #8195	; 0x2003
    33ea:	f7ff fa1b 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    33ee:	4604      	mov	r4, r0
    33f0:	2800      	cmp	r0, #0
    33f2:	d1f3      	bne.n	33dc <hci_init+0x100>
	read_le_features_complete(rsp);
    33f4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    33f6:	487c      	ldr	r0, [pc, #496]	; (35e8 <hci_init+0x30c>)
    33f8:	6899      	ldr	r1, [r3, #8]
    33fa:	2208      	movs	r2, #8
    33fc:	3101      	adds	r1, #1
    33fe:	f006 fd99 	bl	9f34 <memcpy>
	net_buf_unref(rsp);
    3402:	9801      	ldr	r0, [sp, #4]
    3404:	f003 fe7e 	bl	7104 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3408:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    340c:	0699      	lsls	r1, r3, #26
    340e:	d566      	bpl.n	34de <hci_init+0x202>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    3410:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3414:	071a      	lsls	r2, r3, #28
    3416:	d47e      	bmi.n	3516 <hci_init+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    3418:	2108      	movs	r1, #8
    341a:	f242 0001 	movw	r0, #8193	; 0x2001
    341e:	f7ff f9c9 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    3422:	4604      	mov	r4, r0
    3424:	2800      	cmp	r0, #0
    3426:	d061      	beq.n	34ec <hci_init+0x210>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    3428:	2108      	movs	r1, #8
    342a:	4408      	add	r0, r1
    342c:	f007 fabd 	bl	a9aa <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3430:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    3432:	2200      	movs	r2, #0
	dst[0] = val;
    3434:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    3436:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    3438:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    343a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    343c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    343e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    3440:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    3442:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    3444:	4621      	mov	r1, r4
    3446:	f242 0001 	movw	r0, #8193	; 0x2001
    344a:	f7ff f9eb 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    344e:	4604      	mov	r4, r0
    3450:	2800      	cmp	r0, #0
    3452:	d1c3      	bne.n	33dc <hci_init+0x100>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    3454:	2108      	movs	r1, #8
    3456:	f640 4001 	movw	r0, #3073	; 0xc01
    345a:	f7ff f9ab 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    345e:	4606      	mov	r6, r0
    3460:	2800      	cmp	r0, #0
    3462:	d043      	beq.n	34ec <hci_init+0x210>
	ev = net_buf_add(buf, sizeof(*ev));
    3464:	2108      	movs	r1, #8
    3466:	4408      	add	r0, r1
    3468:	f007 fa9f 	bl	a9aa <net_buf_simple_add>
    346c:	2380      	movs	r3, #128	; 0x80
    346e:	7043      	strb	r3, [r0, #1]
    3470:	2320      	movs	r3, #32
	dst[0] = val;
    3472:	7004      	strb	r4, [r0, #0]
    3474:	7084      	strb	r4, [r0, #2]
    3476:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    3478:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    347a:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    347c:	70c7      	strb	r7, [r0, #3]
    347e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    3480:	4622      	mov	r2, r4
    3482:	4631      	mov	r1, r6
    3484:	f640 4001 	movw	r0, #3073	; 0xc01
    3488:	f7ff f9cc 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    348c:	4604      	mov	r4, r0
    348e:	2800      	cmp	r0, #0
    3490:	d1a4      	bne.n	33dc <hci_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    3492:	4601      	mov	r1, r0
    3494:	466a      	mov	r2, sp
    3496:	f64f 4001 	movw	r0, #64513	; 0xfc01
    349a:	f7ff f9c3 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    349e:	4e50      	ldr	r6, [pc, #320]	; (35e0 <hci_init+0x304>)
    34a0:	4b4e      	ldr	r3, [pc, #312]	; (35dc <hci_init+0x300>)
    34a2:	1af6      	subs	r6, r6, r3
    34a4:	08f6      	lsrs	r6, r6, #3
    34a6:	01b6      	lsls	r6, r6, #6
    34a8:	2800      	cmp	r0, #0
    34aa:	d048      	beq.n	353e <hci_init+0x262>
		BT_WARN("Vendor HCI extensions not available");
    34ac:	484f      	ldr	r0, [pc, #316]	; (35ec <hci_init+0x310>)
    34ae:	ea46 0107 	orr.w	r1, r6, r7
			BT_WARN("Failed to read supported vendor features");
    34b2:	f006 f939 	bl	9728 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    34b6:	79eb      	ldrb	r3, [r5, #7]
    34b8:	2b00      	cmp	r3, #0
    34ba:	d18f      	bne.n	33dc <hci_init+0x100>
		bt_setup_public_id_addr();
    34bc:	f7ff fe38 	bl	3130 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    34c0:	79eb      	ldrb	r3, [r5, #7]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d18a      	bne.n	33dc <hci_init+0x100>
		err = bt_setup_random_id_addr();
    34c6:	f7ff fedd 	bl	3284 <bt_setup_random_id_addr>
		if (err) {
    34ca:	4604      	mov	r4, r0
    34cc:	2800      	cmp	r0, #0
    34ce:	f000 80c6 	beq.w	365e <hci_init+0x382>
			BT_ERR("Unable to set identity address");
    34d2:	4847      	ldr	r0, [pc, #284]	; (35f0 <hci_init+0x314>)
    34d4:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
    34d8:	f006 f926 	bl	9728 <log_0>
			return err;
    34dc:	e77e      	b.n	33dc <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    34de:	2102      	movs	r1, #2
    34e0:	f640 406d 	movw	r0, #3181	; 0xc6d
    34e4:	f7ff f966 	bl	27b4 <bt_hci_cmd_create>
		if (!buf) {
    34e8:	4606      	mov	r6, r0
    34ea:	b910      	cbnz	r0, 34f2 <hci_init+0x216>
		return -ENOBUFS;
    34ec:	f06f 0436 	mvn.w	r4, #54	; 0x36
    34f0:	e774      	b.n	33dc <hci_init+0x100>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    34f2:	2102      	movs	r1, #2
    34f4:	3008      	adds	r0, #8
    34f6:	f007 fa58 	bl	a9aa <net_buf_simple_add>
		cp_le->le = 0x01;
    34fa:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    34fc:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    34fe:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    3500:	4622      	mov	r2, r4
    3502:	4631      	mov	r1, r6
    3504:	f640 406d 	movw	r0, #3181	; 0xc6d
    3508:	f7ff f98c 	bl	2824 <bt_hci_cmd_send_sync>
		if (err) {
    350c:	4604      	mov	r4, r0
    350e:	2800      	cmp	r0, #0
    3510:	f43f af7e 	beq.w	3410 <hci_init+0x134>
    3514:	e762      	b.n	33dc <hci_init+0x100>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    3516:	aa01      	add	r2, sp, #4
    3518:	2100      	movs	r1, #0
    351a:	f242 001c 	movw	r0, #8220	; 0x201c
    351e:	f7ff f981 	bl	2824 <bt_hci_cmd_send_sync>
		if (err) {
    3522:	4604      	mov	r4, r0
    3524:	2800      	cmp	r0, #0
    3526:	f47f af59 	bne.w	33dc <hci_init+0x100>
		le_read_supp_states_complete(rsp);
    352a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    352c:	6883      	ldr	r3, [r0, #8]
    352e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    3532:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    3534:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    3538:	f003 fde4 	bl	7104 <net_buf_unref>
    353c:	e76c      	b.n	3418 <hci_init+0x13c>
	rp.info = (void *)rsp->data;
    353e:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    3540:	482c      	ldr	r0, [pc, #176]	; (35f4 <hci_init+0x318>)
	rp.info = (void *)rsp->data;
    3542:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    3544:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    3548:	2a03      	cmp	r2, #3
		return plat_str[platform];
    354a:	bf96      	itet	ls
    354c:	492a      	ldrls	r1, [pc, #168]	; (35f8 <hci_init+0x31c>)
	return "unknown";
    354e:	492b      	ldrhi	r1, [pc, #172]	; (35fc <hci_init+0x320>)
		return plat_str[platform];
    3550:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    3554:	f046 0303 	orr.w	r3, r6, #3
    3558:	f006 f907 	bl	976a <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    355c:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    3560:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    3564:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    3566:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    356a:	d12e      	bne.n	35ca <hci_init+0x2ee>
	if (variant < ARRAY_SIZE(nordic_str)) {
    356c:	2a03      	cmp	r2, #3
    356e:	d82c      	bhi.n	35ca <hci_init+0x2ee>
		return nordic_str[variant];
    3570:	4923      	ldr	r1, [pc, #140]	; (3600 <hci_init+0x324>)
    3572:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    3576:	4823      	ldr	r0, [pc, #140]	; (3604 <hci_init+0x328>)
    3578:	f006 f8f7 	bl	976a <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    357c:	797a      	ldrb	r2, [r7, #5]
    357e:	4822      	ldr	r0, [pc, #136]	; (3608 <hci_init+0x32c>)
	if (variant < ARRAY_SIZE(var_str)) {
    3580:	2a03      	cmp	r2, #3
		return var_str[variant];
    3582:	bf96      	itet	ls
    3584:	4921      	ldrls	r1, [pc, #132]	; (360c <hci_init+0x330>)
	return "unknown";
    3586:	491d      	ldrhi	r1, [pc, #116]	; (35fc <hci_init+0x320>)
		return var_str[variant];
    3588:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    358c:	e9cd 1201 	strd	r1, r2, [sp, #4]
    3590:	79ba      	ldrb	r2, [r7, #6]
    3592:	9203      	str	r2, [sp, #12]
    3594:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    3598:	9204      	str	r2, [sp, #16]
    359a:	f8d7 2009 	ldr.w	r2, [r7, #9]
    359e:	9205      	str	r2, [sp, #20]
    35a0:	f046 0303 	orr.w	r3, r6, #3
    35a4:	2205      	movs	r2, #5
    35a6:	a901      	add	r1, sp, #4
    35a8:	f006 f914 	bl	97d4 <log_n>
	net_buf_unref(rsp);
    35ac:	9800      	ldr	r0, [sp, #0]
    35ae:	f003 fda9 	bl	7104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    35b2:	466a      	mov	r2, sp
    35b4:	2100      	movs	r1, #0
    35b6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    35ba:	f7ff f933 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    35be:	4607      	mov	r7, r0
    35c0:	b340      	cbz	r0, 3614 <hci_init+0x338>
		BT_WARN("Failed to read supported vendor commands");
    35c2:	4813      	ldr	r0, [pc, #76]	; (3610 <hci_init+0x334>)
    35c4:	f046 0102 	orr.w	r1, r6, #2
    35c8:	e773      	b.n	34b2 <hci_init+0x1d6>
		return "unknown";
    35ca:	490c      	ldr	r1, [pc, #48]	; (35fc <hci_init+0x320>)
    35cc:	e7d3      	b.n	3576 <hci_init+0x29a>
    35ce:	bf00      	nop
    35d0:	20000000 	.word	0x20000000
    35d4:	20000040 	.word	0x20000040
    35d8:	20000048 	.word	0x20000048
    35dc:	0000b750 	.word	0x0000b750
    35e0:	0000b7c8 	.word	0x0000b7c8
    35e4:	0000c6c2 	.word	0x0000c6c2
    35e8:	200000a0 	.word	0x200000a0
    35ec:	0000c6e6 	.word	0x0000c6e6
    35f0:	0000c7ba 	.word	0x0000c7ba
    35f4:	0000c70a 	.word	0x0000c70a
    35f8:	0000b9ac 	.word	0x0000b9ac
    35fc:	0000c2bd 	.word	0x0000c2bd
    3600:	0000b98c 	.word	0x0000b98c
    3604:	0000c723 	.word	0x0000c723
    3608:	0000c73b 	.word	0x0000c73b
    360c:	0000b9cc 	.word	0x0000b9cc
    3610:	0000c768 	.word	0x0000c768
	rp.cmds = (void *)rsp->data;
    3614:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    3616:	4817      	ldr	r0, [pc, #92]	; (3674 <hci_init+0x398>)
    3618:	6899      	ldr	r1, [r3, #8]
    361a:	2202      	movs	r2, #2
    361c:	3101      	adds	r1, #1
    361e:	f006 fc89 	bl	9f34 <memcpy>
	net_buf_unref(rsp);
    3622:	9800      	ldr	r0, [sp, #0]
    3624:	f003 fd6e 	bl	7104 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    3628:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
    362c:	075b      	lsls	r3, r3, #29
    362e:	f57f af42 	bpl.w	34b6 <hci_init+0x1da>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    3632:	466a      	mov	r2, sp
    3634:	4639      	mov	r1, r7
    3636:	f64f 4003 	movw	r0, #64515	; 0xfc03
    363a:	f7ff f8f3 	bl	2824 <bt_hci_cmd_send_sync>
		if (err) {
    363e:	b118      	cbz	r0, 3648 <hci_init+0x36c>
			BT_WARN("Failed to read supported vendor features");
    3640:	480d      	ldr	r0, [pc, #52]	; (3678 <hci_init+0x39c>)
    3642:	f046 0102 	orr.w	r1, r6, #2
    3646:	e734      	b.n	34b2 <hci_init+0x1d6>
		rp.feat = (void *)rsp->data;
    3648:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    364a:	480c      	ldr	r0, [pc, #48]	; (367c <hci_init+0x3a0>)
    364c:	6899      	ldr	r1, [r3, #8]
    364e:	2201      	movs	r2, #1
    3650:	4411      	add	r1, r2
    3652:	f006 fc6f 	bl	9f34 <memcpy>
		net_buf_unref(rsp);
    3656:	9800      	ldr	r0, [sp, #0]
    3658:	f003 fd54 	bl	7104 <net_buf_unref>
    365c:	e72b      	b.n	34b6 <hci_init+0x1da>
		err = set_random_address(&bt_dev.id_addr[0].a);
    365e:	4808      	ldr	r0, [pc, #32]	; (3680 <hci_init+0x3a4>)
    3660:	f7ff f958 	bl	2914 <set_random_address>
		if (err) {
    3664:	4604      	mov	r4, r0
    3666:	2800      	cmp	r0, #0
    3668:	f43f aeb8 	beq.w	33dc <hci_init+0x100>
			BT_ERR("Unable to set random address");
    366c:	4805      	ldr	r0, [pc, #20]	; (3684 <hci_init+0x3a8>)
    366e:	f046 0101 	orr.w	r1, r6, #1
    3672:	e731      	b.n	34d8 <hci_init+0x1fc>
    3674:	20000089 	.word	0x20000089
    3678:	0000c791 	.word	0x0000c791
    367c:	20000088 	.word	0x20000088
    3680:	20000001 	.word	0x20000001
    3684:	0000c7d9 	.word	0x0000c7d9

00003688 <bt_enable>:
{
    3688:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    368a:	4d39      	ldr	r5, [pc, #228]	; (3770 <bt_enable+0xe8>)
    368c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
{
    3690:	b088      	sub	sp, #32
    3692:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3694:	b973      	cbnz	r3, 36b4 <bt_enable+0x2c>
    3696:	4b37      	ldr	r3, [pc, #220]	; (3774 <bt_enable+0xec>)
    3698:	4937      	ldr	r1, [pc, #220]	; (3778 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
    369a:	4838      	ldr	r0, [pc, #224]	; (377c <bt_enable+0xf4>)
    369c:	1ac9      	subs	r1, r1, r3
    369e:	08c9      	lsrs	r1, r1, #3
    36a0:	0189      	lsls	r1, r1, #6
    36a2:	f041 0101 	orr.w	r1, r1, #1
    36a6:	f006 f83f 	bl	9728 <log_0>
		return -ENODEV;
    36aa:	f06f 0412 	mvn.w	r4, #18
}
    36ae:	4620      	mov	r0, r4
    36b0:	b008      	add	sp, #32
    36b2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36b4:	f105 0298 	add.w	r2, r5, #152	; 0x98
    36b8:	f3bf 8f5b 	dmb	ish
    36bc:	e852 3f00 	ldrex	r3, [r2]
    36c0:	f043 0101 	orr.w	r1, r3, #1
    36c4:	e842 1000 	strex	r0, r1, [r2]
    36c8:	2800      	cmp	r0, #0
    36ca:	d1f7      	bne.n	36bc <bt_enable+0x34>
    36cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    36d0:	f013 0301 	ands.w	r3, r3, #1
    36d4:	d148      	bne.n	3768 <bt_enable+0xe0>
	ready_cb = cb;
    36d6:	4a2a      	ldr	r2, [pc, #168]	; (3780 <bt_enable+0xf8>)
    36d8:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    36da:	2000      	movs	r0, #0
    36dc:	2100      	movs	r1, #0
    36de:	f06f 0208 	mvn.w	r2, #8
    36e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    36e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    36ea:	e9cd 3300 	strd	r3, r3, [sp]
    36ee:	9304      	str	r3, [sp, #16]
    36f0:	4924      	ldr	r1, [pc, #144]	; (3784 <bt_enable+0xfc>)
    36f2:	4b25      	ldr	r3, [pc, #148]	; (3788 <bt_enable+0x100>)
    36f4:	4825      	ldr	r0, [pc, #148]	; (378c <bt_enable+0x104>)
    36f6:	f44f 7220 	mov.w	r2, #640	; 0x280
    36fa:	f005 fa55 	bl	8ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    36fe:	4924      	ldr	r1, [pc, #144]	; (3790 <bt_enable+0x108>)
    3700:	4822      	ldr	r0, [pc, #136]	; (378c <bt_enable+0x104>)
    3702:	f007 fd5b 	bl	b1bc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    3706:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    370a:	68db      	ldr	r3, [r3, #12]
    370c:	4798      	blx	r3
	if (err) {
    370e:	4604      	mov	r4, r0
    3710:	b158      	cbz	r0, 372a <bt_enable+0xa2>
    3712:	4b18      	ldr	r3, [pc, #96]	; (3774 <bt_enable+0xec>)
    3714:	4a18      	ldr	r2, [pc, #96]	; (3778 <bt_enable+0xf0>)
    3716:	1ad2      	subs	r2, r2, r3
    3718:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    371a:	0192      	lsls	r2, r2, #6
    371c:	4601      	mov	r1, r0
    371e:	f042 0201 	orr.w	r2, r2, #1
    3722:	481c      	ldr	r0, [pc, #112]	; (3794 <bt_enable+0x10c>)
    3724:	f006 f80d 	bl	9742 <log_1>
		return err;
    3728:	e7c1      	b.n	36ae <bt_enable+0x26>
	if (!cb) {
    372a:	b93e      	cbnz	r6, 373c <bt_enable+0xb4>
	err = hci_init();
    372c:	f7ff fdd6 	bl	32dc <hci_init>
	if (err) {
    3730:	4604      	mov	r4, r0
    3732:	2800      	cmp	r0, #0
    3734:	d1bb      	bne.n	36ae <bt_enable+0x26>
	bt_finalize_init();
    3736:	f7ff fc17 	bl	2f68 <bt_finalize_init>
	return 0;
    373a:	e7b8      	b.n	36ae <bt_enable+0x26>
    373c:	f105 0394 	add.w	r3, r5, #148	; 0x94
    3740:	f3bf 8f5b 	dmb	ish
    3744:	e853 2f00 	ldrex	r2, [r3]
    3748:	f042 0101 	orr.w	r1, r2, #1
    374c:	e843 1000 	strex	r0, r1, [r3]
    3750:	2800      	cmp	r0, #0
    3752:	d1f7      	bne.n	3744 <bt_enable+0xbc>
    3754:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3758:	07d3      	lsls	r3, r2, #31
    375a:	d4a8      	bmi.n	36ae <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    375c:	480e      	ldr	r0, [pc, #56]	; (3798 <bt_enable+0x110>)
    375e:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    3762:	f007 fba0 	bl	aea6 <k_queue_append>
    3766:	e7a2      	b.n	36ae <bt_enable+0x26>
		return -EALREADY;
    3768:	f06f 0444 	mvn.w	r4, #68	; 0x44
    376c:	e79f      	b.n	36ae <bt_enable+0x26>
    376e:	bf00      	nop
    3770:	20000000 	.word	0x20000000
    3774:	0000b750 	.word	0x0000b750
    3778:	0000b7c8 	.word	0x0000b7c8
    377c:	0000c7f6 	.word	0x0000c7f6
    3780:	200006ac 	.word	0x200006ac
    3784:	20001c20 	.word	0x20001c20
    3788:	00002c99 	.word	0x00002c99
    378c:	200006b0 	.word	0x200006b0
    3790:	0000c80f 	.word	0x0000c80f
    3794:	0000c815 	.word	0x0000c815
    3798:	2000137c 	.word	0x2000137c

0000379c <init_work>:
{
    379c:	b510      	push	{r4, lr}
	err = hci_init();
    379e:	f7ff fd9d 	bl	32dc <hci_init>
	if (err) {
    37a2:	4604      	mov	r4, r0
    37a4:	b908      	cbnz	r0, 37aa <init_work+0xe>
	bt_finalize_init();
    37a6:	f7ff fbdf 	bl	2f68 <bt_finalize_init>
	if (ready_cb) {
    37aa:	4b04      	ldr	r3, [pc, #16]	; (37bc <init_work+0x20>)
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	b11b      	cbz	r3, 37b8 <init_work+0x1c>
		ready_cb(err);
    37b0:	4620      	mov	r0, r4
}
    37b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    37b6:	4718      	bx	r3
}
    37b8:	bd10      	pop	{r4, pc}
    37ba:	bf00      	nop
    37bc:	200006ac 	.word	0x200006ac

000037c0 <bt_le_adv_start_legacy>:
}

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    37c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    37c4:	4c6c      	ldr	r4, [pc, #432]	; (3978 <bt_le_adv_start_legacy+0x1b8>)
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    37c6:	6907      	ldr	r7, [r0, #16]
{
    37c8:	b088      	sub	sp, #32
    37ca:	4605      	mov	r5, r0
    37cc:	f104 0098 	add.w	r0, r4, #152	; 0x98
    37d0:	4689      	mov	r9, r1
    37d2:	4692      	mov	sl, r2
    37d4:	4698      	mov	r8, r3
    37d6:	f006 fc00 	bl	9fda <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    37da:	0781      	lsls	r1, r0, #30
    37dc:	f140 80bf 	bpl.w	395e <bt_le_adv_start_legacy+0x19e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    37e0:	4628      	mov	r0, r5
    37e2:	f7fe ffad 	bl	2740 <valid_adv_param>
    37e6:	4606      	mov	r6, r0
    37e8:	2800      	cmp	r0, #0
    37ea:	f000 80bb 	beq.w	3964 <bt_le_adv_start_legacy+0x1a4>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    37ee:	220f      	movs	r2, #15
    37f0:	2100      	movs	r1, #0
    37f2:	a804      	add	r0, sp, #16
    37f4:	f006 fbc9 	bl	9f8a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    37f8:	68ab      	ldr	r3, [r5, #8]
    37fa:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    37fe:	68eb      	ldr	r3, [r5, #12]
    3800:	f8ad 3012 	strh.w	r3, [sp, #18]
	set_param.channel_map  = 0x07;
    3804:	2307      	movs	r3, #7
    3806:	f88d 301d 	strb.w	r3, [sp, #29]
    380a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	set_param.filter_policy = get_filter_policy(param->options);
    380e:	2300      	movs	r3, #0
    3810:	f88d 301e 	strb.w	r3, [sp, #30]
    3814:	f006 fbe1 	bl	9fda <atomic_get>

	adv = adv_new_legacy();
	if (!adv || atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    3818:	0642      	lsls	r2, r0, #25
    381a:	f100 80a6 	bmi.w	396a <bt_le_adv_start_legacy+0x1aa>
		return -EALREADY;
	}

	if (adv->id != param->id) {
    381e:	7e22      	ldrb	r2, [r4, #24]
    3820:	782b      	ldrb	r3, [r5, #0]
    3822:	429a      	cmp	r2, r3
    3824:	d005      	beq.n	3832 <bt_le_adv_start_legacy+0x72>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3826:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    382a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    382e:	f006 fbdd 	bl	9fec <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    3832:	7828      	ldrb	r0, [r5, #0]
    3834:	7620      	strb	r0, [r4, #24]
	bt_dev.adv_conn_id = adv->id;
    3836:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    383a:	6869      	ldr	r1, [r5, #4]
    383c:	f10d 0215 	add.w	r2, sp, #21
    3840:	f7ff f896 	bl	2970 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    3844:	4604      	mov	r4, r0
    3846:	2800      	cmp	r0, #0
    3848:	d15e      	bne.n	3908 <bt_le_adv_start_legacy+0x148>
		return err;
	}

	if (dir_adv) {
    384a:	2f00      	cmp	r7, #0
    384c:	d03a      	beq.n	38c4 <bt_le_adv_start_legacy+0x104>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    384e:	6929      	ldr	r1, [r5, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    3850:	484a      	ldr	r0, [pc, #296]	; (397c <bt_le_adv_start_legacy+0x1bc>)
    3852:	f006 fbc8 	bl	9fe6 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3856:	6868      	ldr	r0, [r5, #4]
    3858:	07c3      	lsls	r3, r0, #31
    385a:	d53b      	bpl.n	38d4 <bt_le_adv_start_legacy+0x114>
		scannable = true;

		if (dir_adv) {
    385c:	2f00      	cmp	r7, #0
    385e:	d036      	beq.n	38ce <bt_le_adv_start_legacy+0x10e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    3860:	f010 0f10 	tst.w	r0, #16
    3864:	bf14      	ite	ne
    3866:	2304      	movne	r3, #4
    3868:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    386a:	6929      	ldr	r1, [r5, #16]
    386c:	f88d 3014 	strb.w	r3, [sp, #20]
    3870:	f10d 0016 	add.w	r0, sp, #22
    3874:	f006 fbb7 	bl	9fe6 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3878:	210f      	movs	r1, #15
    387a:	f242 0006 	movw	r0, #8198	; 0x2006
    387e:	f7fe ff99 	bl	27b4 <bt_hci_cmd_create>
	if (!buf) {
    3882:	4604      	mov	r4, r0
    3884:	2800      	cmp	r0, #0
    3886:	d073      	beq.n	3970 <bt_le_adv_start_legacy+0x1b0>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3888:	220f      	movs	r2, #15
    388a:	a904      	add	r1, sp, #16
    388c:	3008      	adds	r0, #8
    388e:	f007 f892 	bl	a9b6 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    3892:	4621      	mov	r1, r4
    3894:	2200      	movs	r2, #0
    3896:	f242 0006 	movw	r0, #8198	; 0x2006
    389a:	f7fe ffc3 	bl	2824 <bt_hci_cmd_send_sync>
	if (err) {
    389e:	4604      	mov	r4, r0
    38a0:	bb90      	cbnz	r0, 3908 <bt_le_adv_start_legacy+0x148>
		return err;
	}

	if (!dir_adv) {
    38a2:	b31f      	cbz	r7, 38ec <bt_le_adv_start_legacy+0x12c>
	return set_le_adv_enable_legacy(adv, enable);
    38a4:	2001      	movs	r0, #1
    38a6:	f7ff f993 	bl	2bd0 <set_le_adv_enable_legacy.constprop.0>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    38aa:	4604      	mov	r4, r0
    38ac:	b380      	cbz	r0, 3910 <bt_le_adv_start_legacy+0x150>
    38ae:	4b34      	ldr	r3, [pc, #208]	; (3980 <bt_le_adv_start_legacy+0x1c0>)
    38b0:	4934      	ldr	r1, [pc, #208]	; (3984 <bt_le_adv_start_legacy+0x1c4>)
		BT_ERR("Failed to start advertiser");
    38b2:	4835      	ldr	r0, [pc, #212]	; (3988 <bt_le_adv_start_legacy+0x1c8>)
    38b4:	1ac9      	subs	r1, r1, r3
    38b6:	08c9      	lsrs	r1, r1, #3
    38b8:	0189      	lsls	r1, r1, #6
    38ba:	f041 0101 	orr.w	r1, r1, #1
    38be:	f005 ff33 	bl	9728 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			bt_conn_unref(conn);
		}

		return err;
    38c2:	e021      	b.n	3908 <bt_le_adv_start_legacy+0x148>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    38c4:	9702      	str	r7, [sp, #8]
    38c6:	a902      	add	r1, sp, #8
    38c8:	f8cd 700b 	str.w	r7, [sp, #11]
    38cc:	e7c0      	b.n	3850 <bt_le_adv_start_legacy+0x90>
			set_param.type = BT_HCI_ADV_IND;
    38ce:	f88d 7014 	strb.w	r7, [sp, #20]
    38d2:	e7d1      	b.n	3878 <bt_le_adv_start_legacy+0xb8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    38d4:	f1b8 0f00 	cmp.w	r8, #0
    38d8:	d106      	bne.n	38e8 <bt_le_adv_start_legacy+0x128>
    38da:	f3c0 06c0 	ubfx	r6, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    38de:	f1c6 0303 	rsb	r3, r6, #3
    38e2:	f88d 3014 	strb.w	r3, [sp, #20]
    38e6:	e7c7      	b.n	3878 <bt_le_adv_start_legacy+0xb8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    38e8:	2601      	movs	r6, #1
    38ea:	e7f8      	b.n	38de <bt_le_adv_start_legacy+0x11e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, scannable,
    38ec:	686b      	ldr	r3, [r5, #4]
    38ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    38f2:	e9cd 6300 	strd	r6, r3, [sp]
    38f6:	4642      	mov	r2, r8
    38f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38fa:	4651      	mov	r1, sl
    38fc:	4648      	mov	r0, r9
    38fe:	f7ff f8e9 	bl	2ad4 <le_adv_update.constprop.0>
		if (err) {
    3902:	4604      	mov	r4, r0
    3904:	2800      	cmp	r0, #0
    3906:	d0cd      	beq.n	38a4 <bt_le_adv_start_legacy+0xe4>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    3908:	4620      	mov	r0, r4
    390a:	b008      	add	sp, #32
    390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    3910:	bb1f      	cbnz	r7, 395a <bt_le_adv_start_legacy+0x19a>
    3912:	686a      	ldr	r2, [r5, #4]
    3914:	f082 0202 	eor.w	r2, r2, #2
    3918:	f3c2 0240 	ubfx	r2, r2, #1, #1
    391c:	481b      	ldr	r0, [pc, #108]	; (398c <bt_le_adv_start_legacy+0x1cc>)
    391e:	210b      	movs	r1, #11
    3920:	f006 fb73 	bl	a00a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    3924:	686a      	ldr	r2, [r5, #4]
    3926:	4819      	ldr	r0, [pc, #100]	; (398c <bt_le_adv_start_legacy+0x1cc>)
    3928:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    392c:	2107      	movs	r1, #7
    392e:	f006 fb6c 	bl	a00a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    3932:	686a      	ldr	r2, [r5, #4]
    3934:	4815      	ldr	r0, [pc, #84]	; (398c <bt_le_adv_start_legacy+0x1cc>)
    3936:	f002 0201 	and.w	r2, r2, #1
    393a:	2108      	movs	r1, #8
    393c:	f006 fb65 	bl	a00a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    3940:	4632      	mov	r2, r6
    3942:	4812      	ldr	r0, [pc, #72]	; (398c <bt_le_adv_start_legacy+0x1cc>)
    3944:	2109      	movs	r1, #9
    3946:	f006 fb60 	bl	a00a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    394a:	686a      	ldr	r2, [r5, #4]
    394c:	480f      	ldr	r0, [pc, #60]	; (398c <bt_le_adv_start_legacy+0x1cc>)
    394e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    3952:	210a      	movs	r1, #10
    3954:	f006 fb59 	bl	a00a <atomic_set_bit_to>
	return 0;
    3958:	e7d6      	b.n	3908 <bt_le_adv_start_legacy+0x148>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    395a:	4602      	mov	r2, r0
    395c:	e7de      	b.n	391c <bt_le_adv_start_legacy+0x15c>
		return -EAGAIN;
    395e:	f06f 040a 	mvn.w	r4, #10
    3962:	e7d1      	b.n	3908 <bt_le_adv_start_legacy+0x148>
		return -EINVAL;
    3964:	f06f 0415 	mvn.w	r4, #21
    3968:	e7ce      	b.n	3908 <bt_le_adv_start_legacy+0x148>
		return -EALREADY;
    396a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    396e:	e7cb      	b.n	3908 <bt_le_adv_start_legacy+0x148>
		return -ENOBUFS;
    3970:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3974:	e7c8      	b.n	3908 <bt_le_adv_start_legacy+0x148>
    3976:	bf00      	nop
    3978:	20000000 	.word	0x20000000
    397c:	20000023 	.word	0x20000023
    3980:	0000b750 	.word	0x0000b750
    3984:	0000b7c8 	.word	0x0000b7c8
    3988:	0000c831 	.word	0x0000c831
    398c:	2000002c 	.word	0x2000002c

00003990 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    3990:	b538      	push	{r3, r4, r5, lr}
    3992:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3994:	4805      	ldr	r0, [pc, #20]	; (39ac <bt_buf_get_rx+0x1c>)
    3996:	f006 ffd4 	bl	a942 <net_buf_alloc_fixed>
#endif

	if (buf) {
    399a:	4604      	mov	r4, r0
    399c:	b120      	cbz	r0, 39a8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    399e:	2100      	movs	r1, #0
    39a0:	3008      	adds	r0, #8
    39a2:	f006 ffed 	bl	a980 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    39a6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    39a8:	4620      	mov	r0, r4
    39aa:	bd38      	pop	{r3, r4, r5, pc}
    39ac:	20000474 	.word	0x20000474

000039b0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    39b0:	b570      	push	{r4, r5, r6, lr}
    39b2:	4602      	mov	r2, r0
    39b4:	460b      	mov	r3, r1
	__asm__ volatile(
    39b6:	f04f 0120 	mov.w	r1, #32
    39ba:	f3ef 8511 	mrs	r5, BASEPRI
    39be:	f381 8811 	msr	BASEPRI, r1
    39c2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    39c6:	480c      	ldr	r0, [pc, #48]	; (39f8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    39c8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    39ca:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
	bt_dev.sent_cmd = NULL;
    39ce:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	__asm__ volatile(
    39d2:	f385 8811 	msr	BASEPRI, r5
    39d6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    39da:	b924      	cbnz	r4, 39e6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    39dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    39e0:	2001      	movs	r0, #1
    39e2:	f7ff bfd5 	b.w	3990 <bt_buf_get_rx>
    39e6:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    39e8:	f104 0008 	add.w	r0, r4, #8
    39ec:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    39ee:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    39f0:	f006 ffc6 	bl	a980 <net_buf_simple_reserve>
}
    39f4:	4620      	mov	r0, r4
    39f6:	bd70      	pop	{r4, r5, r6, pc}
    39f8:	20000000 	.word	0x20000000

000039fc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, k_timeout_t timeout)
{
	switch (evt) {
    39fc:	380e      	subs	r0, #14
    39fe:	2801      	cmp	r0, #1
{
    3a00:	b570      	push	{r4, r5, r6, lr}
    3a02:	460c      	mov	r4, r1
    3a04:	4619      	mov	r1, r3
	switch (evt) {
    3a06:	d804      	bhi.n	3a12 <bt_buf_get_evt+0x16>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    3a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    3a0c:	4610      	mov	r0, r2
    3a0e:	f7ff bfcf 	b.w	39b0 <bt_buf_get_cmd_complete>
		if (discardable) {
    3a12:	b164      	cbz	r4, 3a2e <bt_buf_get_evt+0x32>
			buf = net_buf_alloc(&discardable_pool, timeout);
    3a14:	4808      	ldr	r0, [pc, #32]	; (3a38 <bt_buf_get_evt+0x3c>)
    3a16:	f006 ff94 	bl	a942 <net_buf_alloc_fixed>
			if (buf) {
    3a1a:	4604      	mov	r4, r0
    3a1c:	b128      	cbz	r0, 3a2a <bt_buf_get_evt+0x2e>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    3a1e:	2100      	movs	r1, #0
    3a20:	3008      	adds	r0, #8
    3a22:	f006 ffad 	bl	a980 <net_buf_simple_reserve>
    3a26:	2301      	movs	r3, #1
    3a28:	7523      	strb	r3, [r4, #20]
}
    3a2a:	4620      	mov	r0, r4
    3a2c:	bd70      	pop	{r4, r5, r6, pc}
    3a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3a32:	2001      	movs	r0, #1
    3a34:	f7ff bfac 	b.w	3990 <bt_buf_get_rx>
    3a38:	20000424 	.word	0x20000424

00003a3c <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    3a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3a40:	4f11      	ldr	r7, [pc, #68]	; (3a88 <mayfly_init+0x4c>)
    3a42:	f8df a048 	ldr.w	sl, [pc, #72]	; 3a8c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    3a46:	2404      	movs	r4, #4
	while (callee_id--) {
    3a48:	3c01      	subs	r4, #1
    3a4a:	b2e4      	uxtb	r4, r4
    3a4c:	2cff      	cmp	r4, #255	; 0xff
    3a4e:	d018      	beq.n	3a82 <mayfly_init+0x46>
    3a50:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    3a54:	ea4f 0984 	mov.w	r9, r4, lsl #2
    3a58:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
    3a5a:	2504      	movs	r5, #4
    3a5c:	f04f 080c 	mov.w	r8, #12
    3a60:	e00a      	b.n	3a78 <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
    3a62:	fb18 6105 	smlabb	r1, r8, r5, r6
    3a66:	1d0a      	adds	r2, r1, #4
    3a68:	eb05 0009 	add.w	r0, r5, r9
    3a6c:	443a      	add	r2, r7
    3a6e:	4439      	add	r1, r7
    3a70:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    3a74:	f006 fb5f 	bl	a136 <memq_init>
		while (caller_id--) {
    3a78:	3d01      	subs	r5, #1
    3a7a:	b2ed      	uxtb	r5, r5
    3a7c:	2dff      	cmp	r5, #255	; 0xff
    3a7e:	d1f0      	bne.n	3a62 <mayfly_init+0x26>
    3a80:	e7e2      	b.n	3a48 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    3a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a86:	bf00      	nop
    3a88:	200007a4 	.word	0x200007a4
    3a8c:	20000724 	.word	0x20000724

00003a90 <mayfly_enqueue>:
	}
}

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	4606      	mov	r6, r0
    3a94:	460d      	mov	r5, r1
    3a96:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3a98:	b1a2      	cbz	r2, 3ac4 <mayfly_enqueue+0x34>
    3a9a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3a9c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3a9e:	7820      	ldrb	r0, [r4, #0]
    3aa0:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    3aa2:	f010 0003 	ands.w	r0, r0, #3
    3aa6:	d02c      	beq.n	3b02 <mayfly_enqueue+0x72>
		if (chain) {
    3aa8:	b31b      	cbz	r3, 3af2 <mayfly_enqueue+0x62>
			if (state != 1U) {
    3aaa:	2801      	cmp	r0, #1
    3aac:	d028      	beq.n	3b00 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3aae:	3201      	adds	r2, #1
    3ab0:	b2d2      	uxtb	r2, r2
    3ab2:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    3ab4:	4b1c      	ldr	r3, [pc, #112]	; (3b28 <mayfly_enqueue+0x98>)
    3ab6:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    3ab8:	4629      	mov	r1, r5
    3aba:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    3abc:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    3abe:	f003 f9b3 	bl	6e28 <mayfly_pend>
    3ac2:	e01c      	b.n	3afe <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3ac4:	f006 fe89 	bl	a7da <mayfly_prio_is_equal>
    3ac8:	2800      	cmp	r0, #0
    3aca:	d0e6      	beq.n	3a9a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    3acc:	4629      	mov	r1, r5
    3ace:	4630      	mov	r0, r6
    3ad0:	f003 f98a 	bl	6de8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d0e0      	beq.n	3a9a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    3ad8:	2330      	movs	r3, #48	; 0x30
    3ada:	220c      	movs	r2, #12
    3adc:	436b      	muls	r3, r5
    3ade:	fb02 3306 	mla	r3, r2, r6, r3
    3ae2:	4a12      	ldr	r2, [pc, #72]	; (3b2c <mayfly_enqueue+0x9c>)
    3ae4:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3ae6:	7a93      	ldrb	r3, [r2, #10]
    3ae8:	7ad2      	ldrb	r2, [r2, #11]
    3aea:	1a9b      	subs	r3, r3, r2
    3aec:	bf18      	it	ne
    3aee:	2301      	movne	r3, #1
    3af0:	e7d4      	b.n	3a9c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3af2:	3202      	adds	r2, #2
    3af4:	b2d2      	uxtb	r2, r2
    3af6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    3af8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    3afc:	4798      	blx	r3

	return 0;
    3afe:	2000      	movs	r0, #0
}
    3b00:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    3b02:	2b00      	cmp	r3, #0
    3b04:	d0f8      	beq.n	3af8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    3b06:	3201      	adds	r2, #1
    3b08:	b2d2      	uxtb	r2, r2
    3b0a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    3b0c:	2304      	movs	r3, #4
    3b0e:	2230      	movs	r2, #48	; 0x30
    3b10:	fb12 3205 	smlabb	r2, r2, r5, r3
    3b14:	230c      	movs	r3, #12
    3b16:	fb13 2306 	smlabb	r3, r3, r6, r2
    3b1a:	4a04      	ldr	r2, [pc, #16]	; (3b2c <mayfly_enqueue+0x9c>)
    3b1c:	6860      	ldr	r0, [r4, #4]
    3b1e:	441a      	add	r2, r3
    3b20:	4621      	mov	r1, r4
    3b22:	f006 fb0b 	bl	a13c <memq_enqueue>
    3b26:	e7c5      	b.n	3ab4 <mayfly_enqueue+0x24>
    3b28:	200018d3 	.word	0x200018d3
    3b2c:	200007a4 	.word	0x200007a4

00003b30 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    3b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    3b34:	4b5b      	ldr	r3, [pc, #364]	; (3ca4 <mayfly_run+0x174>)
    3b36:	5c1a      	ldrb	r2, [r3, r0]
{
    3b38:	b089      	sub	sp, #36	; 0x24
    3b3a:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	f000 80aa 	beq.w	3c96 <mayfly_run+0x166>
		return;
	}
	mfp[callee_id] = 0U;
    3b42:	2700      	movs	r7, #0
    3b44:	541f      	strb	r7, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    3b46:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3b4a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    3b4c:	f8df b158 	ldr.w	fp, [pc, #344]	; 3ca8 <mayfly_run+0x178>
    3b50:	9304      	str	r3, [sp, #16]
    3b52:	2504      	movs	r5, #4
    3b54:	233c      	movs	r3, #60	; 0x3c
    3b56:	fb13 5300 	smlabb	r3, r3, r0, r5
    3b5a:	445b      	add	r3, fp
    3b5c:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
    3b5e:	9700      	str	r7, [sp, #0]
    3b60:	46da      	mov	sl, fp
	while (caller_id--) {
    3b62:	3d01      	subs	r5, #1
    3b64:	b2ed      	uxtb	r5, r5
    3b66:	2dff      	cmp	r5, #255	; 0xff
    3b68:	d10c      	bne.n	3b84 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    3b6a:	9b00      	ldr	r3, [sp, #0]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	f000 8092 	beq.w	3c96 <mayfly_run+0x166>
    3b72:	2f00      	cmp	r7, #0
    3b74:	f040 808f 	bne.w	3c96 <mayfly_run+0x166>
		mayfly_enable_cb(callee_id, callee_id, 0);
    3b78:	463a      	mov	r2, r7
    3b7a:	4621      	mov	r1, r4
    3b7c:	4620      	mov	r0, r4
    3b7e:	f003 f913 	bl	6da8 <mayfly_enable_cb>
    3b82:	e088      	b.n	3c96 <mayfly_run+0x166>
		struct mayfly *m = 0;
    3b84:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    3b86:	f04f 080c 	mov.w	r8, #12
		struct mayfly *m = 0;
    3b8a:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    3b8c:	fb08 f805 	mul.w	r8, r8, r5
    3b90:	2330      	movs	r3, #48	; 0x30
    3b92:	fb03 8304 	mla	r3, r3, r4, r8
    3b96:	eb0a 0103 	add.w	r1, sl, r3
    3b9a:	f85a 0003 	ldr.w	r0, [sl, r3]
    3b9e:	6849      	ldr	r1, [r1, #4]
    3ba0:	aa07      	add	r2, sp, #28
    3ba2:	f006 fad2 	bl	a14a <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    3ba6:	9a04      	ldr	r2, [sp, #16]
    3ba8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3bb0:	4453      	add	r3, sl
    3bb2:	e9cd 8301 	strd	r8, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    3bb6:	4606      	mov	r6, r0
		while (link) {
    3bb8:	2e00      	cmp	r6, #0
    3bba:	d04e      	beq.n	3c5a <mayfly_run+0x12a>
			state = (m->_req - m->_ack) & 0x03;
    3bbc:	9b07      	ldr	r3, [sp, #28]
    3bbe:	f893 9000 	ldrb.w	r9, [r3]
    3bc2:	785a      	ldrb	r2, [r3, #1]
    3bc4:	eba9 0902 	sub.w	r9, r9, r2
    3bc8:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
    3bcc:	f1b9 0f01 	cmp.w	r9, #1
    3bd0:	d104      	bne.n	3bdc <mayfly_run+0xac>
				m->_ack--;
    3bd2:	3a01      	subs	r2, #1
    3bd4:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3bd6:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    3bda:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    3bdc:	f8dd 801c 	ldr.w	r8, [sp, #28]
	req = m->_req;
    3be0:	f898 2000 	ldrb.w	r2, [r8]
	if (((req - m->_ack) & 0x03) != 1U) {
    3be4:	f898 1001 	ldrb.w	r1, [r8, #1]
	req = m->_req;
    3be8:	b2d3      	uxtb	r3, r2
	if (((req - m->_ack) & 0x03) != 1U) {
    3bea:	1a52      	subs	r2, r2, r1
    3bec:	f002 0203 	and.w	r2, r2, #3
    3bf0:	2a01      	cmp	r2, #1
	req = m->_req;
    3bf2:	9305      	str	r3, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    3bf4:	d01f      	beq.n	3c36 <mayfly_run+0x106>
		memq_dequeue(mft[callee_id][caller_id].tail,
    3bf6:	9b01      	ldr	r3, [sp, #4]
    3bf8:	9902      	ldr	r1, [sp, #8]
    3bfa:	2030      	movs	r0, #48	; 0x30
    3bfc:	fb00 3004 	mla	r0, r0, r4, r3
    3c00:	4b29      	ldr	r3, [pc, #164]	; (3ca8 <mayfly_run+0x178>)
    3c02:	4418      	add	r0, r3
    3c04:	2200      	movs	r2, #0
    3c06:	6840      	ldr	r0, [r0, #4]
    3c08:	f006 faa7 	bl	a15a <memq_dequeue>
		m->_ack = req;
    3c0c:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    3c0e:	f898 2001 	ldrb.w	r2, [r8, #1]
		m->_ack = req;
    3c12:	f888 3001 	strb.w	r3, [r8, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    3c16:	f898 3000 	ldrb.w	r3, [r8]
		m->_link = link;
    3c1a:	f8c8 6004 	str.w	r6, [r8, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    3c1e:	1a9b      	subs	r3, r3, r2
    3c20:	f003 0303 	and.w	r3, r3, #3
    3c24:	2b01      	cmp	r3, #1
    3c26:	d106      	bne.n	3c36 <mayfly_run+0x106>
			m->_ack = ack;
    3c28:	f888 2001 	strb.w	r2, [r8, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    3c2c:	4641      	mov	r1, r8
    3c2e:	9a03      	ldr	r2, [sp, #12]
    3c30:	4630      	mov	r0, r6
    3c32:	f006 fa83 	bl	a13c <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    3c36:	9a01      	ldr	r2, [sp, #4]
    3c38:	2330      	movs	r3, #48	; 0x30
    3c3a:	fb03 2304 	mla	r3, r3, r4, r2
    3c3e:	eb0a 0103 	add.w	r1, sl, r3
    3c42:	f85a 0003 	ldr.w	r0, [sl, r3]
    3c46:	6849      	ldr	r1, [r1, #4]
    3c48:	aa07      	add	r2, sp, #28
    3c4a:	f006 fa7e 	bl	a14a <memq_peek>
			if (state == 1U) {
    3c4e:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    3c52:	4606      	mov	r6, r0
			if (state == 1U) {
    3c54:	d1b0      	bne.n	3bb8 <mayfly_run+0x88>
				if (caller_id || link) {
    3c56:	b9bd      	cbnz	r5, 3c88 <mayfly_run+0x158>
    3c58:	b9b0      	cbnz	r0, 3c88 <mayfly_run+0x158>
		if (mft[callee_id][caller_id].disable_req !=
    3c5a:	2230      	movs	r2, #48	; 0x30
    3c5c:	4912      	ldr	r1, [pc, #72]	; (3ca8 <mayfly_run+0x178>)
    3c5e:	230c      	movs	r3, #12
    3c60:	4362      	muls	r2, r4
    3c62:	fb03 2205 	mla	r2, r3, r5, r2
    3c66:	440a      	add	r2, r1
    3c68:	7a91      	ldrb	r1, [r2, #10]
    3c6a:	7ad0      	ldrb	r0, [r2, #11]
    3c6c:	4288      	cmp	r0, r1
    3c6e:	d115      	bne.n	3c9c <mayfly_run+0x16c>
		if (mft[callee_id][caller_id].enable_req !=
    3c70:	2230      	movs	r2, #48	; 0x30
    3c72:	4362      	muls	r2, r4
    3c74:	fb03 2305 	mla	r3, r3, r5, r2
    3c78:	445b      	add	r3, fp
    3c7a:	7a1a      	ldrb	r2, [r3, #8]
    3c7c:	7a59      	ldrb	r1, [r3, #9]
    3c7e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3c80:	bf1c      	itt	ne
    3c82:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    3c84:	2701      	movne	r7, #1
    3c86:	e76c      	b.n	3b62 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    3c88:	4b06      	ldr	r3, [pc, #24]	; (3ca4 <mayfly_run+0x174>)
    3c8a:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
    3c8c:	4621      	mov	r1, r4
    3c8e:	4620      	mov	r0, r4
					mfp[callee_id] = 1U;
    3c90:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
    3c92:	f003 f8c9 	bl	6e28 <mayfly_pend>
	}
}
    3c96:	b009      	add	sp, #36	; 0x24
    3c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    3c9c:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    3c9e:	2201      	movs	r2, #1
    3ca0:	9200      	str	r2, [sp, #0]
    3ca2:	e7e5      	b.n	3c70 <mayfly_run+0x140>
    3ca4:	200018d3 	.word	0x200018d3
    3ca8:	200007a4 	.word	0x200007a4

00003cac <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    3cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    3cb0:	7fc3      	ldrb	r3, [r0, #31]
{
    3cb2:	b08f      	sub	sp, #60	; 0x3c
    3cb4:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    3cb6:	9304      	str	r3, [sp, #16]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	f040 83b7 	bne.w	442c <ticker_job+0x780>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    3cbe:	6943      	ldr	r3, [r0, #20]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3cc0:	7ac1      	ldrb	r1, [r0, #11]
	ticks_previous = instance->ticks_current;
    3cc2:	9307      	str	r3, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3cc4:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    3cc6:	2201      	movs	r2, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3cc8:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    3cca:	7782      	strb	r2, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3ccc:	d056      	beq.n	3d7c <ticker_job+0xd0>
	u8_t idx = *ticks_elapsed_index + 1;
    3cce:	4413      	add	r3, r2
    3cd0:	b2db      	uxtb	r3, r3
		idx = 0U;
    3cd2:	2b02      	cmp	r3, #2
    3cd4:	bf08      	it	eq
    3cd6:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    3cd8:	7283      	strb	r3, [r0, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
    3cda:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
    3cde:	9205      	str	r2, [sp, #20]
		ticks_elapsed =
    3ce0:	68db      	ldr	r3, [r3, #12]
    3ce2:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
    3ce4:	9901      	ldr	r1, [sp, #4]
    3ce6:	9b07      	ldr	r3, [sp, #28]
    3ce8:	440b      	add	r3, r1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    3cea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3cee:	6143      	str	r3, [r0, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    3cf0:	7f63      	ldrb	r3, [r4, #29]
    3cf2:	9306      	str	r3, [sp, #24]
	node = &instance->nodes[0];
    3cf4:	6823      	ldr	r3, [r4, #0]
    3cf6:	9309      	str	r3, [sp, #36]	; 0x24
	users = &instance->users[0];
    3cf8:	6863      	ldr	r3, [r4, #4]
    3cfa:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
    3cfc:	7a63      	ldrb	r3, [r4, #9]
    3cfe:	9303      	str	r3, [sp, #12]
	pending = 0U;
    3d00:	2300      	movs	r3, #0
    3d02:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    3d04:	23ff      	movs	r3, #255	; 0xff
    3d06:	9302      	str	r3, [sp, #8]
	while (count_user--) {
    3d08:	9b03      	ldr	r3, [sp, #12]
    3d0a:	3b01      	subs	r3, #1
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	2bff      	cmp	r3, #255	; 0xff
    3d10:	9303      	str	r3, [sp, #12]
    3d12:	d137      	bne.n	3d84 <ticker_job+0xd8>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    3d14:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    3d16:	9a06      	ldr	r2, [sp, #24]
    3d18:	1a9b      	subs	r3, r3, r2
    3d1a:	bf18      	it	ne
    3d1c:	2301      	movne	r3, #1
    3d1e:	9303      	str	r3, [sp, #12]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    3d20:	9b05      	ldr	r3, [sp, #20]
    3d22:	2b00      	cmp	r3, #0
    3d24:	f000 8284 	beq.w	4230 <ticker_job+0x584>
	ticks_now = cntr_cnt_get();
    3d28:	f002 fcd2 	bl	66d0 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3d2c:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    3d2e:	9f01      	ldr	r7, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3d30:	1ac0      	subs	r0, r0, r3
	node = &instance->nodes[0];
    3d32:	6823      	ldr	r3, [r4, #0]
    3d34:	9309      	str	r3, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3d36:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	ticks_expired = 0U;
    3d3a:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    3d3e:	7f65      	ldrb	r5, [r4, #29]
    3d40:	2dff      	cmp	r5, #255	; 0xff
    3d42:	d00d      	beq.n	3d60 <ticker_job+0xb4>
		ticker = &node[id_expired];
    3d44:	b228      	sxth	r0, r5
    3d46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3d4a:	0103      	lsls	r3, r0, #4
    3d4c:	930b      	str	r3, [sp, #44]	; 0x2c
    3d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d50:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    3d54:	6882      	ldr	r2, [r0, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3d56:	42ba      	cmp	r2, r7
    3d58:	f240 812e 	bls.w	3fb8 <ticker_job+0x30c>
			ticker->ticks_to_expire -= ticks_elapsed;
    3d5c:	1bd7      	subs	r7, r2, r7
    3d5e:	6087      	str	r7, [r0, #8]
			flag_compare_update = 1U;
    3d60:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    3d64:	9b03      	ldr	r3, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    3d66:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    3d68:	42a9      	cmp	r1, r5
    3d6a:	bf18      	it	ne
    3d6c:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
    3d6e:	9902      	ldr	r1, [sp, #8]
			flag_compare_update = 1U;
    3d70:	9303      	str	r3, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    3d72:	f006 fa3c 	bl	a1ee <ticker_job_list_insert>
	nodes = &instance->nodes[0];
    3d76:	6825      	ldr	r5, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
    3d78:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
    3d7a:	e1cd      	b.n	4118 <ticker_job+0x46c>
		flag_elapsed = 0U;
    3d7c:	9b04      	ldr	r3, [sp, #16]
    3d7e:	9305      	str	r3, [sp, #20]
		ticks_elapsed = 0U;
    3d80:	9301      	str	r3, [sp, #4]
    3d82:	e7b5      	b.n	3cf0 <ticker_job+0x44>
		user = &users[count_user];
    3d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d86:	9a03      	ldr	r2, [sp, #12]
    3d88:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3d8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3d90:	930a      	str	r3, [sp, #40]	; 0x28
		while (user->middle != user->last) {
    3d92:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
    3d96:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
    3d98:	f898 7002 	ldrb.w	r7, [r8, #2]
    3d9c:	4297      	cmp	r7, r2
    3d9e:	d0b3      	beq.n	3d08 <ticker_job+0x5c>
			user_op = &user_ops[user->middle];
    3da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (middle == user->count_user_op) {
    3da2:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
    3da6:	fb17 f100 	smulbb	r1, r7, r0
    3daa:	185e      	adds	r6, r3, r1
			middle = user->middle + 1;
    3dac:	1c7b      	adds	r3, r7, #1
    3dae:	b2db      	uxtb	r3, r3
				middle = 0U;
    3db0:	429d      	cmp	r5, r3
    3db2:	bf08      	it	eq
    3db4:	2300      	moveq	r3, #0
			user->middle = middle;
    3db6:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    3dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3dbc:	5c59      	ldrb	r1, [r3, r1]
    3dbe:	2904      	cmp	r1, #4
    3dc0:	d9ea      	bls.n	3d98 <ticker_job+0xec>
			ticker = &node[user_op->id];
    3dc2:	7870      	ldrb	r0, [r6, #1]
    3dc4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    3dc8:	012b      	lsls	r3, r5, #4
    3dca:	930d      	str	r3, [sp, #52]	; 0x34
    3dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3dce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    3dd2:	2907      	cmp	r1, #7
			state = (ticker->req - ticker->ack) & 0xff;
    3dd4:	f895 c002 	ldrb.w	ip, [r5, #2]
    3dd8:	786a      	ldrb	r2, [r5, #1]
    3dda:	eba2 020c 	sub.w	r2, r2, ip
    3dde:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    3de0:	d80e      	bhi.n	3e00 <ticker_job+0x154>
    3de2:	b16a      	cbz	r2, 3e00 <ticker_job+0x154>
			    (state == 0U) ||
    3de4:	2905      	cmp	r1, #5
    3de6:	d110      	bne.n	3e0a <ticker_job+0x15e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    3de8:	6873      	ldr	r3, [r6, #4]
    3dea:	b973      	cbnz	r3, 3e0a <ticker_job+0x15e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    3dec:	68b3      	ldr	r3, [r6, #8]
    3dee:	b963      	cbnz	r3, 3e0a <ticker_job+0x15e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    3df0:	68f3      	ldr	r3, [r6, #12]
    3df2:	b953      	cbnz	r3, 3e0a <ticker_job+0x15e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    3df4:	6933      	ldr	r3, [r6, #16]
    3df6:	b943      	cbnz	r3, 3e0a <ticker_job+0x15e>
			     (user_op->params.update.lazy == 0U) &&
    3df8:	6973      	ldr	r3, [r6, #20]
    3dfa:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
    3dfe:	d104      	bne.n	3e0a <ticker_job+0x15e>
				ticker_job_op_cb(user_op,
    3e00:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3e02:	4630      	mov	r0, r6
    3e04:	f006 f9e9 	bl	a1da <ticker_job_op_cb>
}
    3e08:	e7c3      	b.n	3d92 <ticker_job+0xe6>
			if (state == 1U) {
    3e0a:	2a01      	cmp	r2, #1
    3e0c:	f040 80c9 	bne.w	3fa2 <ticker_job+0x2f6>
	previous = instance->ticker_id_head;
    3e10:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
    3e12:	f8d4 9000 	ldr.w	r9, [r4]
	previous = instance->ticker_id_head;
    3e16:	461a      	mov	r2, r3
	total = 0U;
    3e18:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
    3e1a:	2bff      	cmp	r3, #255	; 0xff
    3e1c:	d130      	bne.n	3e80 <ticker_job+0x1d4>
		return 0;
    3e1e:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3e20:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3e22:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3e24:	f040 809a 	bne.w	3f5c <ticker_job+0x2b0>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    3e28:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
    3e2c:	f002 fc50 	bl	66d0 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3e30:	9901      	ldr	r1, [sp, #4]
	ticks_now = cntr_cnt_get();
    3e32:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3e34:	eba0 0309 	sub.w	r3, r0, r9
    3e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3e3c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
    3e3e:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3e40:	bf98      	it	ls
    3e42:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    3e44:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3e46:	bf9d      	ittte	ls
    3e48:	1bcf      	subls	r7, r1, r7
    3e4a:	19db      	addls	r3, r3, r7
    3e4c:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
    3e4e:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
    3e50:	bf98      	it	ls
    3e52:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
    3e54:	2800      	cmp	r0, #0
    3e56:	d057      	beq.n	3f08 <ticker_job+0x25c>
	    (user_op->params.update.lazy != 0U)) {
    3e58:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    3e5a:	2900      	cmp	r1, #0
    3e5c:	d054      	beq.n	3f08 <ticker_job+0x25c>
		user_op->params.update.lazy--;
    3e5e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    3e62:	fa1f fc8c 	uxth.w	ip, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    3e66:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 4134 <ticker_job+0x488>
		user_op->params.update.lazy--;
    3e6a:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3e6e:	4298      	cmp	r0, r3
    3e70:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    3e74:	d201      	bcs.n	3e7a <ticker_job+0x1ce>
    3e76:	45f4      	cmp	ip, lr
    3e78:	d313      	bcc.n	3ea2 <ticker_job+0x1f6>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3e7a:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 4138 <ticker_job+0x48c>
    3e7e:	e03d      	b.n	3efc <ticker_job+0x250>
		ticker_current = &node[current];
    3e80:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    3e84:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
    3e88:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
		if (current == id) {
    3e8c:	4298      	cmp	r0, r3
    3e8e:	f8de a008 	ldr.w	sl, [lr, #8]
    3e92:	f819 b00b 	ldrb.w	fp, [r9, fp]
    3e96:	4457      	add	r7, sl
    3e98:	f000 82a9 	beq.w	43ee <ticker_job+0x742>
    3e9c:	461a      	mov	r2, r3
    3e9e:	465b      	mov	r3, fp
    3ea0:	e7bb      	b.n	3e1a <ticker_job+0x16e>
	if ((ticker->remainder_current >= BIT(31)) ||
    3ea2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3ea4:	4fa1      	ldr	r7, [pc, #644]	; (412c <ticker_job+0x480>)
    3ea6:	4aa2      	ldr	r2, [pc, #648]	; (4130 <ticker_job+0x484>)
    3ea8:	19cf      	adds	r7, r1, r7
    3eaa:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    3eac:	bf84      	itt	hi
    3eae:	4459      	addhi	r1, fp
    3eb0:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    3eb2:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
    3eb6:	bf8c      	ite	hi
    3eb8:	f04f 0a01 	movhi.w	sl, #1
	u8_t decrement = 0U;
    3ebc:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    3ec0:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
    3ec2:	4482      	add	sl, r0
			ticker->lazy_current--;
    3ec4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    3ec8:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    3eca:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
    3ece:	f8a5 e01e 	strh.w	lr, [r5, #30]
    3ed2:	e7cc      	b.n	3e6e <ticker_job+0x1c2>
	ticker->remainder_current += ticker->remainder_periodic;
    3ed4:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
    3ed8:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3eda:	4994      	ldr	r1, [pc, #592]	; (412c <ticker_job+0x480>)
    3edc:	4a94      	ldr	r2, [pc, #592]	; (4130 <ticker_job+0x484>)
    3ede:	1879      	adds	r1, r7, r1
    3ee0:	4291      	cmp	r1, r2
	return 0;
    3ee2:	bf8e      	itee	hi
    3ee4:	2100      	movhi	r1, #0
		return 1;
    3ee6:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3ee8:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
    3eea:	4401      	add	r1, r0
			ticker->lazy_current++;
    3eec:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    3ef0:	bf8c      	ite	hi
    3ef2:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3ef4:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    3ef6:	440b      	add	r3, r1
			ticker->lazy_current++;
    3ef8:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    3efc:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    3f00:	45f4      	cmp	ip, lr
    3f02:	d8e7      	bhi.n	3ed4 <ticker_job+0x228>
		ticker->lazy_periodic = user_op->params.update.lazy;
    3f04:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    3f08:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
    3f0a:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    3f0c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    3f0e:	440b      	add	r3, r1
    3f10:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    3f12:	696b      	ldr	r3, [r5, #20]
    3f14:	4403      	add	r3, r0
    3f16:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    3f18:	b11f      	cbz	r7, 3f22 <ticker_job+0x276>
    3f1a:	683b      	ldr	r3, [r7, #0]
    3f1c:	b10b      	cbz	r3, 3f22 <ticker_job+0x276>
			user_op->params.update.ticks_drift_plus -
    3f1e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    3f20:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3f24:	4649      	mov	r1, r9
    3f26:	4628      	mov	r0, r5
    3f28:	f006 f939 	bl	a19e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    3f2c:	68f2      	ldr	r2, [r6, #12]
    3f2e:	69ab      	ldr	r3, [r5, #24]
    3f30:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3f32:	6932      	ldr	r2, [r6, #16]
    3f34:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    3f36:	bf8c      	ite	hi
    3f38:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    3f3a:	2300      	movls	r3, #0
    3f3c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    3f3e:	7db3      	ldrb	r3, [r6, #22]
    3f40:	b103      	cbz	r3, 3f44 <ticker_job+0x298>
		ticker->force = user_op->params.update.force;
    3f42:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
    3f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f48:	4619      	mov	r1, r3
    3f4a:	9b02      	ldr	r3, [sp, #8]
    3f4c:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
    3f4e:	7873      	ldrb	r3, [r6, #1]
    3f50:	9302      	str	r3, [sp, #8]
		ticker->req++;
    3f52:	786b      	ldrb	r3, [r5, #1]
    3f54:	3301      	adds	r3, #1
    3f56:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3f58:	2100      	movs	r1, #0
    3f5a:	e752      	b.n	3e02 <ticker_job+0x156>
		ticker->req = ticker->ack;
    3f5c:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    3f60:	7f23      	ldrb	r3, [r4, #28]
    3f62:	4283      	cmp	r3, r0
    3f64:	d1f8      	bne.n	3f58 <ticker_job+0x2ac>
			instance->ticker_id_slot_previous = TICKER_NULL;
    3f66:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    3f68:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    3f6a:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    3f6c:	d10d      	bne.n	3f8a <ticker_job+0x2de>
				ticks_at_stop =
    3f6e:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
    3f70:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
    3f72:	1ac2      	subs	r2, r0, r3
    3f74:	0211      	lsls	r1, r2, #8
    3f76:	d40b      	bmi.n	3f90 <ticker_job+0x2e4>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3f78:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    3f7c:	9a01      	ldr	r2, [sp, #4]
    3f7e:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    3f80:	69a2      	ldr	r2, [r4, #24]
    3f82:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    3f84:	bf88      	it	hi
    3f86:	61a3      	strhi	r3, [r4, #24]
    3f88:	e7e6      	b.n	3f58 <ticker_job+0x2ac>
				ticks_at_stop = cntr_cnt_get();
    3f8a:	f002 fba1 	bl	66d0 <cntr_cnt_get>
    3f8e:	e7ef      	b.n	3f70 <ticker_job+0x2c4>
				if (ticks_elapsed > ticks_used) {
    3f90:	9a01      	ldr	r2, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3f92:	1a1b      	subs	r3, r3, r0
    3f94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    3f98:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    3f9a:	bf8c      	ite	hi
    3f9c:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    3f9e:	2300      	movls	r3, #0
    3fa0:	e7ee      	b.n	3f80 <ticker_job+0x2d4>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3fa2:	2104      	movs	r1, #4
    3fa4:	4623      	mov	r3, r4
    3fa6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3fa8:	2201      	movs	r2, #1
    3faa:	4608      	mov	r0, r1
    3fac:	47a8      	blx	r5
				pending = 1U;
    3fae:	2301      	movs	r3, #1
				user->middle = prev;
    3fb0:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
    3fb4:	9308      	str	r3, [sp, #32]
				break;
    3fb6:	e6a7      	b.n	3d08 <ticker_job+0x5c>
		is_must_expire_skip = (ticker->must_expire &&
    3fb8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
    3fbc:	1abf      	subs	r7, r7, r2
		ticks_expired += ticks_to_expire;
    3fbe:	4492      	add	sl, r2
		ticks_latency -= ticks_to_expire;
    3fc0:	ebab 0b02 	sub.w	fp, fp, r2
		is_must_expire_skip = (ticker->must_expire &&
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d048      	beq.n	405a <ticker_job+0x3ae>
    3fc8:	8bc6      	ldrh	r6, [r0, #30]
    3fca:	3e00      	subs	r6, #0
    3fcc:	bf18      	it	ne
    3fce:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3fd0:	69a1      	ldr	r1, [r4, #24]
    3fd2:	428a      	cmp	r2, r1
			instance->ticker_id_slot_previous = TICKER_NULL;
    3fd4:	bf24      	itt	cs
    3fd6:	22ff      	movcs	r2, #255	; 0xff
    3fd8:	7722      	strbcs	r2, [r4, #28]
		if ((ticker->ticks_slot != 0U) &&
    3fda:	f8d0 c018 	ldr.w	ip, [r0, #24]
			instance->ticks_slot_previous -= ticks_to_expire;
    3fde:	bf34      	ite	cc
    3fe0:	1a8a      	subcc	r2, r1, r2
			instance->ticks_slot_previous = 0U;
    3fe2:	2200      	movcs	r2, #0
    3fe4:	61a2      	str	r2, [r4, #24]
		if ((ticker->ticks_slot != 0U) &&
    3fe6:	6a82      	ldr	r2, [r0, #40]	; 0x28
    3fe8:	f1bc 0f00 	cmp.w	ip, #0
    3fec:	d00f      	beq.n	400e <ticker_job+0x362>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    3fee:	7841      	ldrb	r1, [r0, #1]
    3ff0:	f890 e002 	ldrb.w	lr, [r0, #2]
    3ff4:	eba1 010e 	sub.w	r1, r1, lr
    3ff8:	b2c9      	uxtb	r1, r1
		if ((ticker->ticks_slot != 0U) &&
    3ffa:	2902      	cmp	r1, #2
    3ffc:	d107      	bne.n	400e <ticker_job+0x362>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    3ffe:	b936      	cbnz	r6, 400e <ticker_job+0x362>
		    !is_must_expire_skip &&
    4000:	b112      	cbz	r2, 4008 <ticker_job+0x35c>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    4002:	7a11      	ldrb	r1, [r2, #8]
    4004:	2901      	cmp	r1, #1
    4006:	d002      	beq.n	400e <ticker_job+0x362>
			instance->ticker_id_slot_previous = id_expired;
    4008:	7725      	strb	r5, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    400a:	f8c4 c018 	str.w	ip, [r4, #24]
		ticker->ticks_to_expire = 0U;
    400e:	2100      	movs	r1, #0
    4010:	6081      	str	r1, [r0, #8]
		instance->ticker_id_head = ticker->next;
    4012:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    4014:	9909      	ldr	r1, [sp, #36]	; 0x24
    4016:	5d89      	ldrb	r1, [r1, r6]
    4018:	7761      	strb	r1, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
    401a:	f8d0 e004 	ldr.w	lr, [r0, #4]
    401e:	f1be 0f00 	cmp.w	lr, #0
    4022:	d11c      	bne.n	405e <ticker_job+0x3b2>
    4024:	2a00      	cmp	r2, #0
    4026:	d065      	beq.n	40f4 <ticker_job+0x448>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    4028:	7a11      	ldrb	r1, [r2, #8]
    402a:	2901      	cmp	r1, #1
    402c:	d162      	bne.n	40f4 <ticker_job+0x448>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    402e:	7a12      	ldrb	r2, [r2, #8]
    4030:	2a01      	cmp	r2, #1
    4032:	d116      	bne.n	4062 <ticker_job+0x3b6>
				ticker->req = ticker->ack;
    4034:	7883      	ldrb	r3, [r0, #2]
				ticker->ticks_to_expire = ticks_elapsed;
    4036:	6087      	str	r7, [r0, #8]
				ticker->req = ticker->ack;
    4038:	7043      	strb	r3, [r0, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    403a:	9b07      	ldr	r3, [sp, #28]
    403c:	6961      	ldr	r1, [r4, #20]
    403e:	eb03 020a 	add.w	r2, r3, sl
    4042:	f006 f8ac 	bl	a19e <ticks_to_expire_prep>
			ticker->next = *insert_head;
    4046:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    404a:	4619      	mov	r1, r3
    404c:	9b02      	ldr	r3, [sp, #8]
    404e:	548b      	strb	r3, [r1, r2]
			ticker->req++;
    4050:	7843      	ldrb	r3, [r0, #1]
    4052:	3301      	adds	r3, #1
    4054:	7043      	strb	r3, [r0, #1]
			ticker->req = ticker->ack;
    4056:	9502      	str	r5, [sp, #8]
    4058:	e671      	b.n	3d3e <ticker_job+0x92>
		is_must_expire_skip = (ticker->must_expire &&
    405a:	461e      	mov	r6, r3
    405c:	e7b8      	b.n	3fd0 <ticker_job+0x324>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    405e:	2a00      	cmp	r2, #0
    4060:	d1e5      	bne.n	402e <ticker_job+0x382>
				if (!ticker->lazy_current) {
    4062:	f8b0 801e 	ldrh.w	r8, [r0, #30]
    4066:	f1b8 0f00 	cmp.w	r8, #0
    406a:	d127      	bne.n	40bc <ticker_job+0x410>
					lazy_periodic = ticker->lazy_periodic;
    406c:	8b82      	ldrh	r2, [r0, #28]
					lazy_periodic = 0U;
    406e:	920a      	str	r2, [sp, #40]	; 0x28
				while (count--) {
    4070:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
				ticks_to_expire = 0U;
    4074:	f04f 0c00 	mov.w	ip, #0
	ticker->remainder_current += ticker->remainder_periodic;
    4078:	e9d0 6108 	ldrd	r6, r1, [r0, #32]
    407c:	4431      	add	r1, r6
	if ((ticker->remainder_current < BIT(31)) &&
    407e:	4e2b      	ldr	r6, [pc, #172]	; (412c <ticker_job+0x480>)
    4080:	4a2b      	ldr	r2, [pc, #172]	; (4130 <ticker_job+0x484>)
    4082:	198e      	adds	r6, r1, r6
    4084:	4296      	cmp	r6, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    4086:	bf9f      	itttt	ls
    4088:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
    408c:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
    4090:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
    4094:	6241      	strls	r1, [r0, #36]	; 0x24
		return 1;
    4096:	bf92      	itee	ls
    4098:	9905      	ldrls	r1, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
    409a:	6241      	strhi	r1, [r0, #36]	; 0x24
	return 0;
    409c:	2100      	movhi	r1, #0
					ticks_to_expire +=
    409e:	4471      	add	r1, lr
				while (count--) {
    40a0:	f1b9 0901 	subs.w	r9, r9, #1
					ticks_to_expire +=
    40a4:	448c      	add	ip, r1
				while (count--) {
    40a6:	d2e7      	bcs.n	4078 <ticker_job+0x3cc>
				if (!ticker->must_expire) {
    40a8:	b30b      	cbz	r3, 40ee <ticker_job+0x442>
				lazy = 0U;
    40aa:	2100      	movs	r1, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    40ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticker->ticks_to_expire = ticks_to_expire;
    40ae:	f8c0 c008 	str.w	ip, [r0, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    40b2:	440b      	add	r3, r1
    40b4:	4498      	add	r8, r3
    40b6:	f8a0 801e 	strh.w	r8, [r0, #30]
    40ba:	e7be      	b.n	403a <ticker_job+0x38e>
					ticker->req = ticker->ack;
    40bc:	7882      	ldrb	r2, [r0, #2]
    40be:	7042      	strb	r2, [r0, #1]
					lazy_periodic = 0U;
    40c0:	2200      	movs	r2, #0
    40c2:	e7d4      	b.n	406e <ticker_job+0x3c2>
	ticker->remainder_current += ticker->remainder_periodic;
    40c4:	e9d0 6108 	ldrd	r6, r1, [r0, #32]
    40c8:	4431      	add	r1, r6
	if ((ticker->remainder_current < BIT(31)) &&
    40ca:	4e18      	ldr	r6, [pc, #96]	; (412c <ticker_job+0x480>)
    40cc:	4a18      	ldr	r2, [pc, #96]	; (4130 <ticker_job+0x484>)
    40ce:	198e      	adds	r6, r1, r6
    40d0:	4296      	cmp	r6, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    40d2:	bf9d      	ittte	ls
    40d4:	4449      	addls	r1, r9
    40d6:	6241      	strls	r1, [r0, #36]	; 0x24
		return 1;
    40d8:	9905      	ldrls	r1, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
    40da:	6241      	strhi	r1, [r0, #36]	; 0x24
	return 0;
    40dc:	bf88      	it	hi
    40de:	2100      	movhi	r1, #0
						ticks_to_expire +=
    40e0:	4471      	add	r1, lr
    40e2:	448c      	add	ip, r1
						lazy++;
    40e4:	3301      	adds	r3, #1
					while (ticks_to_expire <
    40e6:	45e3      	cmp	fp, ip
    40e8:	b299      	uxth	r1, r3
    40ea:	d8eb      	bhi.n	40c4 <ticker_job+0x418>
    40ec:	e7de      	b.n	40ac <ticker_job+0x400>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    40ee:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4138 <ticker_job+0x48c>
    40f2:	e7f8      	b.n	40e6 <ticker_job+0x43a>
			ticker->req = ticker->ack;
    40f4:	7883      	ldrb	r3, [r0, #2]
    40f6:	9d02      	ldr	r5, [sp, #8]
    40f8:	7043      	strb	r3, [r0, #1]
    40fa:	e7ac      	b.n	4056 <ticker_job+0x3aa>
			ticker = &nodes[ticker_id_head];
    40fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    4100:	010b      	lsls	r3, r1, #4
    4102:	eb05 1101 	add.w	r1, r5, r1, lsl #4
			ext_data = ticker->ext_data;
    4106:	f815 e003 	ldrb.w	lr, [r5, r3]
    410a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    410c:	b11f      	cbz	r7, 4116 <ticker_job+0x46a>
    410e:	7a3b      	ldrb	r3, [r7, #8]
    4110:	2b01      	cmp	r3, #1
    4112:	f000 8185 	beq.w	4420 <ticker_job+0x774>
			ticker_id_head = ticker->next;
    4116:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
    4118:	2eff      	cmp	r6, #255	; 0xff
    411a:	d1ef      	bne.n	40fc <ticker_job+0x450>
			flag_compare_update = 1U;
    411c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    4120:	2b00      	cmp	r3, #0
    4122:	bf08      	it	eq
    4124:	4613      	moveq	r3, r2
    4126:	9303      	str	r3, [sp, #12]
    4128:	e086      	b.n	4238 <ticker_job+0x58c>
    412a:	bf00      	nop
    412c:	ff172b5a 	.word	0xff172b5a
    4130:	7f172b59 	.word	0x7f172b59
    4134:	01d1a94a 	.word	0x01d1a94a
    4138:	fe2e56b6 	.word	0xfe2e56b6
			instance->ticks_slot_previous > ticks_elapsed) {
    413c:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    413e:	9b01      	ldr	r3, [sp, #4]
    4140:	4283      	cmp	r3, r0
    4142:	f080 8171 	bcs.w	4428 <ticker_job+0x77c>
			window_start_ticks = instance->ticks_slot_previous -
    4146:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
    4148:	9302      	str	r3, [sp, #8]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    414a:	e9d7 2300 	ldrd	r2, r3, [r7]
    414e:	4293      	cmp	r3, r2
    4150:	d255      	bcs.n	41fe <ticker_job+0x552>
			ticks_slot_window = ext_data->ticks_slot_window -
    4152:	f04f 0c00 	mov.w	ip, #0
    4156:	eba2 0a03 	sub.w	sl, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
    415a:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
    415c:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
    415e:	2aff      	cmp	r2, #255	; 0xff
    4160:	d006      	beq.n	4170 <ticker_job+0x4c4>
		       ticks_start_offset + ticker->ticks_slot <=
    4162:	f8d1 8018 	ldr.w	r8, [r1, #24]
    4166:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
    416a:	4582      	cmp	sl, r0
		       ticks_start_offset + ticker->ticks_slot <=
    416c:	9004      	str	r0, [sp, #16]
		while (ticker_id_iter != TICKER_NULL &&
    416e:	d217      	bcs.n	41a0 <ticker_job+0x4f4>
		ticker->ticks_to_expire = ticks_to_expire;
    4170:	608b      	str	r3, [r1, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    4172:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
    4174:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
    4176:	2aff      	cmp	r2, #255	; 0xff
    4178:	d046      	beq.n	4208 <ticker_job+0x55c>
			node = &nodes[ticker_id_iter];
    417a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    417e:	ea4f 1900 	mov.w	r9, r0, lsl #4
    4182:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    4186:	f8d1 8008 	ldr.w	r8, [r1, #8]
    418a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    418e:	45e0      	cmp	r8, ip
    4190:	d937      	bls.n	4202 <ticker_job+0x556>
				ticker->ticks_to_expire -=
    4192:	eba8 030c 	sub.w	r3, r8, ip
    4196:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
    4198:	4613      	mov	r3, r2
    419a:	f815 2009 	ldrb.w	r2, [r5, r9]
    419e:	e7ea      	b.n	4176 <ticker_job+0x4ca>
			node = &nodes[ticker_id_iter];
    41a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    41a4:	ea4f 1b02 	mov.w	fp, r2, lsl #4
    41a8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			if (node->ext_data &&
    41ac:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    41b0:	f1b9 0f00 	cmp.w	r9, #0
    41b4:	d007      	beq.n	41c6 <ticker_job+0x51a>
    41b6:	f899 9008 	ldrb.w	r9, [r9, #8]
    41ba:	f1b9 0f01 	cmp.w	r9, #1
    41be:	d102      	bne.n	41c6 <ticker_job+0x51a>
			ticker_id_iter = node->next;
    41c0:	f815 200b 	ldrb.w	r2, [r5, fp]
    41c4:	e7cb      	b.n	415e <ticker_job+0x4b2>
			if (node->ticks_to_expire >
    41c6:	f8d2 9008 	ldr.w	r9, [r2, #8]
    41ca:	f1b9 0f04 	cmp.w	r9, #4
    41ce:	d90e      	bls.n	41ee <ticker_job+0x542>
					MIN(ticks_slot_window,
    41d0:	f1ac 0304 	sub.w	r3, ip, #4
    41d4:	444b      	add	r3, r9
				window_end_ticks =
    41d6:	4553      	cmp	r3, sl
			if (window_end_ticks > ticks_start_offset +
    41d8:	9804      	ldr	r0, [sp, #16]
				window_end_ticks =
    41da:	bf28      	it	cs
    41dc:	4653      	movcs	r3, sl
			if (window_end_ticks > ticks_start_offset +
    41de:	4283      	cmp	r3, r0
    41e0:	d905      	bls.n	41ee <ticker_job+0x542>
			if (ticks_to_expire != 0U &&
    41e2:	ebb3 0308 	subs.w	r3, r3, r8
    41e6:	d002      	beq.n	41ee <ticker_job+0x542>
    41e8:	9802      	ldr	r0, [sp, #8]
    41ea:	4283      	cmp	r3, r0
    41ec:	d2c0      	bcs.n	4170 <ticker_job+0x4c4>
			window_start_ticks  = node->ticks_to_expire +
    41ee:	6990      	ldr	r0, [r2, #24]
    41f0:	eb00 0309 	add.w	r3, r0, r9
    41f4:	9302      	str	r3, [sp, #8]
			ticks_start_offset += node->ticks_to_expire;
    41f6:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
    41f8:	ebaa 0308 	sub.w	r3, sl, r8
    41fc:	e7e0      	b.n	41c0 <ticker_job+0x514>
    41fe:	2300      	movs	r3, #0
    4200:	e7b6      	b.n	4170 <ticker_job+0x4c4>
				node->ticks_to_expire -=
    4202:	ebac 0208 	sub.w	r2, ip, r8
    4206:	6082      	str	r2, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
    4208:	2bff      	cmp	r3, #255	; 0xff
    420a:	d008      	beq.n	421e <ticker_job+0x572>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    420c:	b21b      	sxth	r3, r3
    420e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4212:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    4214:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    4218:	5cea      	ldrb	r2, [r5, r3]
    421a:	700a      	strb	r2, [r1, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    421c:	54ee      	strb	r6, [r5, r3]
		ticker->lazy_current--;
    421e:	8bcb      	ldrh	r3, [r1, #30]
    4220:	3b01      	subs	r3, #1
    4222:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
    4224:	f04f 0302 	mov.w	r3, #2
    4228:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    422a:	2301      	movs	r3, #1
    422c:	9304      	str	r3, [sp, #16]
    422e:	e5a3      	b.n	3d78 <ticker_job+0xcc>
		ticker_job_list_insert(instance, insert_head);
    4230:	9902      	ldr	r1, [sp, #8]
    4232:	4620      	mov	r0, r4
    4234:	f005 ffdb 	bl	a1ee <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    4238:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    423a:	9a03      	ldr	r2, [sp, #12]
    423c:	9906      	ldr	r1, [sp, #24]
    423e:	428b      	cmp	r3, r1
    4240:	bf18      	it	ne
    4242:	2201      	movne	r2, #1
	if (!pending) {
    4244:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
    4246:	9203      	str	r2, [sp, #12]
	if (!pending) {
    4248:	b1e3      	cbz	r3, 4284 <ticker_job+0x5d8>
	instance->job_guard = 0U;
    424a:	2300      	movs	r3, #0
    424c:	77a3      	strb	r3, [r4, #30]
	if (flag_compare_update) {
    424e:	9b03      	ldr	r3, [sp, #12]
    4250:	b153      	cbz	r3, 4268 <ticker_job+0x5bc>
	if (instance->ticker_id_head == TICKER_NULL) {
    4252:	7f63      	ldrb	r3, [r4, #29]
    4254:	2bff      	cmp	r3, #255	; 0xff
    4256:	f040 8081 	bne.w	435c <ticker_job+0x6b0>
		if (cntr_stop() == 0) {
    425a:	f002 fa13 	bl	6684 <cntr_stop>
    425e:	b918      	cbnz	r0, 4268 <ticker_job+0x5bc>
			instance->ticks_slot_previous = 0U;
    4260:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    4262:	f002 fa35 	bl	66d0 <cntr_cnt_get>
    4266:	6160      	str	r0, [r4, #20]
	if (instance->worker_trigger) {
    4268:	7fe3      	ldrb	r3, [r4, #31]
    426a:	2b00      	cmp	r3, #0
    426c:	f000 80de 	beq.w	442c <ticker_job+0x780>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    4270:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4272:	4623      	mov	r3, r4
    4274:	2201      	movs	r2, #1
    4276:	2103      	movs	r1, #3
    4278:	2004      	movs	r0, #4
    427a:	46ac      	mov	ip, r5
}
    427c:	b00f      	add	sp, #60	; 0x3c
    427e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    4282:	4760      	bx	ip
	users = &instance->users[0];
    4284:	6863      	ldr	r3, [r4, #4]
	count_user = instance->count_user;
    4286:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
    4288:	f8dd a020 	ldr.w	sl, [sp, #32]
	users = &instance->users[0];
    428c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    428e:	3d01      	subs	r5, #1
    4290:	b2ed      	uxtb	r5, r5
    4292:	2dff      	cmp	r5, #255	; 0xff
    4294:	d0d9      	beq.n	424a <ticker_job+0x59e>
		user = &users[count_user];
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    429c:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    42a0:	7873      	ldrb	r3, [r6, #1]
    42a2:	78f2      	ldrb	r2, [r6, #3]
    42a4:	429a      	cmp	r2, r3
    42a6:	d0f2      	beq.n	428e <ticker_job+0x5e2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    42a8:	2234      	movs	r2, #52	; 0x34
    42aa:	fb13 f202 	smulbb	r2, r3, r2
    42ae:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    42b2:	f818 2002 	ldrb.w	r2, [r8, r2]
    42b6:	2a02      	cmp	r2, #2
    42b8:	d013      	beq.n	42e2 <ticker_job+0x636>
    42ba:	2a03      	cmp	r2, #3
    42bc:	d03e      	beq.n	433c <ticker_job+0x690>
    42be:	2a01      	cmp	r2, #1
    42c0:	d106      	bne.n	42d0 <ticker_job+0x624>
			uop->status = TICKER_STATUS_SUCCESS;
    42c2:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    42c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
    42c8:	b112      	cbz	r2, 42d0 <ticker_job+0x624>
		fp_op_func(uop->status, uop->op_context);
    42ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
    42cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    42ce:	4790      	blx	r2
			first = user->first + 1;
    42d0:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    42d2:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    42d4:	3301      	adds	r3, #1
    42d6:	b2db      	uxtb	r3, r3
				first = 0U;
    42d8:	429a      	cmp	r2, r3
    42da:	bf08      	it	eq
    42dc:	2300      	moveq	r3, #0
			user->first = first;
    42de:	7073      	strb	r3, [r6, #1]
    42e0:	e7de      	b.n	42a0 <ticker_job+0x5f4>
		ticker_by_next_slot_get(instance,
    42e2:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    42e6:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    42ea:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    42ee:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
    42f2:	6961      	ldr	r1, [r4, #20]
    42f4:	2aff      	cmp	r2, #255	; 0xff
    42f6:	d002      	beq.n	42fe <ticker_job+0x652>
    42f8:	6807      	ldr	r7, [r0, #0]
    42fa:	42b9      	cmp	r1, r7
    42fc:	d013      	beq.n	4326 <ticker_job+0x67a>
		_ticker_id_head = instance->ticker_id_head;
    42fe:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    4300:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    4302:	2000      	movs	r0, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    4304:	2aff      	cmp	r2, #255	; 0xff
    4306:	d009      	beq.n	431c <ticker_job+0x670>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    4308:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    430c:	ea4f 1b01 	mov.w	fp, r1, lsl #4
    4310:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
    4314:	688f      	ldr	r7, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    4316:	6989      	ldr	r1, [r1, #24]
    4318:	4438      	add	r0, r7
    431a:	b161      	cbz	r1, 4336 <ticker_job+0x68a>
	*ticker_id_head = _ticker_id_head;
    431c:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    4320:	f8ce 0000 	str.w	r0, [lr]
}
    4324:	e7cd      	b.n	42c2 <ticker_job+0x616>
		ticker = &node[_ticker_id_head];
    4326:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    432a:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    432c:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
    4330:	f81c 2002 	ldrb.w	r2, [ip, r2]
    4334:	e7e6      	b.n	4304 <ticker_job+0x658>
		_ticker_id_head = ticker->next;
    4336:	f81c 200b 	ldrb.w	r2, [ip, fp]
    433a:	e7e3      	b.n	4304 <ticker_job+0x658>
		if (uop->id < instance->count_node) {
    433c:	785a      	ldrb	r2, [r3, #1]
    433e:	7a21      	ldrb	r1, [r4, #8]
    4340:	4291      	cmp	r1, r2
    4342:	d908      	bls.n	4356 <ticker_job+0x6aa>
			node[uop->id].priority =
    4344:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    4348:	6822      	ldr	r2, [r4, #0]
    434a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    434e:	7919      	ldrb	r1, [r3, #4]
    4350:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    4354:	e7b5      	b.n	42c2 <ticker_job+0x616>
			uop->status = TICKER_STATUS_FAILURE;
    4356:	2201      	movs	r2, #1
    4358:	629a      	str	r2, [r3, #40]	; 0x28
    435a:	e7b4      	b.n	42c6 <ticker_job+0x61a>
	if (ticker_id_old_head == TICKER_NULL) {
    435c:	9b06      	ldr	r3, [sp, #24]
    435e:	2bff      	cmp	r3, #255	; 0xff
    4360:	d106      	bne.n	4370 <ticker_job+0x6c4>
		ticks_current = cntr_cnt_get();
    4362:	f002 f9b5 	bl	66d0 <cntr_cnt_get>
    4366:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    4368:	f002 f97e 	bl	6668 <cntr_start>
    436c:	b900      	cbnz	r0, 4370 <ticker_job+0x6c4>
			instance->ticks_current = ticks_current;
    436e:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    4370:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    4372:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    4374:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4434 <ticker_job+0x788>
    4378:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4438 <ticker_job+0x78c>
    437c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 443c <ticker_job+0x790>
	ticker = &instance->nodes[instance->ticker_id_head];
    4380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    4384:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
    4388:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    438a:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    438c:	f002 f9a0 	bl	66d0 <cntr_cnt_get>
		cc = instance->ticks_current;
    4390:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4392:	1b43      	subs	r3, r0, r5
    4394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    4398:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    439a:	42bb      	cmp	r3, r7
    439c:	bf2c      	ite	cs
    439e:	18ed      	addcs	r5, r5, r3
    43a0:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    43a2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    43a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
    43a8:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    43aa:	4628      	mov	r0, r5
    43ac:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    43ae:	f002 f98f 	bl	66d0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    43b2:	eba0 030b 	sub.w	r3, r0, fp
    43b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    43ba:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    43be:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    43c0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    43c4:	42ab      	cmp	r3, r5
		i--;
    43c6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    43ca:	f67f af4d 	bls.w	4268 <ticker_job+0x5bc>
		LL_ASSERT(i);
    43ce:	2e00      	cmp	r6, #0
    43d0:	d1dc      	bne.n	438c <ticker_job+0x6e0>
    43d2:	f640 0371 	movw	r3, #2161	; 0x871
    43d6:	4642      	mov	r2, r8
    43d8:	4649      	mov	r1, r9
    43da:	4650      	mov	r0, sl
    43dc:	f004 fec4 	bl	9168 <printk>
    43e0:	4040      	eors	r0, r0
    43e2:	f380 8811 	msr	BASEPRI, r0
    43e6:	f04f 0003 	mov.w	r0, #3
    43ea:	df02      	svc	2
    43ec:	e7ce      	b.n	438c <ticker_job+0x6e0>
	if (previous == current) {
    43ee:	4290      	cmp	r0, r2
    43f0:	d101      	bne.n	43f6 <ticker_job+0x74a>
		instance->ticker_id_head = ticker_current->next;
    43f2:	f884 b01d 	strb.w	fp, [r4, #29]
	node[previous].next = ticker_current->next;
    43f6:	b212      	sxth	r2, r2
    43f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    43fc:	0112      	lsls	r2, r2, #4
    43fe:	f809 b002 	strb.w	fp, [r9, r2]
	if (ticker_current->next != TICKER_NULL) {
    4402:	f89e 3000 	ldrb.w	r3, [lr]
    4406:	2bff      	cmp	r3, #255	; 0xff
    4408:	f43f ad0a 	beq.w	3e20 <ticker_job+0x174>
		node[ticker_current->next].ticks_to_expire += timeout;
    440c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4410:	eb09 1903 	add.w	r9, r9, r3, lsl #4
    4414:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4418:	4452      	add	r2, sl
    441a:	f8c9 2008 	str.w	r2, [r9, #8]
	return (total + timeout);
    441e:	e4ff      	b.n	3e20 <ticker_job+0x174>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    4420:	7f23      	ldrb	r3, [r4, #28]
    4422:	2bff      	cmp	r3, #255	; 0xff
    4424:	f47f ae8a 	bne.w	413c <ticker_job+0x490>
		window_start_ticks = 0U;
    4428:	2300      	movs	r3, #0
    442a:	e68d      	b.n	4148 <ticker_job+0x49c>
}
    442c:	b00f      	add	sp, #60	; 0x3c
    442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4432:	bf00      	nop
    4434:	0000c84c 	.word	0x0000c84c
    4438:	0000ca81 	.word	0x0000ca81
    443c:	0000c40b 	.word	0x0000c40b

00004440 <ticker_init>:
{
    4440:	b5f0      	push	{r4, r5, r6, r7, lr}
    4442:	9f05      	ldr	r7, [sp, #20]
    4444:	f89d e018 	ldrb.w	lr, [sp, #24]
    4448:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    444c:	4605      	mov	r5, r0
    444e:	b108      	cbz	r0, 4454 <ticker_init+0x14>
		return TICKER_STATUS_FAILURE;
    4450:	2001      	movs	r0, #1
}
    4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    4454:	4c19      	ldr	r4, [pc, #100]	; (44bc <ticker_init+0x7c>)
    4456:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    4458:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    445a:	3901      	subs	r1, #1
    445c:	b2c9      	uxtb	r1, r1
    445e:	29ff      	cmp	r1, #255	; 0xff
    4460:	d118      	bne.n	4494 <ticker_init+0x54>
	instance->count_user = count_user;
    4462:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    4464:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    4466:	2134      	movs	r1, #52	; 0x34
	while (count_user--) {
    4468:	3b01      	subs	r3, #1
    446a:	b2db      	uxtb	r3, r3
    446c:	2bff      	cmp	r3, #255	; 0xff
    446e:	d118      	bne.n	44a2 <ticker_init+0x62>
	if (count_op) {
    4470:	f1be 0f00 	cmp.w	lr, #0
    4474:	d1ec      	bne.n	4450 <ticker_init+0x10>
	instance->caller_id_get_cb = caller_id_get_cb;
    4476:	9b08      	ldr	r3, [sp, #32]
    4478:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    447a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    447c:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    447e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4480:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    4482:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    4486:	e9c4 ee05 	strd	lr, lr, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    448a:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    448c:	f8a4 e00a 	strh.w	lr, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    4490:	4670      	mov	r0, lr
    4492:	e7de      	b.n	4452 <ticker_init+0x12>
		instance->nodes[count_node].priority = 0;
    4494:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4498:	eb02 1606 	add.w	r6, r2, r6, lsl #4
    449c:	f886 502d 	strb.w	r5, [r6, #45]	; 0x2d
    44a0:	e7db      	b.n	445a <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
    44a2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    44a6:	f8c2 c004 	str.w	ip, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    44aa:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
    44ae:	fb02 cc01 	mla	ip, r2, r1, ip
		count_op -= users[count_user].count_user_op;
    44b2:	ebae 0202 	sub.w	r2, lr, r2
    44b6:	fa5f fe82 	uxtb.w	lr, r2
    44ba:	e7d5      	b.n	4468 <ticker_init+0x28>
    44bc:	20000864 	.word	0x20000864

000044c0 <ticker_trigger>:
	if (instance->sched_cb) {
    44c0:	4b07      	ldr	r3, [pc, #28]	; (44e0 <ticker_trigger+0x20>)
    44c2:	222c      	movs	r2, #44	; 0x2c
    44c4:	fb02 3100 	mla	r1, r2, r0, r3
{
    44c8:	b410      	push	{r4}
	if (instance->sched_cb) {
    44ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    44cc:	b134      	cbz	r4, 44dc <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    44ce:	460b      	mov	r3, r1
    44d0:	46a4      	mov	ip, r4
    44d2:	2201      	movs	r2, #1
}
    44d4:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    44d6:	2103      	movs	r1, #3
    44d8:	2002      	movs	r0, #2
    44da:	4760      	bx	ip
}
    44dc:	bc10      	pop	{r4}
    44de:	4770      	bx	lr
    44e0:	20000864 	.word	0x20000864

000044e4 <ticker_start_ext>:
{
    44e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44e8:	4605      	mov	r5, r0
    44ea:	4608      	mov	r0, r1
    44ec:	4611      	mov	r1, r2
    44ee:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
    44f0:	4b22      	ldr	r3, [pc, #136]	; (457c <ticker_start_ext+0x98>)
    44f2:	242c      	movs	r4, #44	; 0x2c
    44f4:	fb05 3904 	mla	r9, r5, r4, r3
	user = &instance->users[user_id];
    44f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    44fc:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    4500:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    4504:	f89c 7003 	ldrb.w	r7, [ip, #3]
    4508:	1c7e      	adds	r6, r7, #1
    450a:	b2f6      	uxtb	r6, r6
		last = 0U;
    450c:	42b3      	cmp	r3, r6
    450e:	bf98      	it	ls
    4510:	2600      	movls	r6, #0
	if (last == user->first) {
    4512:	f89c 3001 	ldrb.w	r3, [ip, #1]
    4516:	42b3      	cmp	r3, r6
    4518:	d02e      	beq.n	4578 <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
    451a:	2334      	movs	r3, #52	; 0x34
    451c:	fb17 f703 	smulbb	r7, r7, r3
    4520:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
    4524:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
    4528:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
    452a:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
    452e:	9b08      	ldr	r3, [sp, #32]
    4530:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    4532:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4534:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4538:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    453a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    453c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    453e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    4542:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
    4544:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4546:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    4548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    454a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    454c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    454e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4550:	2302      	movs	r3, #2
    4552:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    4554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4556:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    4558:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    455a:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    455c:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
    455e:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    4560:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4564:	e9d9 3608 	ldrd	r3, r6, [r9, #32]
    4568:	4798      	blx	r3
    456a:	464b      	mov	r3, r9
    456c:	2200      	movs	r2, #0
    456e:	4641      	mov	r1, r8
    4570:	47b0      	blx	r6
	return user_op->status;
    4572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    4574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    4578:	2001      	movs	r0, #1
    457a:	e7fb      	b.n	4574 <ticker_start_ext+0x90>
    457c:	20000864 	.word	0x20000864

00004580 <ticker_update>:
{
    4580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4584:	4605      	mov	r5, r0
    4586:	4608      	mov	r0, r1
    4588:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
    458a:	4b20      	ldr	r3, [pc, #128]	; (460c <ticker_update+0x8c>)
    458c:	242c      	movs	r4, #44	; 0x2c
    458e:	fb05 3804 	mla	r8, r5, r4, r3
	user = &instance->users[user_id];
    4592:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4596:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    459a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    459e:	f89c 7003 	ldrb.w	r7, [ip, #3]
    45a2:	1c7e      	adds	r6, r7, #1
    45a4:	b2f6      	uxtb	r6, r6
		last = 0U;
    45a6:	42b3      	cmp	r3, r6
    45a8:	bf98      	it	ls
    45aa:	2600      	movls	r6, #0
	if (last == user->first) {
    45ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
    45b0:	42b3      	cmp	r3, r6
    45b2:	d029      	beq.n	4608 <ticker_update+0x88>
	user_op = &user->user_op[user->last];
    45b4:	2334      	movs	r3, #52	; 0x34
    45b6:	fb17 f703 	smulbb	r7, r7, r3
    45ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    45be:	f04f 0e05 	mov.w	lr, #5
	user_op = &user->user_op[user->last];
    45c2:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    45c4:	f803 e007 	strb.w	lr, [r3, r7]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    45c8:	9b06      	ldr	r3, [sp, #24]
    45ca:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    45cc:	9b07      	ldr	r3, [sp, #28]
    45ce:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    45d0:	9b08      	ldr	r3, [sp, #32]
    45d2:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    45d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    45d8:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    45da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    45de:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    45e0:	2302      	movs	r3, #2
    45e2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    45e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    45e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    45ea:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    45ec:	6061      	str	r1, [r4, #4]
	user_op->op_context = op_context;
    45ee:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    45f0:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    45f4:	e9d8 3608 	ldrd	r3, r6, [r8, #32]
    45f8:	4798      	blx	r3
    45fa:	4643      	mov	r3, r8
    45fc:	2200      	movs	r2, #0
    45fe:	2104      	movs	r1, #4
    4600:	47b0      	blx	r6
	return user_op->status;
    4602:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    4604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    4608:	2001      	movs	r0, #1
    460a:	e7fb      	b.n	4604 <ticker_update+0x84>
    460c:	20000864 	.word	0x20000864

00004610 <ticker_stop>:
{
    4610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4614:	4604      	mov	r4, r0
    4616:	4608      	mov	r0, r1
    4618:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
    461a:	4b19      	ldr	r3, [pc, #100]	; (4680 <ticker_stop+0x70>)
    461c:	252c      	movs	r5, #44	; 0x2c
    461e:	fb04 3905 	mla	r9, r4, r5, r3
	user = &instance->users[user_id];
    4622:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4626:	eb03 07c0 	add.w	r7, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    462a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    462e:	78fe      	ldrb	r6, [r7, #3]
    4630:	1c75      	adds	r5, r6, #1
    4632:	b2ed      	uxtb	r5, r5
		last = 0U;
    4634:	42ab      	cmp	r3, r5
    4636:	bf98      	it	ls
    4638:	2500      	movls	r5, #0
	if (last == user->first) {
    463a:	787b      	ldrb	r3, [r7, #1]
    463c:	42ab      	cmp	r3, r5
    463e:	d01d      	beq.n	467c <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
    4640:	2334      	movs	r3, #52	; 0x34
    4642:	fb16 f603 	smulbb	r6, r6, r3
    4646:	687b      	ldr	r3, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4648:	f04f 0c06 	mov.w	ip, #6
    464c:	f803 c006 	strb.w	ip, [r3, r6]
	user_op = &user->user_op[user->last];
    4650:	eb03 0806 	add.w	r8, r3, r6
	user_op->status = TICKER_STATUS_BUSY;
    4654:	2302      	movs	r3, #2
	user_op->fp_op_func = fp_op_func;
    4656:	e9c8 310a 	strd	r3, r1, [r8, #40]	; 0x28
	user_op->op_context = op_context;
    465a:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
    465c:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    4660:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
    4664:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4666:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    466a:	4798      	blx	r3
    466c:	464b      	mov	r3, r9
    466e:	2200      	movs	r2, #0
    4670:	2104      	movs	r1, #4
    4672:	47a8      	blx	r5
	return user_op->status;
    4674:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    4678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    467c:	2001      	movs	r0, #1
    467e:	e7fb      	b.n	4678 <ticker_stop+0x68>
    4680:	20000864 	.word	0x20000864

00004684 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    4684:	b508      	push	{r3, lr}
    4686:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4688:	2b01      	cmp	r3, #1
{
    468a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    468c:	d80e      	bhi.n	46ac <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    468e:	b133      	cbz	r3, 469e <ll_addr_get+0x1a>
		if (bdaddr) {
    4690:	b119      	cbz	r1, 469a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    4692:	4907      	ldr	r1, [pc, #28]	; (46b0 <ll_addr_get+0x2c>)
    4694:	2206      	movs	r2, #6
    4696:	f005 fc4d 	bl	9f34 <memcpy>
		}

		return rnd_addr;
    469a:	4805      	ldr	r0, [pc, #20]	; (46b0 <ll_addr_get+0x2c>)
    469c:	e007      	b.n	46ae <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    469e:	b119      	cbz	r1, 46a8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    46a0:	4904      	ldr	r1, [pc, #16]	; (46b4 <ll_addr_get+0x30>)
    46a2:	2206      	movs	r2, #6
    46a4:	f005 fc46 	bl	9f34 <memcpy>
	}

	return pub_addr;
    46a8:	4802      	ldr	r0, [pc, #8]	; (46b4 <ll_addr_get+0x30>)
    46aa:	e000      	b.n	46ae <ll_addr_get+0x2a>
		return NULL;
    46ac:	2000      	movs	r0, #0
}
    46ae:	bd08      	pop	{r3, pc}
    46b0:	200018dd 	.word	0x200018dd
    46b4:	200018d7 	.word	0x200018d7

000046b8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    46b8:	b570      	push	{r4, r5, r6, lr}
    46ba:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    46bc:	2000      	movs	r0, #0
{
    46be:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    46c0:	f005 ffd6 	bl	a670 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    46c4:	4604      	mov	r4, r0
    46c6:	b948      	cbnz	r0, 46dc <ll_addr_set+0x24>
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    46c8:	2206      	movs	r2, #6
    46ca:	4629      	mov	r1, r5
	if (addr_type) {
    46cc:	b126      	cbz	r6, 46d8 <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    46ce:	4804      	ldr	r0, [pc, #16]	; (46e0 <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    46d0:	f005 fc30 	bl	9f34 <memcpy>
	}

	return 0;
}
    46d4:	4620      	mov	r0, r4
    46d6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    46d8:	4802      	ldr	r0, [pc, #8]	; (46e4 <ll_addr_set+0x2c>)
    46da:	e7f9      	b.n	46d0 <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    46dc:	240c      	movs	r4, #12
    46de:	e7f9      	b.n	46d4 <ll_addr_set+0x1c>
    46e0:	200018dd 	.word	0x200018dd
    46e4:	200018d7 	.word	0x200018d7

000046e8 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    46e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    46ea:	4802      	ldr	r0, [pc, #8]	; (46f4 <hci_driver_init+0xc>)
    46ec:	f7fe fc28 	bl	2f40 <bt_hci_driver_register>

	return 0;
}
    46f0:	2000      	movs	r0, #0
    46f2:	bd08      	pop	{r3, pc}
    46f4:	0000b9dc 	.word	0x0000b9dc

000046f8 <hci_driver_send>:
	if (!buf->len) {
    46f8:	8983      	ldrh	r3, [r0, #12]
{
    46fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46fc:	4604      	mov	r4, r0
	if (!buf->len) {
    46fe:	b963      	cbnz	r3, 471a <hci_driver_send+0x22>
    4700:	4918      	ldr	r1, [pc, #96]	; (4764 <hci_driver_send+0x6c>)
    4702:	4b19      	ldr	r3, [pc, #100]	; (4768 <hci_driver_send+0x70>)
		BT_ERR("Empty HCI packet");
    4704:	4819      	ldr	r0, [pc, #100]	; (476c <hci_driver_send+0x74>)
    4706:	1ac9      	subs	r1, r1, r3
    4708:	08c9      	lsrs	r1, r1, #3
    470a:	0189      	lsls	r1, r1, #6
    470c:	f041 0101 	orr.w	r1, r1, #1
    4710:	f005 f80a 	bl	9728 <log_0>
		return -EINVAL;
    4714:	f06f 0015 	mvn.w	r0, #21
    4718:	e016      	b.n	4748 <hci_driver_send+0x50>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    471a:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    471c:	b9b1      	cbnz	r1, 474c <hci_driver_send+0x54>
	struct node_rx_pdu *node_rx = NULL;
    471e:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    4720:	a901      	add	r1, sp, #4
    4722:	f000 f995 	bl	4a50 <hci_cmd_handle>
	if (evt) {
    4726:	b158      	cbz	r0, 4740 <hci_driver_send+0x48>
		bt_recv_prio(evt);
    4728:	f7fe fbba 	bl	2ea0 <bt_recv_prio>
		if (node_rx) {
    472c:	9d01      	ldr	r5, [sp, #4]
    472e:	b13d      	cbz	r5, 4740 <hci_driver_send+0x48>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    4730:	4628      	mov	r0, r5
    4732:	f005 ff8f 	bl	a654 <hci_get_class>
			k_fifo_put(&recv_fifo, node_rx);
    4736:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    4738:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    473a:	480d      	ldr	r0, [pc, #52]	; (4770 <hci_driver_send+0x78>)
    473c:	f006 fbb3 	bl	aea6 <k_queue_append>
		net_buf_unref(buf);
    4740:	4620      	mov	r0, r4
    4742:	f002 fcdf 	bl	7104 <net_buf_unref>
	return err;
    4746:	2000      	movs	r0, #0
}
    4748:	b003      	add	sp, #12
    474a:	bd30      	pop	{r4, r5, pc}
    474c:	4b06      	ldr	r3, [pc, #24]	; (4768 <hci_driver_send+0x70>)
    474e:	4a05      	ldr	r2, [pc, #20]	; (4764 <hci_driver_send+0x6c>)
		BT_ERR("Unknown HCI type %u", type);
    4750:	4808      	ldr	r0, [pc, #32]	; (4774 <hci_driver_send+0x7c>)
    4752:	1ad2      	subs	r2, r2, r3
    4754:	08d2      	lsrs	r2, r2, #3
    4756:	0192      	lsls	r2, r2, #6
    4758:	f042 0201 	orr.w	r2, r2, #1
    475c:	f004 fff1 	bl	9742 <log_1>
    4760:	e7d8      	b.n	4714 <hci_driver_send+0x1c>
    4762:	bf00      	nop
    4764:	0000b780 	.word	0x0000b780
    4768:	0000b750 	.word	0x0000b750
    476c:	0000c8d3 	.word	0x0000c8d3
    4770:	2000040c 	.word	0x2000040c
    4774:	0000c8e4 	.word	0x0000c8e4

00004778 <prio_recv_thread>:
{
    4778:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
    477a:	4d0f      	ldr	r5, [pc, #60]	; (47b8 <prio_recv_thread+0x40>)
				k_fifo_put(&recv_fifo, node_rx);
    477c:	4e0f      	ldr	r6, [pc, #60]	; (47bc <prio_recv_thread+0x44>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    477e:	f10d 0102 	add.w	r1, sp, #2
    4782:	a801      	add	r0, sp, #4
    4784:	f000 fcfe 	bl	5184 <ll_rx_get>
    4788:	2800      	cmp	r0, #0
    478a:	d1f8      	bne.n	477e <prio_recv_thread+0x6>
		if (node_rx) {
    478c:	9b01      	ldr	r3, [sp, #4]
    478e:	b15b      	cbz	r3, 47a8 <prio_recv_thread+0x30>
			ll_rx_dequeue();
    4790:	f000 fd0a 	bl	51a8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    4794:	9c01      	ldr	r4, [sp, #4]
    4796:	4620      	mov	r0, r4
    4798:	f005 ff5c 	bl	a654 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
    479c:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    479e:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
    47a0:	4630      	mov	r0, r6
    47a2:	f006 fb80 	bl	aea6 <k_queue_append>
			continue;
    47a6:	e7ea      	b.n	477e <prio_recv_thread+0x6>
    47a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    47ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47b0:	4628      	mov	r0, r5
    47b2:	f004 f991 	bl	8ad8 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    47b6:	e7e2      	b.n	477e <prio_recv_thread+0x6>
    47b8:	200003cc 	.word	0x200003cc
    47bc:	2000040c 	.word	0x2000040c

000047c0 <recv_thread>:
{
    47c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    47c2:	4d23      	ldr	r5, [pc, #140]	; (4850 <recv_thread+0x90>)
		LL_ASSERT(0);
    47c4:	4e23      	ldr	r6, [pc, #140]	; (4854 <recv_thread+0x94>)
    47c6:	4f24      	ldr	r7, [pc, #144]	; (4858 <recv_thread+0x98>)
    47c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    47cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47d0:	4628      	mov	r0, r5
    47d2:	f003 fdd7 	bl	8384 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    47d6:	b1f8      	cbz	r0, 4818 <recv_thread+0x58>
	buf = encode_node(node_rx, class);
    47d8:	f990 3005 	ldrsb.w	r3, [r0, #5]
    47dc:	9001      	str	r0, [sp, #4]
	switch (class) {
    47de:	1e5a      	subs	r2, r3, #1
    47e0:	2a03      	cmp	r2, #3
    47e2:	d824      	bhi.n	482e <recv_thread+0x6e>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    47e4:	2b02      	cmp	r3, #2
    47e6:	d11a      	bne.n	481e <recv_thread+0x5e>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    47e8:	2200      	movs	r2, #0
    47ea:	2300      	movs	r3, #0
    47ec:	2101      	movs	r1, #1
    47ee:	2000      	movs	r0, #0
    47f0:	f7ff f904 	bl	39fc <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    47f4:	4604      	mov	r4, r0
		if (buf) {
    47f6:	b118      	cbz	r0, 4800 <recv_thread+0x40>
			hci_evt_encode(node_rx, buf);
    47f8:	4601      	mov	r1, r0
    47fa:	9801      	ldr	r0, [sp, #4]
    47fc:	f000 faf2 	bl	4de4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    4800:	9b01      	ldr	r3, [sp, #4]
    4802:	2200      	movs	r2, #0
    4804:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4806:	a801      	add	r0, sp, #4
    4808:	f000 fd0e 	bl	5228 <ll_rx_mem_release>
		if (buf) {
    480c:	b124      	cbz	r4, 4818 <recv_thread+0x58>
			if (buf->len) {
    480e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    4810:	4620      	mov	r0, r4
			if (buf->len) {
    4812:	b1d3      	cbz	r3, 484a <recv_thread+0x8a>
				bt_recv(buf);
    4814:	f7fe faec 	bl	2df0 <bt_recv>
	z_impl_k_yield();
    4818:	f004 f8c4 	bl	89a4 <z_impl_k_yield>
	while (1) {
    481c:	e7d4      	b.n	47c8 <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    481e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4826:	2001      	movs	r0, #1
    4828:	f7ff f8b2 	bl	3990 <bt_buf_get_rx>
    482c:	e7e2      	b.n	47f4 <recv_thread+0x34>
		LL_ASSERT(0);
    482e:	480b      	ldr	r0, [pc, #44]	; (485c <recv_thread+0x9c>)
    4830:	23b4      	movs	r3, #180	; 0xb4
    4832:	4632      	mov	r2, r6
    4834:	4639      	mov	r1, r7
    4836:	f004 fc97 	bl	9168 <printk>
    483a:	4040      	eors	r0, r0
    483c:	f380 8811 	msr	BASEPRI, r0
    4840:	f04f 0003 	mov.w	r0, #3
    4844:	df02      	svc	2
	struct net_buf *buf = NULL;
    4846:	2400      	movs	r4, #0
		break;
    4848:	e7da      	b.n	4800 <recv_thread+0x40>
				net_buf_unref(buf);
    484a:	f002 fc5b 	bl	7104 <net_buf_unref>
    484e:	e7e3      	b.n	4818 <recv_thread+0x58>
    4850:	2000040c 	.word	0x2000040c
    4854:	0000c8f8 	.word	0x0000c8f8
    4858:	0000d151 	.word	0x0000d151
    485c:	0000c40b 	.word	0x0000c40b

00004860 <hci_driver_open>:
{
    4860:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    4862:	4820      	ldr	r0, [pc, #128]	; (48e4 <hci_driver_open+0x84>)
{
    4864:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    4866:	f000 fbcf 	bl	5008 <ll_init>
	if (err) {
    486a:	4604      	mov	r4, r0
    486c:	b168      	cbz	r0, 488a <hci_driver_open+0x2a>
    486e:	4a1e      	ldr	r2, [pc, #120]	; (48e8 <hci_driver_open+0x88>)
    4870:	4b1e      	ldr	r3, [pc, #120]	; (48ec <hci_driver_open+0x8c>)
    4872:	1ad2      	subs	r2, r2, r3
    4874:	08d2      	lsrs	r2, r2, #3
		BT_ERR("LL initialization failed: %d", err);
    4876:	0192      	lsls	r2, r2, #6
    4878:	4601      	mov	r1, r0
    487a:	f042 0201 	orr.w	r2, r2, #1
    487e:	481c      	ldr	r0, [pc, #112]	; (48f0 <hci_driver_open+0x90>)
    4880:	f004 ff5f 	bl	9742 <log_1>
}
    4884:	4620      	mov	r0, r4
    4886:	b008      	add	sp, #32
    4888:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
    488a:	f005 fee5 	bl	a658 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    488e:	2600      	movs	r6, #0
    4890:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4892:	f06f 0309 	mvn.w	r3, #9
    4896:	e9cd 4302 	strd	r4, r3, [sp, #8]
    489a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    489e:	e9cd 4400 	strd	r4, r4, [sp]
    48a2:	4b14      	ldr	r3, [pc, #80]	; (48f4 <hci_driver_open+0x94>)
    48a4:	4914      	ldr	r1, [pc, #80]	; (48f8 <hci_driver_open+0x98>)
    48a6:	9404      	str	r4, [sp, #16]
    48a8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    48ac:	4813      	ldr	r0, [pc, #76]	; (48fc <hci_driver_open+0x9c>)
    48ae:	f004 f97b 	bl	8ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    48b2:	4913      	ldr	r1, [pc, #76]	; (4900 <hci_driver_open+0xa0>)
    48b4:	4811      	ldr	r0, [pc, #68]	; (48fc <hci_driver_open+0x9c>)
    48b6:	f006 fc81 	bl	b1bc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    48ba:	f06f 0307 	mvn.w	r3, #7
    48be:	e9cd 4302 	strd	r4, r3, [sp, #8]
    48c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    48c6:	e9cd 4400 	strd	r4, r4, [sp]
    48ca:	4b0e      	ldr	r3, [pc, #56]	; (4904 <hci_driver_open+0xa4>)
    48cc:	490e      	ldr	r1, [pc, #56]	; (4908 <hci_driver_open+0xa8>)
    48ce:	9404      	str	r4, [sp, #16]
    48d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    48d4:	480d      	ldr	r0, [pc, #52]	; (490c <hci_driver_open+0xac>)
    48d6:	f004 f967 	bl	8ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    48da:	490d      	ldr	r1, [pc, #52]	; (4910 <hci_driver_open+0xb0>)
    48dc:	480b      	ldr	r0, [pc, #44]	; (490c <hci_driver_open+0xac>)
    48de:	f006 fc6d 	bl	b1bc <z_impl_k_thread_name_set>
	return 0;
    48e2:	e7cf      	b.n	4884 <hci_driver_open+0x24>
    48e4:	200003cc 	.word	0x200003cc
    48e8:	0000b780 	.word	0x0000b780
    48ec:	0000b750 	.word	0x0000b750
    48f0:	0000c971 	.word	0x0000c971
    48f4:	00004779 	.word	0x00004779
    48f8:	20001ea0 	.word	0x20001ea0
    48fc:	20000890 	.word	0x20000890
    4900:	0000c98e 	.word	0x0000c98e
    4904:	000047c1 	.word	0x000047c1
    4908:	20002060 	.word	0x20002060
    490c:	20000904 	.word	0x20000904
    4910:	0000c998 	.word	0x0000c998

00004914 <hci_cmd_complete>:

	return buf;
}

void *hci_cmd_complete(struct net_buf **buf, u8_t plen)
{
    4914:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    4916:	4b06      	ldr	r3, [pc, #24]	; (4930 <hci_cmd_complete+0x1c>)
{
    4918:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    491a:	8818      	ldrh	r0, [r3, #0]
{
    491c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    491e:	f005 fe75 	bl	a60c <bt_hci_cmd_complete_create>

	return net_buf_add(*buf, plen);
    4922:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    4924:	6028      	str	r0, [r5, #0]
}
    4926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    492a:	3008      	adds	r0, #8
    492c:	f006 b83d 	b.w	a9aa <net_buf_simple_add>
    4930:	2000140c 	.word	0x2000140c

00004934 <hci_vendor_cmd_handle_common>:
}
#endif /* CONFIG_BT_HCI_MESH_EXT */

int hci_vendor_cmd_handle_common(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
    4934:	b5f0      	push	{r4, r5, r6, r7, lr}
    4936:	3801      	subs	r0, #1
    4938:	b087      	sub	sp, #28
    493a:	4614      	mov	r4, r2
    493c:	2809      	cmp	r0, #9
    493e:	f200 8081 	bhi.w	4a44 <hci_vendor_cmd_handle_common+0x110>
    4942:	e8df f000 	tbb	[pc, r0]
    4946:	1b05      	.short	0x1b05
    4948:	5b7f7f32 	.word	0x5b7f7f32
    494c:	73663e7f 	.word	0x73663e7f
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4950:	210d      	movs	r1, #13
    4952:	4610      	mov	r0, r2
    4954:	f7ff ffde 	bl	4914 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    4958:	2302      	movs	r3, #2
	rp->status = 0x00;
    495a:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    495c:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    495e:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    4960:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    4962:	2303      	movs	r3, #3
	rp->status = 0x00;
    4964:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    4966:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    4968:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    496a:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    496c:	71c3      	strb	r3, [r0, #7]
    496e:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    4970:	7241      	strb	r1, [r0, #9]
    4972:	7281      	strb	r1, [r0, #10]
    4974:	72c1      	strb	r1, [r0, #11]
    4976:	7301      	strb	r1, [r0, #12]
#endif /* CONFIG_BT_CTLR_ENABLE_ADV_SCAN_OOB_FREQ */
	default:
		return -EINVAL;
	}

	return 0;
    4978:	460c      	mov	r4, r1
}
    497a:	e013      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    497c:	2141      	movs	r1, #65	; 0x41
    497e:	4610      	mov	r0, r2
    4980:	f7ff ffc8 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4984:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4986:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    4988:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    498a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    498e:	4621      	mov	r1, r4
    4990:	f005 fafb 	bl	9f8a <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4994:	786b      	ldrb	r3, [r5, #1]
    4996:	f063 0358 	orn	r3, r3, #88	; 0x58
    499a:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    499c:	78ab      	ldrb	r3, [r5, #2]
    499e:	f043 0303 	orr.w	r3, r3, #3
    49a2:	70ab      	strb	r3, [r5, #2]
}
    49a4:	4620      	mov	r0, r4
    49a6:	b007      	add	sp, #28
    49a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    49aa:	2109      	movs	r1, #9
    49ac:	4610      	mov	r0, r2
    49ae:	f7ff ffb1 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    49b2:	2400      	movs	r4, #0
    49b4:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    49b8:	2208      	movs	r2, #8
    49ba:	4621      	mov	r1, r4
    49bc:	f005 fae5 	bl	9f8a <memset>
}
    49c0:	e7f0      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
	const char build_info[] = HCI_VS_BUILD_INFO;
    49c2:	4b22      	ldr	r3, [pc, #136]	; (4a4c <hci_vendor_cmd_handle_common+0x118>)
    49c4:	466a      	mov	r2, sp
    49c6:	f103 0710 	add.w	r7, r3, #16
    49ca:	4616      	mov	r6, r2
    49cc:	6818      	ldr	r0, [r3, #0]
    49ce:	6859      	ldr	r1, [r3, #4]
    49d0:	4615      	mov	r5, r2
    49d2:	c503      	stmia	r5!, {r0, r1}
    49d4:	3308      	adds	r3, #8
    49d6:	42bb      	cmp	r3, r7
    49d8:	462a      	mov	r2, r5
    49da:	d1f7      	bne.n	49cc <hci_vendor_cmd_handle_common+0x98>
    49dc:	6818      	ldr	r0, [r3, #0]
    49de:	791b      	ldrb	r3, [r3, #4]
    49e0:	6028      	str	r0, [r5, #0]
    49e2:	712b      	strb	r3, [r5, #4]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    49e4:	2116      	movs	r1, #22
    49e6:	4620      	mov	r0, r4
    49e8:	f7ff ff94 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    49ec:	2400      	movs	r4, #0
    49ee:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    49f2:	2215      	movs	r2, #21
    49f4:	4631      	mov	r1, r6
    49f6:	f005 fa9d 	bl	9f34 <memcpy>
}
    49fa:	e7d3      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    49fc:	6889      	ldr	r1, [r1, #8]
    49fe:	2000      	movs	r0, #0
    4a00:	f7ff fe5a 	bl	46b8 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4a04:	2101      	movs	r1, #1
    4a06:	4620      	mov	r0, r4
    4a08:	f7ff ff84 	bl	4914 <hci_cmd_complete>
	ccst->status = 0x00;
    4a0c:	2100      	movs	r1, #0
    4a0e:	7001      	strb	r1, [r0, #0]
    4a10:	e7b2      	b.n	4978 <hci_vendor_cmd_handle_common+0x44>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    4a12:	2118      	movs	r1, #24
    4a14:	4610      	mov	r0, r2
    4a16:	f7ff ff7d 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4a1a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    4a1c:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    4a1e:	2101      	movs	r1, #1
	rp->status = 0x00;
    4a20:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    4a24:	f005 feff 	bl	a826 <hci_vendor_read_static_addr>
    4a28:	7068      	strb	r0, [r5, #1]
}
    4a2a:	e7bb      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4a2c:	2121      	movs	r1, #33	; 0x21
    4a2e:	4610      	mov	r0, r2
    4a30:	f7ff ff70 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4a34:	4601      	mov	r1, r0
    4a36:	2400      	movs	r4, #0
    4a38:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    4a3c:	3001      	adds	r0, #1
    4a3e:	f005 ff48 	bl	a8d2 <hci_vendor_read_key_hierarchy_roots>
}
    4a42:	e7af      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
	return 0;
    4a44:	f06f 0415 	mvn.w	r4, #21
    4a48:	e7ac      	b.n	49a4 <hci_vendor_cmd_handle_common+0x70>
    4a4a:	bf00      	nop
    4a4c:	0000c9bc 	.word	0x0000c9bc

00004a50 <hci_cmd_handle>:
#endif

struct net_buf *hci_cmd_handle(struct net_buf *cmd, void **node_rx)
{
    4a50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    4a52:	8983      	ldrh	r3, [r0, #12]
{
    4a54:	b08a      	sub	sp, #40	; 0x28
	struct net_buf *evt = NULL;
    4a56:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    4a58:	2b02      	cmp	r3, #2
{
    4a5a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    4a5c:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
    4a5e:	d80c      	bhi.n	4a7a <hci_cmd_handle+0x2a>
    4a60:	49ce      	ldr	r1, [pc, #824]	; (4d9c <hci_cmd_handle+0x34c>)
    4a62:	4bcf      	ldr	r3, [pc, #828]	; (4da0 <hci_cmd_handle+0x350>)
		BT_ERR("No HCI Command header");
    4a64:	48cf      	ldr	r0, [pc, #828]	; (4da4 <hci_cmd_handle+0x354>)
    4a66:	1ac9      	subs	r1, r1, r3
    4a68:	08c9      	lsrs	r1, r1, #3
    4a6a:	0189      	lsls	r1, r1, #6
    4a6c:	f041 0101 	orr.w	r1, r1, #1
		return NULL;
	}

	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
	if (cmd->len < chdr->param_len) {
		BT_ERR("Invalid HCI CMD packet length");
    4a70:	f004 fe5a 	bl	9728 <log_0>
		return NULL;
    4a74:	4628      	mov	r0, r5
	if (err == -EINVAL) {
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
	}

	return evt;
}
    4a76:	b00a      	add	sp, #40	; 0x28
    4a78:	bd70      	pop	{r4, r5, r6, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    4a7a:	2103      	movs	r1, #3
    4a7c:	3008      	adds	r0, #8
    4a7e:	f005 ffab 	bl	a9d8 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    4a82:	89a2      	ldrh	r2, [r4, #12]
    4a84:	7883      	ldrb	r3, [r0, #2]
    4a86:	429a      	cmp	r2, r3
    4a88:	d208      	bcs.n	4a9c <hci_cmd_handle+0x4c>
    4a8a:	49c4      	ldr	r1, [pc, #784]	; (4d9c <hci_cmd_handle+0x34c>)
    4a8c:	4bc4      	ldr	r3, [pc, #784]	; (4da0 <hci_cmd_handle+0x350>)
		BT_ERR("Invalid HCI CMD packet length");
    4a8e:	48c6      	ldr	r0, [pc, #792]	; (4da8 <hci_cmd_handle+0x358>)
    4a90:	1ac9      	subs	r1, r1, r3
    4a92:	08c9      	lsrs	r1, r1, #3
    4a94:	0189      	lsls	r1, r1, #6
    4a96:	f041 0101 	orr.w	r1, r1, #1
    4a9a:	e7e9      	b.n	4a70 <hci_cmd_handle+0x20>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4a9c:	8803      	ldrh	r3, [r0, #0]
    4a9e:	4ec3      	ldr	r6, [pc, #780]	; (4dac <hci_cmd_handle+0x35c>)
	ocf = BT_OCF(_opcode);
    4aa0:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4aa4:	8033      	strh	r3, [r6, #0]
	switch (BT_OGF(_opcode)) {
    4aa6:	0a9b      	lsrs	r3, r3, #10
    4aa8:	2b08      	cmp	r3, #8
    4aaa:	f000 80a1 	beq.w	4bf0 <hci_cmd_handle+0x1a0>
    4aae:	d809      	bhi.n	4ac4 <hci_cmd_handle+0x74>
    4ab0:	2b03      	cmp	r3, #3
    4ab2:	d010      	beq.n	4ad6 <hci_cmd_handle+0x86>
    4ab4:	2b04      	cmp	r3, #4
    4ab6:	d01e      	beq.n	4af6 <hci_cmd_handle+0xa6>
	return bt_hci_cmd_status_create(_opcode, status);
    4ab8:	8830      	ldrh	r0, [r6, #0]
    4aba:	2101      	movs	r1, #1
    4abc:	f005 fdb8 	bl	a630 <bt_hci_cmd_status_create>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    4ac0:	9005      	str	r0, [sp, #20]
    4ac2:	e013      	b.n	4aec <hci_cmd_handle+0x9c>
	switch (BT_OGF(_opcode)) {
    4ac4:	2b3f      	cmp	r3, #63	; 0x3f
    4ac6:	d1f7      	bne.n	4ab8 <hci_cmd_handle+0x68>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    4ac8:	aa05      	add	r2, sp, #20
    4aca:	4621      	mov	r1, r4
    4acc:	f7ff ff32 	bl	4934 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    4ad0:	3016      	adds	r0, #22
    4ad2:	d0f1      	beq.n	4ab8 <hci_cmd_handle+0x68>
    4ad4:	e00a      	b.n	4aec <hci_cmd_handle+0x9c>
	switch (ocf) {
    4ad6:	2803      	cmp	r0, #3
    4ad8:	d00a      	beq.n	4af0 <hci_cmd_handle+0xa0>
    4ada:	2863      	cmp	r0, #99	; 0x63
    4adc:	d001      	beq.n	4ae2 <hci_cmd_handle+0x92>
    4ade:	2801      	cmp	r0, #1
    4ae0:	d1ea      	bne.n	4ab8 <hci_cmd_handle+0x68>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4ae2:	2101      	movs	r1, #1
    4ae4:	a805      	add	r0, sp, #20
    4ae6:	f7ff ff15 	bl	4914 <hci_cmd_complete>
	ccst->status = 0x00;
    4aea:	7005      	strb	r5, [r0, #0]
	return evt;
    4aec:	9805      	ldr	r0, [sp, #20]
    4aee:	e7c2      	b.n	4a76 <hci_cmd_handle+0x26>
		ll_reset();
    4af0:	f000 fae8 	bl	50c4 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4af4:	e7f5      	b.n	4ae2 <hci_cmd_handle+0x92>
	switch (ocf) {
    4af6:	3801      	subs	r0, #1
    4af8:	2808      	cmp	r0, #8
    4afa:	d8dd      	bhi.n	4ab8 <hci_cmd_handle+0x68>
    4afc:	a301      	add	r3, pc, #4	; (adr r3, 4b04 <hci_cmd_handle+0xb4>)
    4afe:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    4b02:	bf00      	nop
    4b04:	00004b29 	.word	0x00004b29
    4b08:	00004b53 	.word	0x00004b53
    4b0c:	00004bbf 	.word	0x00004bbf
    4b10:	00004ab9 	.word	0x00004ab9
    4b14:	00004ab9 	.word	0x00004ab9
    4b18:	00004ab9 	.word	0x00004ab9
    4b1c:	00004ab9 	.word	0x00004ab9
    4b20:	00004ab9 	.word	0x00004ab9
    4b24:	00004bdb 	.word	0x00004bdb
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4b28:	2109      	movs	r1, #9
    4b2a:	a805      	add	r0, sp, #20
    4b2c:	f7ff fef2 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4b30:	2300      	movs	r3, #0
    4b32:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4b34:	7083      	strb	r3, [r0, #2]
    4b36:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    4b38:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
    4b3c:	220b      	movs	r2, #11
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    4b3e:	7143      	strb	r3, [r0, #5]
    4b40:	2305      	movs	r3, #5
    4b42:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
    4b44:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    4b46:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    4b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
    4b4c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    4b4e:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    4b50:	e7cc      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4b52:	2141      	movs	r1, #65	; 0x41
    4b54:	a805      	add	r0, sp, #20
    4b56:	f7ff fedd 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4b5a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4b5c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    4b5e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4b60:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    4b64:	f005 fa11 	bl	9f8a <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    4b68:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[27] |= BIT(6) | BIT(7);
    4b6a:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    4b6c:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    4b6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4b72:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    4b74:	7ae3      	ldrb	r3, [r4, #11]
    4b76:	f043 0304 	orr.w	r3, r3, #4
    4b7a:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    4b7c:	7be3      	ldrb	r3, [r4, #15]
    4b7e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    4b82:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    4b84:	7c23      	ldrb	r3, [r4, #16]
    4b86:	f043 0302 	orr.w	r3, r3, #2
    4b8a:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    4b8c:	7de3      	ldrb	r3, [r4, #23]
    4b8e:	f043 0304 	orr.w	r3, r3, #4
    4b92:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    4b94:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    4b96:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    4b9a:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    4b9e:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    4ba0:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    4ba2:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    4ba4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    4ba8:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4bac:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    4bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    4bb4:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4bb6:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    4bb8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    4bbc:	e796      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4bbe:	2109      	movs	r1, #9
    4bc0:	a805      	add	r0, sp, #20
    4bc2:	f7ff fea7 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4bc6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4bc8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    4bca:	2208      	movs	r2, #8
	rp->status = 0x00;
    4bcc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    4bd0:	f005 f9db 	bl	9f8a <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4bd4:	2360      	movs	r3, #96	; 0x60
    4bd6:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    4bd8:	e788      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4bda:	2107      	movs	r1, #7
    4bdc:	a805      	add	r0, sp, #20
    4bde:	f7ff fe99 	bl	4914 <hci_cmd_complete>
    4be2:	4601      	mov	r1, r0
	rp->status = 0x00;
    4be4:	2000      	movs	r0, #0
    4be6:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    4bea:	f7ff fd4b 	bl	4684 <ll_addr_get>
	if (err == -EINVAL) {
    4bee:	e77d      	b.n	4aec <hci_cmd_handle+0x9c>
	switch (ocf) {
    4bf0:	281c      	cmp	r0, #28
    4bf2:	d841      	bhi.n	4c78 <hci_cmd_handle+0x228>
    4bf4:	2800      	cmp	r0, #0
    4bf6:	f43f af5f 	beq.w	4ab8 <hci_cmd_handle+0x68>
    4bfa:	1e43      	subs	r3, r0, #1
    4bfc:	2b1b      	cmp	r3, #27
    4bfe:	f63f af5b 	bhi.w	4ab8 <hci_cmd_handle+0x68>
    4c02:	a201      	add	r2, pc, #4	; (adr r2, 4c08 <hci_cmd_handle+0x1b8>)
    4c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4c08:	00004c95 	.word	0x00004c95
    4c0c:	00004ca3 	.word	0x00004ca3
    4c10:	00004cbb 	.word	0x00004cbb
    4c14:	00004ab9 	.word	0x00004ab9
    4c18:	00004cdb 	.word	0x00004cdb
    4c1c:	00004d81 	.word	0x00004d81
    4c20:	00004db1 	.word	0x00004db1
    4c24:	00004dc1 	.word	0x00004dc1
    4c28:	00004dcd 	.word	0x00004dcd
    4c2c:	00004dd9 	.word	0x00004dd9
    4c30:	00004ab9 	.word	0x00004ab9
    4c34:	00004ab9 	.word	0x00004ab9
    4c38:	00004ab9 	.word	0x00004ab9
    4c3c:	00004ab9 	.word	0x00004ab9
    4c40:	00004cf1 	.word	0x00004cf1
    4c44:	00004d07 	.word	0x00004d07
    4c48:	00004d19 	.word	0x00004d19
    4c4c:	00004d21 	.word	0x00004d21
    4c50:	00004ab9 	.word	0x00004ab9
    4c54:	00004ab9 	.word	0x00004ab9
    4c58:	00004ab9 	.word	0x00004ab9
    4c5c:	00004ab9 	.word	0x00004ab9
    4c60:	00004d29 	.word	0x00004d29
    4c64:	00004d4f 	.word	0x00004d4f
    4c68:	00004ab9 	.word	0x00004ab9
    4c6c:	00004ab9 	.word	0x00004ab9
    4c70:	00004ab9 	.word	0x00004ab9
    4c74:	00004d65 	.word	0x00004d65
    4c78:	284b      	cmp	r0, #75	; 0x4b
    4c7a:	f47f af1d 	bne.w	4ab8 <hci_cmd_handle+0x68>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4c7e:	2103      	movs	r1, #3
    4c80:	a805      	add	r0, sp, #20
    4c82:	f7ff fe47 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4c86:	4601      	mov	r1, r0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4c88:	3001      	adds	r0, #1
	rp->status = 0x00;
    4c8a:	f801 5b02 	strb.w	r5, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4c8e:	f005 fc9e 	bl	a5ce <ll_tx_pwr_get>
	if (err == -EINVAL) {
    4c92:	e72b      	b.n	4aec <hci_cmd_handle+0x9c>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4c94:	2101      	movs	r1, #1
    4c96:	a805      	add	r0, sp, #20
    4c98:	f7ff fe3c 	bl	4914 <hci_cmd_complete>
	ccst->status = 0x00;
    4c9c:	2300      	movs	r3, #0
    4c9e:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    4ca0:	e724      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4ca2:	2104      	movs	r1, #4
    4ca4:	a805      	add	r0, sp, #20
    4ca6:	f7ff fe35 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4caa:	2300      	movs	r3, #0
    4cac:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    4cae:	221b      	movs	r2, #27
    4cb0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    4cb2:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    4cb4:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    4cb6:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
    4cb8:	e718      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4cba:	2109      	movs	r1, #9
    4cbc:	a805      	add	r0, sp, #20
    4cbe:	f7ff fe29 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4cc2:	2500      	movs	r5, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4cc4:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    4cc6:	2208      	movs	r2, #8
	rp->status = 0x00;
    4cc8:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    4ccc:	4629      	mov	r1, r5
    4cce:	f005 f95c 	bl	9f8a <memset>
	dst[0] = val;
    4cd2:	7065      	strb	r5, [r4, #1]
	dst[1] = val >> 8;
    4cd4:	70a5      	strb	r5, [r4, #2]
	dst[2] = val >> 16;
    4cd6:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
    4cd8:	e708      	b.n	4aec <hci_cmd_handle+0x9c>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    4cda:	68a1      	ldr	r1, [r4, #8]
    4cdc:	2001      	movs	r0, #1
    4cde:	f7ff fceb 	bl	46b8 <ll_addr_set>
	status = ll_adv_enable(cmd->enable);
    4ce2:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4ce4:	2101      	movs	r1, #1
    4ce6:	a805      	add	r0, sp, #20
    4ce8:	f7ff fe14 	bl	4914 <hci_cmd_complete>
	ccst->status = status;
    4cec:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
    4cee:	e6fd      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4cf0:	2102      	movs	r1, #2
    4cf2:	a805      	add	r0, sp, #20
    4cf4:	f7ff fe0e 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4cf8:	2300      	movs	r3, #0
    4cfa:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4cfc:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    4cfe:	f005 fcc6 	bl	a68e <ll_wl_size_get>
    4d02:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    4d04:	e6f2      	b.n	4aec <hci_cmd_handle+0x9c>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    4d06:	2101      	movs	r1, #1
    4d08:	a805      	add	r0, sp, #20
    4d0a:	f7ff fe03 	bl	4914 <hci_cmd_complete>
    4d0e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    4d10:	f000 fefc 	bl	5b0c <ll_wl_clear>
    4d14:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    4d16:	e6e9      	b.n	4aec <hci_cmd_handle+0x9c>
	status = ll_wl_add(&cmd->addr);
    4d18:	68a0      	ldr	r0, [r4, #8]
    4d1a:	f000 ff09 	bl	5b30 <ll_wl_add>
    4d1e:	e7e0      	b.n	4ce2 <hci_cmd_handle+0x292>
	status = ll_wl_remove(&cmd->addr);
    4d20:	68a0      	ldr	r0, [r4, #8]
    4d22:	f000 ff39 	bl	5b98 <ll_wl_remove>
    4d26:	e7dc      	b.n	4ce2 <hci_cmd_handle+0x292>
		le_encrypt(cmd, evt);
    4d28:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    4d2a:	aa06      	add	r2, sp, #24
    4d2c:	2300      	movs	r3, #0
    4d2e:	f100 0110 	add.w	r1, r0, #16
    4d32:	f005 fd2a 	bl	a78a <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4d36:	2111      	movs	r1, #17
    4d38:	a805      	add	r0, sp, #20
    4d3a:	f7ff fdeb 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4d3e:	2300      	movs	r3, #0
    4d40:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    4d44:	2210      	movs	r2, #16
    4d46:	a906      	add	r1, sp, #24
    4d48:	f005 f8f4 	bl	9f34 <memcpy>
	if (err == -EINVAL) {
    4d4c:	e6ce      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4d4e:	2109      	movs	r1, #9
    4d50:	a805      	add	r0, sp, #20
    4d52:	f7ff fddf 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4d56:	2300      	movs	r3, #0
    4d58:	f800 3b01 	strb.w	r3, [r0], #1
	lll_trng_get(rp->rand, count);
    4d5c:	2108      	movs	r1, #8
    4d5e:	f001 f90b 	bl	5f78 <lll_trng_get>
	if (err == -EINVAL) {
    4d62:	e6c3      	b.n	4aec <hci_cmd_handle+0x9c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4d64:	2109      	movs	r1, #9
    4d66:	a805      	add	r0, sp, #20
    4d68:	f7ff fdd4 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4d6c:	2300      	movs	r3, #0
	dst[0] = val;
    4d6e:	2203      	movs	r2, #3
    4d70:	7003      	strb	r3, [r0, #0]
    4d72:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    4d74:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    4d76:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    4d78:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    4d7a:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    4d7c:	7183      	strb	r3, [r0, #6]
    4d7e:	e6e5      	b.n	4b4c <hci_cmd_handle+0xfc>
		le_set_adv_param(cmd, evt);
    4d80:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    4d82:	7ba5      	ldrb	r5, [r4, #14]
    4d84:	79a3      	ldrb	r3, [r4, #6]
    4d86:	7962      	ldrb	r2, [r4, #5]
    4d88:	7921      	ldrb	r1, [r4, #4]
    4d8a:	8820      	ldrh	r0, [r4, #0]
    4d8c:	9502      	str	r5, [sp, #8]
    4d8e:	7b65      	ldrb	r5, [r4, #13]
    4d90:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    4d92:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    4d94:	9400      	str	r4, [sp, #0]
    4d96:	f000 fd0d 	bl	57b4 <ll_adv_params_set>
    4d9a:	e7a2      	b.n	4ce2 <hci_cmd_handle+0x292>
    4d9c:	0000b778 	.word	0x0000b778
    4da0:	0000b750 	.word	0x0000b750
    4da4:	0000c9d1 	.word	0x0000c9d1
    4da8:	0000c9e7 	.word	0x0000c9e7
    4dac:	2000140c 	.word	0x2000140c
	rp = hci_cmd_complete(evt, sizeof(*rp));
    4db0:	2102      	movs	r1, #2
    4db2:	a805      	add	r0, sp, #20
    4db4:	f7ff fdae 	bl	4914 <hci_cmd_complete>
	rp->status = 0x00;
    4db8:	2300      	movs	r3, #0
    4dba:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    4dbc:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    4dbe:	e695      	b.n	4aec <hci_cmd_handle+0x9c>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    4dc0:	68a1      	ldr	r1, [r4, #8]
    4dc2:	f811 0b01 	ldrb.w	r0, [r1], #1
    4dc6:	f000 fd5d 	bl	5884 <ll_adv_data_set>
    4dca:	e78a      	b.n	4ce2 <hci_cmd_handle+0x292>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    4dcc:	68a1      	ldr	r1, [r4, #8]
    4dce:	f811 0b01 	ldrb.w	r0, [r1], #1
    4dd2:	f000 fd97 	bl	5904 <ll_adv_scan_rsp_set>
    4dd6:	e784      	b.n	4ce2 <hci_cmd_handle+0x292>
	status = ll_adv_enable(cmd->enable);
    4dd8:	68a3      	ldr	r3, [r4, #8]
    4dda:	7818      	ldrb	r0, [r3, #0]
    4ddc:	f7fb fb0c 	bl	3f8 <ll_adv_enable>
    4de0:	e77f      	b.n	4ce2 <hci_cmd_handle+0x292>
    4de2:	bf00      	nop

00004de4 <hci_evt_encode>:
	}
}
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    4de4:	b508      	push	{r3, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#if defined(CONFIG_BT_CTLR_DFE_RX)
	enquque_dfe_data_packet(node_rx);
#endif /* CONFIG_BT_CTLR_DFE_RX */
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4de6:	7903      	ldrb	r3, [r0, #4]
    4de8:	2b02      	cmp	r3, #2
    4dea:	d00c      	beq.n	4e06 <hci_evt_encode+0x22>
		LL_ASSERT(0);
    4dec:	4a06      	ldr	r2, [pc, #24]	; (4e08 <hci_evt_encode+0x24>)
    4dee:	4907      	ldr	r1, [pc, #28]	; (4e0c <hci_evt_encode+0x28>)
    4df0:	4807      	ldr	r0, [pc, #28]	; (4e10 <hci_evt_encode+0x2c>)
    4df2:	f640 5375 	movw	r3, #3445	; 0xd75
    4df6:	f004 f9b7 	bl	9168 <printk>
    4dfa:	4040      	eors	r0, r0
    4dfc:	f380 8811 	msr	BASEPRI, r0
    4e00:	f04f 0003 	mov.w	r0, #3
    4e04:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4e06:	bd08      	pop	{r3, pc}
    4e08:	0000ca05 	.word	0x0000ca05
    4e0c:	0000d151 	.word	0x0000d151
    4e10:	0000c40b 	.word	0x0000c40b

00004e14 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    4e14:	b510      	push	{r4, lr}
    4e16:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    4e18:	f005 fc4f 	bl	a6ba <lll_reset>
	LL_ASSERT(!err);
    4e1c:	b160      	cbz	r0, 4e38 <perform_lll_reset+0x24>
    4e1e:	4a11      	ldr	r2, [pc, #68]	; (4e64 <perform_lll_reset+0x50>)
    4e20:	4911      	ldr	r1, [pc, #68]	; (4e68 <perform_lll_reset+0x54>)
    4e22:	4812      	ldr	r0, [pc, #72]	; (4e6c <perform_lll_reset+0x58>)
    4e24:	f240 43cf 	movw	r3, #1231	; 0x4cf
    4e28:	f004 f99e 	bl	9168 <printk>
    4e2c:	4040      	eors	r0, r0
    4e2e:	f380 8811 	msr	BASEPRI, r0
    4e32:	f04f 0003 	mov.w	r0, #3
    4e36:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    4e38:	f005 fca5 	bl	a786 <lll_adv_reset>
	LL_ASSERT(!err);
    4e3c:	b160      	cbz	r0, 4e58 <perform_lll_reset+0x44>
    4e3e:	4a09      	ldr	r2, [pc, #36]	; (4e64 <perform_lll_reset+0x50>)
    4e40:	4909      	ldr	r1, [pc, #36]	; (4e68 <perform_lll_reset+0x54>)
    4e42:	480a      	ldr	r0, [pc, #40]	; (4e6c <perform_lll_reset+0x58>)
    4e44:	f240 43d4 	movw	r3, #1236	; 0x4d4
    4e48:	f004 f98e 	bl	9168 <printk>
    4e4c:	4040      	eors	r0, r0
    4e4e:	f380 8811 	msr	BASEPRI, r0
    4e52:	f04f 0003 	mov.w	r0, #3
    4e56:	df02      	svc	2
	z_impl_k_sem_give(sem);
    4e58:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    4e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e5e:	f003 be15 	b.w	8a8c <z_impl_k_sem_give>
    4e62:	bf00      	nop
    4e64:	0000ca92 	.word	0x0000ca92
    4e68:	0000cb06 	.word	0x0000cb06
    4e6c:	0000c40b 	.word	0x0000c40b

00004e70 <rx_alloc.constprop.0>:
	MFIFO_BY_IDX_ENQUEUE(done, idx, done);

	return done;
}

static inline void rx_alloc(u8_t max)
    4e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */

	if (max > mem_link_rx.quota_pdu) {
    4e74:	4b1a      	ldr	r3, [pc, #104]	; (4ee0 <rx_alloc.constprop.0+0x70>)
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    4e76:	4f1b      	ldr	r7, [pc, #108]	; (4ee4 <rx_alloc.constprop.0+0x74>)
	if (max > mem_link_rx.quota_pdu) {
    4e78:	f893 9000 	ldrb.w	r9, [r3]
    4e7c:	4698      	mov	r8, r3
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
    4e7e:	1d1e      	adds	r6, r3, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    4e80:	f1b9 0f00 	cmp.w	r9, #0
    4e84:	d00e      	beq.n	4ea4 <rx_alloc.constprop.0+0x34>
 */
static inline bool mfifo_enqueue_idx_get(u8_t count, u8_t first, u8_t last,
					 u8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
    4e86:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
    4e88:	787a      	ldrb	r2, [r7, #1]
    4e8a:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    4e8c:	3401      	adds	r4, #1
    4e8e:	b2e4      	uxtb	r4, r4
		last = 0U;
    4e90:	42a2      	cmp	r2, r4
    4e92:	bf08      	it	eq
    4e94:	2400      	moveq	r4, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
    4e96:	429c      	cmp	r4, r3
    4e98:	d004      	beq.n	4ea4 <rx_alloc.constprop.0+0x34>
		link = mem_acquire(&mem_link_rx.free);
    4e9a:	4630      	mov	r0, r6
    4e9c:	f005 f903 	bl	a0a6 <mem_acquire>
		if (!link) {
    4ea0:	4605      	mov	r5, r0
    4ea2:	b908      	cbnz	r0, 4ea8 <rx_alloc.constprop.0+0x38>

		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
}
    4ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
    4ea8:	480f      	ldr	r0, [pc, #60]	; (4ee8 <rx_alloc.constprop.0+0x78>)
    4eaa:	f005 f8fc 	bl	a0a6 <mem_acquire>
		if (!rx) {
    4eae:	b928      	cbnz	r0, 4ebc <rx_alloc.constprop.0+0x4c>
			mem_release(link, &mem_link_rx.free);
    4eb0:	4628      	mov	r0, r5
    4eb2:	490e      	ldr	r1, [pc, #56]	; (4eec <rx_alloc.constprop.0+0x7c>)
}
    4eb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
    4eb8:	f005 b90e 	b.w	a0d8 <mem_release>
		rx->link = link;
    4ebc:	6005      	str	r5, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(u8_t *fifo, u8_t size, u8_t idx,
					void *mem, u8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    4ebe:	78fa      	ldrb	r2, [r7, #3]
    4ec0:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    4ec2:	fb02 7303 	mla	r3, r2, r3, r7
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    4ec6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    4eca:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    4ecc:	f898 3000 	ldrb.w	r3, [r8]

	*last = idx; /* Commit: Update write index */
    4ed0:	70fc      	strb	r4, [r7, #3]
    4ed2:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    4ed4:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
    4ed8:	f888 3000 	strb.w	r3, [r8]
}
    4edc:	e7d0      	b.n	4e80 <rx_alloc.constprop.0+0x10>
    4ede:	bf00      	nop
    4ee0:	20000a64 	.word	0x20000a64
    4ee4:	2000011c 	.word	0x2000011c
    4ee8:	20000aac 	.word	0x20000aac
    4eec:	20000a68 	.word	0x20000a68

00004ef0 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    4ef0:	4b3a      	ldr	r3, [pc, #232]	; (4fdc <init_reset+0xec>)
{
    4ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    4ef6:	1d18      	adds	r0, r3, #4
    4ef8:	2203      	movs	r2, #3
    4efa:	2138      	movs	r1, #56	; 0x38
    4efc:	f005 f8af 	bl	a05e <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    4f00:	4b37      	ldr	r3, [pc, #220]	; (4fe0 <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    4f02:	4f38      	ldr	r7, [pc, #224]	; (4fe4 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
    4f04:	4e36      	ldr	r6, [pc, #216]	; (4fe0 <init_reset+0xf0>)
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    4f06:	2203      	movs	r2, #3
    4f08:	2108      	movs	r1, #8
    4f0a:	1d18      	adds	r0, r3, #4
    4f0c:	f005 f8a7 	bl	a05e <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    4f10:	46b8      	mov	r8, r7
	last = last + 1;
    4f12:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
    4f14:	787a      	ldrb	r2, [r7, #1]
    4f16:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    4f18:	3401      	adds	r4, #1
    4f1a:	b2e4      	uxtb	r4, r4
		last = 0U;
    4f1c:	42a2      	cmp	r2, r4
    4f1e:	bf08      	it	eq
    4f20:	2400      	moveq	r4, #0
	if (last == first) {
    4f22:	429c      	cmp	r4, r3
    4f24:	d00d      	beq.n	4f42 <init_reset+0x52>
		link = mem_acquire(&mem_link_done.free);
    4f26:	4630      	mov	r0, r6
    4f28:	f005 f8bd 	bl	a0a6 <mem_acquire>
		if (!link) {
    4f2c:	4605      	mov	r5, r0
    4f2e:	b140      	cbz	r0, 4f42 <init_reset+0x52>
		rx = mem_acquire(&mem_done.free);
    4f30:	482a      	ldr	r0, [pc, #168]	; (4fdc <init_reset+0xec>)
    4f32:	f005 f8b8 	bl	a0a6 <mem_acquire>
		if (!rx) {
    4f36:	2800      	cmp	r0, #0
    4f38:	d145      	bne.n	4fc6 <init_reset+0xd6>
			mem_release(link, &mem_link_done.free);
    4f3a:	4929      	ldr	r1, [pc, #164]	; (4fe0 <init_reset+0xf0>)
    4f3c:	4628      	mov	r0, r5
    4f3e:	f005 f8cb 	bl	a0d8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    4f42:	4b29      	ldr	r3, [pc, #164]	; (4fe8 <init_reset+0xf8>)
    4f44:	2206      	movs	r2, #6
    4f46:	1d18      	adds	r0, r3, #4
    4f48:	2148      	movs	r1, #72	; 0x48
    4f4a:	f005 f888 	bl	a05e <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    4f4e:	4b27      	ldr	r3, [pc, #156]	; (4fec <init_reset+0xfc>)
    4f50:	2208      	movs	r2, #8
    4f52:	1d18      	adds	r0, r3, #4
    4f54:	4611      	mov	r1, r2
    4f56:	f005 f882 	bl	a05e <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    4f5a:	4824      	ldr	r0, [pc, #144]	; (4fec <init_reset+0xfc>)
    4f5c:	f005 f8a3 	bl	a0a6 <mem_acquire>
	LL_ASSERT(link);
    4f60:	4604      	mov	r4, r0
    4f62:	b960      	cbnz	r0, 4f7e <init_reset+0x8e>
    4f64:	4a22      	ldr	r2, [pc, #136]	; (4ff0 <init_reset+0x100>)
    4f66:	4923      	ldr	r1, [pc, #140]	; (4ff4 <init_reset+0x104>)
    4f68:	4823      	ldr	r0, [pc, #140]	; (4ff8 <init_reset+0x108>)
    4f6a:	f240 43b6 	movw	r3, #1206	; 0x4b6
    4f6e:	f004 f8fb 	bl	9168 <printk>
    4f72:	4040      	eors	r0, r0
    4f74:	f380 8811 	msr	BASEPRI, r0
    4f78:	f04f 0003 	mov.w	r0, #3
    4f7c:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
    4f7e:	4a1f      	ldr	r2, [pc, #124]	; (4ffc <init_reset+0x10c>)
    4f80:	4620      	mov	r0, r4
    4f82:	1f11      	subs	r1, r2, #4
    4f84:	f005 f8d7 	bl	a136 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    4f88:	4818      	ldr	r0, [pc, #96]	; (4fec <init_reset+0xfc>)
    4f8a:	f005 f88c 	bl	a0a6 <mem_acquire>
	LL_ASSERT(link);
    4f8e:	4604      	mov	r4, r0
    4f90:	b960      	cbnz	r0, 4fac <init_reset+0xbc>
    4f92:	4a17      	ldr	r2, [pc, #92]	; (4ff0 <init_reset+0x100>)
    4f94:	4917      	ldr	r1, [pc, #92]	; (4ff4 <init_reset+0x104>)
    4f96:	4818      	ldr	r0, [pc, #96]	; (4ff8 <init_reset+0x108>)
    4f98:	f240 43bd 	movw	r3, #1213	; 0x4bd
    4f9c:	f004 f8e4 	bl	9168 <printk>
    4fa0:	4040      	eors	r0, r0
    4fa2:	f380 8811 	msr	BASEPRI, r0
    4fa6:	f04f 0003 	mov.w	r0, #3
    4faa:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
    4fac:	4a14      	ldr	r2, [pc, #80]	; (5000 <init_reset+0x110>)
    4fae:	4620      	mov	r0, r4
    4fb0:	1f11      	subs	r1, r2, #4
    4fb2:	f005 f8c0 	bl	a136 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    4fb6:	4b13      	ldr	r3, [pc, #76]	; (5004 <init_reset+0x114>)
    4fb8:	2206      	movs	r2, #6
    4fba:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    4fbc:	f7ff ff58 	bl	4e70 <rx_alloc.constprop.0>
}
    4fc0:	2000      	movs	r0, #0
    4fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
    4fc6:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    4fc8:	f898 2003 	ldrb.w	r2, [r8, #3]
    4fcc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    4fd0:	fb02 8303 	mla	r3, r2, r3, r8
    4fd4:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    4fd6:	f888 4003 	strb.w	r4, [r8, #3]
}
    4fda:	e79a      	b.n	4f12 <init_reset+0x22>
    4fdc:	2000099c 	.word	0x2000099c
    4fe0:	20000a48 	.word	0x20000a48
    4fe4:	20000108 	.word	0x20000108
    4fe8:	20000aac 	.word	0x20000aac
    4fec:	20000a68 	.word	0x20000a68
    4ff0:	0000ca92 	.word	0x0000ca92
    4ff4:	0000cb0b 	.word	0x0000cb0b
    4ff8:	0000c40b 	.word	0x0000c40b
    4ffc:	20000c6c 	.word	0x20000c6c
    5000:	20000c64 	.word	0x20000c64
    5004:	20000a64 	.word	0x20000a64

00005008 <ll_init>:
{
    5008:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    500a:	4b23      	ldr	r3, [pc, #140]	; (5098 <ll_init+0x90>)
{
    500c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    500e:	6018      	str	r0, [r3, #0]
	cntr_init();
    5010:	f001 fb1c 	bl	664c <cntr_init>
	mayfly_init();
    5014:	f7fe fd12 	bl	3a3c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    5018:	4a20      	ldr	r2, [pc, #128]	; (509c <ll_init+0x94>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    501a:	2002      	movs	r0, #2
    501c:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    501e:	7610      	strb	r0, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    5020:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    5022:	481f      	ldr	r0, [pc, #124]	; (50a0 <ll_init+0x98>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    5024:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    5026:	2304      	movs	r3, #4
    5028:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    502a:	9005      	str	r0, [sp, #20]
    502c:	481d      	ldr	r0, [pc, #116]	; (50a4 <ll_init+0x9c>)
    502e:	9004      	str	r0, [sp, #16]
    5030:	481d      	ldr	r0, [pc, #116]	; (50a8 <ll_init+0xa0>)
    5032:	9003      	str	r0, [sp, #12]
    5034:	481d      	ldr	r0, [pc, #116]	; (50ac <ll_init+0xa4>)
    5036:	9002      	str	r0, [sp, #8]
    5038:	200b      	movs	r0, #11
    503a:	e9cd 2000 	strd	r2, r0, [sp]
    503e:	4a1c      	ldr	r2, [pc, #112]	; (50b0 <ll_init+0xa8>)
    5040:	2000      	movs	r0, #0
    5042:	f7ff f9fd 	bl	4440 <ticker_init>
	LL_ASSERT(!err);
    5046:	b160      	cbz	r0, 5062 <ll_init+0x5a>
    5048:	4a1a      	ldr	r2, [pc, #104]	; (50b4 <ll_init+0xac>)
    504a:	491b      	ldr	r1, [pc, #108]	; (50b8 <ll_init+0xb0>)
    504c:	481b      	ldr	r0, [pc, #108]	; (50bc <ll_init+0xb4>)
    504e:	f240 1317 	movw	r3, #279	; 0x117
    5052:	f004 f889 	bl	9168 <printk>
    5056:	4040      	eors	r0, r0
    5058:	f380 8811 	msr	BASEPRI, r0
    505c:	f04f 0003 	mov.w	r0, #3
    5060:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
    5062:	2201      	movs	r2, #1
    5064:	2100      	movs	r1, #0
    5066:	4816      	ldr	r0, [pc, #88]	; (50c0 <ll_init+0xb8>)
    5068:	f006 f890 	bl	b18c <z_impl_k_sem_init>
	err = lll_init();
    506c:	f000 ff50 	bl	5f10 <lll_init>
	if (err) {
    5070:	4604      	mov	r4, r0
    5072:	b970      	cbnz	r0, 5092 <ll_init+0x8a>
	err = init_reset();
    5074:	f7ff ff3c 	bl	4ef0 <init_reset>
	if (err) {
    5078:	4604      	mov	r4, r0
    507a:	b950      	cbnz	r0, 5092 <ll_init+0x8a>
	err = lll_adv_init();
    507c:	f005 fb81 	bl	a782 <lll_adv_init>
	if (err) {
    5080:	4604      	mov	r4, r0
    5082:	b930      	cbnz	r0, 5092 <ll_init+0x8a>
	err = ull_adv_init();
    5084:	f005 faed 	bl	a662 <ull_adv_init>
	if (err) {
    5088:	4604      	mov	r4, r0
    508a:	b910      	cbnz	r0, 5092 <ll_init+0x8a>
		ull_filter_reset(true);
    508c:	2001      	movs	r0, #1
    508e:	f000 fdc7 	bl	5c20 <ull_filter_reset>
}
    5092:	4620      	mov	r0, r4
    5094:	b006      	add	sp, #24
    5096:	bd10      	pop	{r4, pc}
    5098:	20000c70 	.word	0x20000c70
    509c:	20000f58 	.word	0x20000f58
    50a0:	0000a80d 	.word	0x0000a80d
    50a4:	00006ecd 	.word	0x00006ecd
    50a8:	00006e75 	.word	0x00006e75
    50ac:	20000d1c 	.word	0x20000d1c
    50b0:	20000c8c 	.word	0x20000c8c
    50b4:	0000ca92 	.word	0x0000ca92
    50b8:	0000cb06 	.word	0x0000cb06
    50bc:	0000c40b 	.word	0x0000c40b
    50c0:	20000c74 	.word	0x20000c74

000050c4 <ll_reset>:
{
    50c4:	b510      	push	{r4, lr}
    50c6:	b086      	sub	sp, #24
	err = ull_adv_reset();
    50c8:	f005 facd 	bl	a666 <ull_adv_reset>
	LL_ASSERT(!err);
    50cc:	b160      	cbz	r0, 50e8 <ll_reset+0x24>
    50ce:	4a25      	ldr	r2, [pc, #148]	; (5164 <ll_reset+0xa0>)
    50d0:	4925      	ldr	r1, [pc, #148]	; (5168 <ll_reset+0xa4>)
    50d2:	4826      	ldr	r0, [pc, #152]	; (516c <ll_reset+0xa8>)
    50d4:	f240 1365 	movw	r3, #357	; 0x165
    50d8:	f004 f846 	bl	9168 <printk>
    50dc:	4040      	eors	r0, r0
    50de:	f380 8811 	msr	BASEPRI, r0
    50e2:	f04f 0003 	mov.w	r0, #3
    50e6:	df02      	svc	2
		ull_filter_reset(false);
    50e8:	2000      	movs	r0, #0
    50ea:	f000 fd99 	bl	5c20 <ull_filter_reset>
	MFIFO_INIT(prep);
    50ee:	4b20      	ldr	r3, [pc, #128]	; (5170 <ll_reset+0xac>)
    50f0:	2400      	movs	r4, #0
    50f2:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
    50f4:	4b1f      	ldr	r3, [pc, #124]	; (5174 <ll_reset+0xb0>)
    50f6:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    50f8:	4b1f      	ldr	r3, [pc, #124]	; (5178 <ll_reset+0xb4>)
    50fa:	805c      	strh	r4, [r3, #2]
    50fc:	2201      	movs	r2, #1
    50fe:	4621      	mov	r1, r4
    5100:	4668      	mov	r0, sp
    5102:	f006 f843 	bl	b18c <z_impl_k_sem_init>
		mfy.param = &sem;
    5106:	4b1d      	ldr	r3, [pc, #116]	; (517c <ll_reset+0xb8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    5108:	4622      	mov	r2, r4
    510a:	4621      	mov	r1, r4
    510c:	2003      	movs	r0, #3
		mfy.param = &sem;
    510e:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    5112:	f7fe fcbd 	bl	3a90 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5116:	b160      	cbz	r0, 5132 <ll_reset+0x6e>
    5118:	4a12      	ldr	r2, [pc, #72]	; (5164 <ll_reset+0xa0>)
    511a:	4919      	ldr	r1, [pc, #100]	; (5180 <ll_reset+0xbc>)
    511c:	4813      	ldr	r0, [pc, #76]	; (516c <ll_reset+0xa8>)
    511e:	f240 13b7 	movw	r3, #439	; 0x1b7
    5122:	f004 f821 	bl	9168 <printk>
    5126:	4040      	eors	r0, r0
    5128:	f380 8811 	msr	BASEPRI, r0
    512c:	f04f 0003 	mov.w	r0, #3
    5130:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    513a:	4668      	mov	r0, sp
    513c:	f003 fccc 	bl	8ad8 <z_impl_k_sem_take>
	err = init_reset();
    5140:	f7ff fed6 	bl	4ef0 <init_reset>
	LL_ASSERT(!err);
    5144:	b160      	cbz	r0, 5160 <ll_reset+0x9c>
    5146:	4a07      	ldr	r2, [pc, #28]	; (5164 <ll_reset+0xa0>)
    5148:	4907      	ldr	r1, [pc, #28]	; (5168 <ll_reset+0xa4>)
    514a:	4808      	ldr	r0, [pc, #32]	; (516c <ll_reset+0xa8>)
    514c:	f240 13c3 	movw	r3, #451	; 0x1c3
    5150:	f004 f80a 	bl	9168 <printk>
    5154:	4040      	eors	r0, r0
    5156:	f380 8811 	msr	BASEPRI, r0
    515a:	f04f 0003 	mov.w	r0, #3
    515e:	df02      	svc	2
}
    5160:	b006      	add	sp, #24
    5162:	bd10      	pop	{r4, pc}
    5164:	0000ca92 	.word	0x0000ca92
    5168:	0000cb06 	.word	0x0000cb06
    516c:	0000c40b 	.word	0x0000c40b
    5170:	20000134 	.word	0x20000134
    5174:	20000108 	.word	0x20000108
    5178:	2000011c 	.word	0x2000011c
    517c:	20000258 	.word	0x20000258
    5180:	0000cb10 	.word	0x0000cb10

00005184 <ll_rx_get>:
{
    5184:	b513      	push	{r0, r1, r4, lr}
	*node_rx = NULL;
    5186:	2300      	movs	r3, #0
    5188:	6003      	str	r3, [r0, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    518a:	4b06      	ldr	r3, [pc, #24]	; (51a4 <ll_rx_get+0x20>)
{
    518c:	4604      	mov	r4, r0
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    518e:	aa01      	add	r2, sp, #4
    5190:	e9d3 0100 	ldrd	r0, r1, [r3]
    5194:	f004 ffd9 	bl	a14a <memq_peek>
	if (link) {
    5198:	b108      	cbz	r0, 519e <ll_rx_get+0x1a>
			*node_rx = rx;
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	6023      	str	r3, [r4, #0]
}
    519e:	2000      	movs	r0, #0
    51a0:	b002      	add	sp, #8
    51a2:	bd10      	pop	{r4, pc}
    51a4:	20000c60 	.word	0x20000c60

000051a8 <ll_rx_dequeue>:
{
    51a8:	b513      	push	{r0, r1, r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    51aa:	4918      	ldr	r1, [pc, #96]	; (520c <ll_rx_dequeue+0x64>)
	struct node_rx_hdr *rx = NULL;
    51ac:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    51ae:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    51b0:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    51b2:	aa01      	add	r2, sp, #4
    51b4:	f004 ffd1 	bl	a15a <memq_dequeue>
	LL_ASSERT(link);
    51b8:	4604      	mov	r4, r0
    51ba:	b960      	cbnz	r0, 51d6 <ll_rx_dequeue+0x2e>
    51bc:	4a14      	ldr	r2, [pc, #80]	; (5210 <ll_rx_dequeue+0x68>)
    51be:	4915      	ldr	r1, [pc, #84]	; (5214 <ll_rx_dequeue+0x6c>)
    51c0:	4815      	ldr	r0, [pc, #84]	; (5218 <ll_rx_dequeue+0x70>)
    51c2:	f240 2315 	movw	r3, #533	; 0x215
    51c6:	f003 ffcf 	bl	9168 <printk>
    51ca:	4040      	eors	r0, r0
    51cc:	f380 8811 	msr	BASEPRI, r0
    51d0:	f04f 0003 	mov.w	r0, #3
    51d4:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
    51d6:	4911      	ldr	r1, [pc, #68]	; (521c <ll_rx_dequeue+0x74>)
    51d8:	4620      	mov	r0, r4
    51da:	f004 ff7d 	bl	a0d8 <mem_release>
	switch (rx->type) {
    51de:	9b01      	ldr	r3, [sp, #4]
    51e0:	791b      	ldrb	r3, [r3, #4]
    51e2:	b973      	cbnz	r3, 5202 <ll_rx_dequeue+0x5a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    51e4:	4a0a      	ldr	r2, [pc, #40]	; (5210 <ll_rx_dequeue+0x68>)
    51e6:	490e      	ldr	r1, [pc, #56]	; (5220 <ll_rx_dequeue+0x78>)
    51e8:	f240 23a1 	movw	r3, #673	; 0x2a1
		LL_ASSERT(0);
    51ec:	480a      	ldr	r0, [pc, #40]	; (5218 <ll_rx_dequeue+0x70>)
    51ee:	f003 ffbb 	bl	9168 <printk>
    51f2:	4040      	eors	r0, r0
    51f4:	f380 8811 	msr	BASEPRI, r0
    51f8:	f04f 0003 	mov.w	r0, #3
    51fc:	df02      	svc	2
}
    51fe:	b002      	add	sp, #8
    5200:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    5202:	4a03      	ldr	r2, [pc, #12]	; (5210 <ll_rx_dequeue+0x68>)
    5204:	4907      	ldr	r1, [pc, #28]	; (5224 <ll_rx_dequeue+0x7c>)
    5206:	f240 23a5 	movw	r3, #677	; 0x2a5
    520a:	e7ef      	b.n	51ec <ll_rx_dequeue+0x44>
    520c:	20000c60 	.word	0x20000c60
    5210:	0000ca92 	.word	0x0000ca92
    5214:	0000cb0b 	.word	0x0000cb0b
    5218:	0000c40b 	.word	0x0000c40b
    521c:	20000a68 	.word	0x20000a68
    5220:	0000cb18 	.word	0x0000cb18
    5224:	0000d151 	.word	0x0000d151

00005228 <ll_rx_mem_release>:
{
    5228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rx = *node_rx;
    522c:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
    522e:	4e20      	ldr	r6, [pc, #128]	; (52b0 <ll_rx_mem_release+0x88>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    5230:	4f20      	ldr	r7, [pc, #128]	; (52b4 <ll_rx_mem_release+0x8c>)
{
    5232:	4605      	mov	r5, r0
	while (rx) {
    5234:	b924      	cbnz	r4, 5240 <ll_rx_mem_release+0x18>
	*node_rx = rx;
    5236:	602c      	str	r4, [r5, #0]
}
    5238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	rx_alloc(UINT8_MAX);
    523c:	f7ff be18 	b.w	4e70 <rx_alloc.constprop.0>
		switch (rx_free->type) {
    5240:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
    5242:	f8d4 8000 	ldr.w	r8, [r4]
		switch (rx_free->type) {
    5246:	bb2b      	cbnz	r3, 5294 <ll_rx_mem_release+0x6c>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    5248:	491b      	ldr	r1, [pc, #108]	; (52b8 <ll_rx_mem_release+0x90>)
    524a:	481c      	ldr	r0, [pc, #112]	; (52bc <ll_rx_mem_release+0x94>)
    524c:	f240 333e 	movw	r3, #830	; 0x33e
    5250:	4632      	mov	r2, r6
    5252:	f003 ff89 	bl	9168 <printk>
    5256:	4040      	eors	r0, r0
    5258:	f380 8811 	msr	BASEPRI, r0
    525c:	f04f 0003 	mov.w	r0, #3
    5260:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    5262:	783b      	ldrb	r3, [r7, #0]
    5264:	2b05      	cmp	r3, #5
    5266:	d90c      	bls.n	5282 <ll_rx_mem_release+0x5a>
    5268:	4915      	ldr	r1, [pc, #84]	; (52c0 <ll_rx_mem_release+0x98>)
    526a:	4814      	ldr	r0, [pc, #80]	; (52bc <ll_rx_mem_release+0x94>)
    526c:	f44f 7359 	mov.w	r3, #868	; 0x364
    5270:	4632      	mov	r2, r6
    5272:	f003 ff79 	bl	9168 <printk>
    5276:	4040      	eors	r0, r0
    5278:	f380 8811 	msr	BASEPRI, r0
    527c:	f04f 0003 	mov.w	r0, #3
    5280:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    5282:	783b      	ldrb	r3, [r7, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    5284:	490f      	ldr	r1, [pc, #60]	; (52c4 <ll_rx_mem_release+0x9c>)
	mem_link_rx.quota_pdu += delta;
    5286:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    5288:	4620      	mov	r0, r4
	mem_link_rx.quota_pdu += delta;
    528a:	703b      	strb	r3, [r7, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    528c:	f004 ff24 	bl	a0d8 <mem_release>
{
    5290:	4644      	mov	r4, r8
    5292:	e7cf      	b.n	5234 <ll_rx_mem_release+0xc>
			LL_ASSERT(0);
    5294:	490c      	ldr	r1, [pc, #48]	; (52c8 <ll_rx_mem_release+0xa0>)
    5296:	4809      	ldr	r0, [pc, #36]	; (52bc <ll_rx_mem_release+0x94>)
    5298:	f44f 7356 	mov.w	r3, #856	; 0x358
    529c:	4632      	mov	r2, r6
    529e:	f003 ff63 	bl	9168 <printk>
    52a2:	4040      	eors	r0, r0
    52a4:	f380 8811 	msr	BASEPRI, r0
    52a8:	f04f 0003 	mov.w	r0, #3
    52ac:	df02      	svc	2
			break;
    52ae:	e7ef      	b.n	5290 <ll_rx_mem_release+0x68>
    52b0:	0000ca92 	.word	0x0000ca92
    52b4:	20000a64 	.word	0x20000a64
    52b8:	0000cb36 	.word	0x0000cb36
    52bc:	0000c40b 	.word	0x0000c40b
    52c0:	0000cb59 	.word	0x0000cb59
    52c4:	20000aac 	.word	0x20000aac
    52c8:	0000d151 	.word	0x0000d151

000052cc <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
    52cc:	6008      	str	r0, [r1, #0]
	z_impl_k_sem_give(sem);
    52ce:	4801      	ldr	r0, [pc, #4]	; (52d4 <ull_ticker_status_give+0x8>)
    52d0:	f003 bbdc 	b.w	8a8c <z_impl_k_sem_give>
    52d4:	20000c74 	.word	0x20000c74

000052d8 <ull_ticker_status_take>:
{
    52d8:	b510      	push	{r4, lr}
    52da:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    52dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    52e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    52e4:	4802      	ldr	r0, [pc, #8]	; (52f0 <ull_ticker_status_take+0x18>)
    52e6:	f003 fbf7 	bl	8ad8 <z_impl_k_sem_take>
	return *ret_cb;
    52ea:	6820      	ldr	r0, [r4, #0]
}
    52ec:	bd10      	pop	{r4, pc}
    52ee:	bf00      	nop
    52f0:	20000c74 	.word	0x20000c74

000052f4 <ull_disable_mark>:
	if (!*m) {
    52f4:	4b02      	ldr	r3, [pc, #8]	; (5300 <ull_disable_mark+0xc>)
    52f6:	681a      	ldr	r2, [r3, #0]
    52f8:	b902      	cbnz	r2, 52fc <ull_disable_mark+0x8>
		*m = param;
    52fa:	6018      	str	r0, [r3, #0]
}
    52fc:	6818      	ldr	r0, [r3, #0]
    52fe:	4770      	bx	lr
    5300:	20000998 	.word	0x20000998

00005304 <ull_disable_unmark>:
	if (*m && *m == param) {
    5304:	4a05      	ldr	r2, [pc, #20]	; (531c <ull_disable_unmark+0x18>)
{
    5306:	4603      	mov	r3, r0
	if (*m && *m == param) {
    5308:	6810      	ldr	r0, [r2, #0]
    530a:	b130      	cbz	r0, 531a <ull_disable_unmark+0x16>
    530c:	4283      	cmp	r3, r0
    530e:	f04f 0300 	mov.w	r3, #0
    5312:	d101      	bne.n	5318 <ull_disable_unmark+0x14>
		*m = NULL;
    5314:	6013      	str	r3, [r2, #0]
		return param;
    5316:	4770      	bx	lr
	return NULL;
    5318:	4618      	mov	r0, r3
}
    531a:	4770      	bx	lr
    531c:	20000998 	.word	0x20000998

00005320 <ull_disable_mark_get>:
}
    5320:	4b01      	ldr	r3, [pc, #4]	; (5328 <ull_disable_mark_get+0x8>)
    5322:	6818      	ldr	r0, [r3, #0]
    5324:	4770      	bx	lr
    5326:	bf00      	nop
    5328:	20000998 	.word	0x20000998

0000532c <ull_disable>:
{
    532c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    532e:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    5330:	f115 0f10 	cmn.w	r5, #16
{
    5334:	b087      	sub	sp, #28
    5336:	4604      	mov	r4, r0
	if (!hdr) {
    5338:	d102      	bne.n	5340 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
    533a:	2000      	movs	r0, #0
}
    533c:	b007      	add	sp, #28
    533e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
    5340:	2201      	movs	r2, #1
    5342:	2100      	movs	r1, #0
    5344:	4668      	mov	r0, sp
    5346:	f005 ff21 	bl	b18c <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    534a:	4b12      	ldr	r3, [pc, #72]	; (5394 <ull_disable+0x68>)
    534c:	616b      	str	r3, [r5, #20]
	if (!hdr->ref) {
    534e:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_param = &sem;
    5350:	f8c5 d018 	str.w	sp, [r5, #24]
	if (!hdr->ref) {
    5354:	2b00      	cmp	r3, #0
    5356:	d0f0      	beq.n	533a <ull_disable+0xe>
	mfy.param = lll;
    5358:	4b0f      	ldr	r3, [pc, #60]	; (5398 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    535a:	2200      	movs	r2, #0
    535c:	4611      	mov	r1, r2
    535e:	2003      	movs	r0, #3
	mfy.param = lll;
    5360:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    5362:	f7fe fb95 	bl	3a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
    5366:	b160      	cbz	r0, 5382 <ull_disable+0x56>
    5368:	4a0c      	ldr	r2, [pc, #48]	; (539c <ull_disable+0x70>)
    536a:	490d      	ldr	r1, [pc, #52]	; (53a0 <ull_disable+0x74>)
    536c:	480d      	ldr	r0, [pc, #52]	; (53a4 <ull_disable+0x78>)
    536e:	f240 4319 	movw	r3, #1049	; 0x419
    5372:	f003 fef9 	bl	9168 <printk>
    5376:	4040      	eors	r0, r0
    5378:	f380 8811 	msr	BASEPRI, r0
    537c:	f04f 0003 	mov.w	r0, #3
    5380:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    538a:	4668      	mov	r0, sp
    538c:	f003 fba4 	bl	8ad8 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
    5390:	e7d4      	b.n	533c <ull_disable+0x10>
    5392:	bf00      	nop
    5394:	0000a65f 	.word	0x0000a65f
    5398:	20000268 	.word	0x20000268
    539c:	0000ca92 	.word	0x0000ca92
    53a0:	0000cb8d 	.word	0x0000cb8d
    53a4:	0000c40b 	.word	0x0000c40b

000053a8 <ull_rx_put>:
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    53a8:	4a01      	ldr	r2, [pc, #4]	; (53b0 <ull_rx_put+0x8>)
    53aa:	f004 bec7 	b.w	a13c <memq_enqueue>
    53ae:	bf00      	nop
    53b0:	20000c6c 	.word	0x20000c6c

000053b4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    53b4:	2201      	movs	r2, #1
    53b6:	4b02      	ldr	r3, [pc, #8]	; (53c0 <ull_rx_sched+0xc>)
    53b8:	4611      	mov	r1, r2
    53ba:	2000      	movs	r0, #0
    53bc:	f7fe bb68 	b.w	3a90 <mayfly_enqueue>
    53c0:	20000278 	.word	0x20000278

000053c4 <ull_prepare_enqueue>:
{
    53c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    53c8:	4e17      	ldr	r6, [pc, #92]	; (5428 <ull_prepare_enqueue+0x64>)
{
    53ca:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    53cc:	78f3      	ldrb	r3, [r6, #3]
    53ce:	7834      	ldrb	r4, [r6, #0]
{
    53d0:	4680      	mov	r8, r0
	last = last + 1;
    53d2:	1c5d      	adds	r5, r3, #1
	if (last == count) {
    53d4:	7870      	ldrb	r0, [r6, #1]
    53d6:	460f      	mov	r7, r1
	last = last + 1;
    53d8:	b2ed      	uxtb	r5, r5
    53da:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    53dc:	78b2      	ldrb	r2, [r6, #2]
		last = 0U;
    53de:	42a8      	cmp	r0, r5
    53e0:	bf08      	it	eq
    53e2:	2500      	moveq	r5, #0
	if (last == first) {
    53e4:	42aa      	cmp	r2, r5
    53e6:	d01b      	beq.n	5420 <ull_prepare_enqueue+0x5c>

	/* We keep idx as the always-one-free, so we return preceding
	 * buffer (last). Recall that last has not been updated,
	 * so idx != last
	 */
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    53e8:	1d32      	adds	r2, r6, #4
    53ea:	fb03 2404 	mla	r4, r3, r4, r2
	if (!e) {
    53ee:	b1bc      	cbz	r4, 5420 <ull_prepare_enqueue+0x5c>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    53f0:	2210      	movs	r2, #16
    53f2:	4620      	mov	r0, r4
    53f4:	f004 fd9e 	bl	9f34 <memcpy>
	e->prio = prio;
    53f8:	9b08      	ldr	r3, [sp, #32]
	e->is_resume = is_resume;
    53fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	e->prio = prio;
    53fe:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
    5400:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
    5404:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    5406:	f023 0303 	bic.w	r3, r3, #3
    540a:	f002 0201 	and.w	r2, r2, #1
	e->is_abort_cb = is_abort_cb;
    540e:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    5412:	4313      	orrs	r3, r2
    5414:	f884 3020 	strb.w	r3, [r4, #32]
 * @param idx[in]   Index one-ahead of previously allocated buffer
 * @param last[out] Write-index
 */
static inline void mfifo_enqueue(u8_t idx, u8_t *last)
{
	*last = idx; /* Commit: Update write index */
    5418:	70f5      	strb	r5, [r6, #3]
	return 0;
    541a:	2000      	movs	r0, #0
}
    541c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    5420:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5424:	e7fa      	b.n	541c <ull_prepare_enqueue+0x58>
    5426:	bf00      	nop
    5428:	20000134 	.word	0x20000134

0000542c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    542c:	4b05      	ldr	r3, [pc, #20]	; (5444 <ull_prepare_dequeue_get+0x18>)
    542e:	789a      	ldrb	r2, [r3, #2]
 * @details API 1
 */
static inline void *mfifo_dequeue_get(u8_t *fifo, u8_t size, u8_t first,
				      u8_t last)
{
	if (first == last) {
    5430:	78d9      	ldrb	r1, [r3, #3]
    5432:	7818      	ldrb	r0, [r3, #0]
    5434:	4291      	cmp	r1, r2
		return NULL;
	}

	/* API 1: fifo is array of some value type */
	return (void *)(fifo + first * size);
    5436:	bf1a      	itte	ne
    5438:	3304      	addne	r3, #4
    543a:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    543e:	2000      	moveq	r0, #0
}
    5440:	4770      	bx	lr
    5442:	bf00      	nop
    5444:	20000134 	.word	0x20000134

00005448 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
    5448:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    544c:	4d60      	ldr	r5, [pc, #384]	; (55d0 <rx_demux+0x188>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    544e:	4c61      	ldr	r4, [pc, #388]	; (55d4 <rx_demux+0x18c>)
    5450:	aa01      	add	r2, sp, #4
    5452:	e9d4 0100 	ldrd	r0, r1, [r4]
    5456:	f004 fe78 	bl	a14a <memq_peek>
		if (link) {
    545a:	4607      	mov	r7, r0
    545c:	2800      	cmp	r0, #0
    545e:	f000 80b4 	beq.w	55ca <rx_demux+0x182>
			LL_ASSERT(rx);
    5462:	9b01      	ldr	r3, [sp, #4]
    5464:	b963      	cbnz	r3, 5480 <rx_demux+0x38>
    5466:	4a5c      	ldr	r2, [pc, #368]	; (55d8 <rx_demux+0x190>)
    5468:	495c      	ldr	r1, [pc, #368]	; (55dc <rx_demux+0x194>)
    546a:	485d      	ldr	r0, [pc, #372]	; (55e0 <rx_demux+0x198>)
    546c:	f240 53d1 	movw	r3, #1489	; 0x5d1
    5470:	f003 fe7a 	bl	9168 <printk>
    5474:	4040      	eors	r0, r0
    5476:	f380 8811 	msr	BASEPRI, r0
    547a:	f04f 0003 	mov.w	r0, #3
    547e:	df02      	svc	2
				nack = rx_demux_rx(link, rx);
    5480:	9e01      	ldr	r6, [sp, #4]
	switch (rx->type) {
    5482:	7933      	ldrb	r3, [r6, #4]
    5484:	2b01      	cmp	r3, #1
    5486:	f040 8092 	bne.w	55ae <rx_demux+0x166>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    548a:	6860      	ldr	r0, [r4, #4]
    548c:	4951      	ldr	r1, [pc, #324]	; (55d4 <rx_demux+0x18c>)
    548e:	2200      	movs	r2, #0
    5490:	f004 fe63 	bl	a15a <memq_dequeue>
	switch (done->extra.type) {
    5494:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	ull_hdr = done->param;
    5498:	6a34      	ldr	r4, [r6, #32]
	switch (done->extra.type) {
    549a:	b163      	cbz	r3, 54b6 <rx_demux+0x6e>
		LL_ASSERT(0);
    549c:	4a4e      	ldr	r2, [pc, #312]	; (55d8 <rx_demux+0x190>)
    549e:	4951      	ldr	r1, [pc, #324]	; (55e4 <rx_demux+0x19c>)
    54a0:	484f      	ldr	r0, [pc, #316]	; (55e0 <rx_demux+0x198>)
    54a2:	f240 638a 	movw	r3, #1674	; 0x68a
    54a6:	f003 fe5f 	bl	9168 <printk>
    54aa:	4040      	eors	r0, r0
    54ac:	f380 8811 	msr	BASEPRI, r0
    54b0:	f04f 0003 	mov.w	r0, #3
    54b4:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    54b6:	4a4c      	ldr	r2, [pc, #304]	; (55e8 <rx_demux+0x1a0>)
    54b8:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    54ba:	f892 c001 	ldrb.w	ip, [r2, #1]
    54be:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
    54c0:	2300      	movs	r3, #0
    54c2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	last = last + 1;
    54c6:	1c4b      	adds	r3, r1, #1
    54c8:	b2db      	uxtb	r3, r3
		last = 0U;
    54ca:	459c      	cmp	ip, r3
    54cc:	bf08      	it	eq
    54ce:	2300      	moveq	r3, #0
	if (last == first) {
    54d0:	4298      	cmp	r0, r3
    54d2:	d15b      	bne.n	558c <rx_demux+0x144>
	LL_ASSERT(release == done);
    54d4:	4a40      	ldr	r2, [pc, #256]	; (55d8 <rx_demux+0x190>)
    54d6:	4945      	ldr	r1, [pc, #276]	; (55ec <rx_demux+0x1a4>)
    54d8:	4841      	ldr	r0, [pc, #260]	; (55e0 <rx_demux+0x198>)
    54da:	f240 6391 	movw	r3, #1681	; 0x691
    54de:	f003 fe43 	bl	9168 <printk>
    54e2:	4040      	eors	r0, r0
    54e4:	f380 8811 	msr	BASEPRI, r0
    54e8:	f04f 0003 	mov.w	r0, #3
    54ec:	df02      	svc	2
	next = ull_prepare_dequeue_get();
    54ee:	f7ff ff9d 	bl	542c <ull_prepare_dequeue_get>
			mfy.param = next;
    54f2:	4f3f      	ldr	r7, [pc, #252]	; (55f0 <rx_demux+0x1a8>)
	while (next) {
    54f4:	b350      	cbz	r0, 554c <rx_demux+0x104>
		u8_t is_aborted = next->is_aborted;
    54f6:	f890 3020 	ldrb.w	r3, [r0, #32]
		if (!is_aborted) {
    54fa:	079a      	lsls	r2, r3, #30
		u8_t is_aborted = next->is_aborted;
    54fc:	f3c3 0640 	ubfx	r6, r3, #1, #1
		u8_t is_resume = next->is_resume;
    5500:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    5504:	d414      	bmi.n	5530 <rx_demux+0xe8>
			mfy.param = next;
    5506:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    5508:	4b39      	ldr	r3, [pc, #228]	; (55f0 <rx_demux+0x1a8>)
    550a:	4632      	mov	r2, r6
    550c:	4631      	mov	r1, r6
    550e:	2001      	movs	r0, #1
    5510:	f7fe fabe 	bl	3a90 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5514:	b160      	cbz	r0, 5530 <rx_demux+0xe8>
    5516:	4a30      	ldr	r2, [pc, #192]	; (55d8 <rx_demux+0x190>)
    5518:	4936      	ldr	r1, [pc, #216]	; (55f4 <rx_demux+0x1ac>)
    551a:	4831      	ldr	r0, [pc, #196]	; (55e0 <rx_demux+0x198>)
    551c:	f240 63a2 	movw	r3, #1698	; 0x6a2
    5520:	f003 fe22 	bl	9168 <printk>
    5524:	4040      	eors	r0, r0
    5526:	f380 8811 	msr	BASEPRI, r0
    552a:	f04f 0003 	mov.w	r0, #3
    552e:	df02      	svc	2
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
    5530:	78ab      	ldrb	r3, [r5, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    5532:	78e9      	ldrb	r1, [r5, #3]
		MFIFO_DEQUEUE(prep);
    5534:	786a      	ldrb	r2, [r5, #1]
    5536:	4299      	cmp	r1, r3
    5538:	d005      	beq.n	5546 <rx_demux+0xfe>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    553a:	3301      	adds	r3, #1
    553c:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
    553e:	429a      	cmp	r2, r3
    5540:	bf08      	it	eq
    5542:	2300      	moveq	r3, #0
	}

	*first = _first; /* Write back read-index */
    5544:	70ab      	strb	r3, [r5, #2]

		next = ull_prepare_dequeue_get();
    5546:	f7ff ff71 	bl	542c <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    554a:	bb30      	cbnz	r0, 559a <rx_demux+0x152>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    554c:	2c00      	cmp	r4, #0
    554e:	f43f af7e 	beq.w	544e <rx_demux+0x6>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
    5552:	7823      	ldrb	r3, [r4, #0]
    5554:	b963      	cbnz	r3, 5570 <rx_demux+0x128>
    5556:	4a20      	ldr	r2, [pc, #128]	; (55d8 <rx_demux+0x190>)
    5558:	4927      	ldr	r1, [pc, #156]	; (55f8 <rx_demux+0x1b0>)
    555a:	4821      	ldr	r0, [pc, #132]	; (55e0 <rx_demux+0x198>)
    555c:	f240 63b4 	movw	r3, #1716	; 0x6b4
    5560:	f003 fe02 	bl	9168 <printk>
    5564:	4040      	eors	r0, r0
    5566:	f380 8811 	msr	BASEPRI, r0
    556a:	f04f 0003 	mov.w	r0, #3
    556e:	df02      	svc	2
	return hdr->ref--;
    5570:	7823      	ldrb	r3, [r4, #0]
    5572:	3b01      	subs	r3, #1
    5574:	b2db      	uxtb	r3, r3
    5576:	7023      	strb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
    5578:	2b00      	cmp	r3, #0
    557a:	f47f af68 	bne.w	544e <rx_demux+0x6>
    557e:	6863      	ldr	r3, [r4, #4]
    5580:	2b00      	cmp	r3, #0
    5582:	f43f af64 	beq.w	544e <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    5586:	68a0      	ldr	r0, [r4, #8]
    5588:	4798      	blx	r3
    558a:	e760      	b.n	544e <rx_demux+0x6>
	done->hdr.link = link;
    558c:	6037      	str	r7, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    558e:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    5590:	fb00 2101 	mla	r1, r0, r1, r2
    5594:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
    5596:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
    5598:	e7a9      	b.n	54ee <rx_demux+0xa6>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    559a:	2e00      	cmp	r6, #0
    559c:	d1aa      	bne.n	54f4 <rx_demux+0xac>
    559e:	f1b8 0f00 	cmp.w	r8, #0
    55a2:	d0d3      	beq.n	554c <rx_demux+0x104>
    55a4:	f890 3020 	ldrb.w	r3, [r0, #32]
    55a8:	07db      	lsls	r3, r3, #31
    55aa:	d4cf      	bmi.n	554c <rx_demux+0x104>
    55ac:	e7a2      	b.n	54f4 <rx_demux+0xac>
		LL_ASSERT(0);
    55ae:	4a0a      	ldr	r2, [pc, #40]	; (55d8 <rx_demux+0x190>)
    55b0:	490c      	ldr	r1, [pc, #48]	; (55e4 <rx_demux+0x19c>)
    55b2:	480b      	ldr	r0, [pc, #44]	; (55e0 <rx_demux+0x198>)
    55b4:	f240 6362 	movw	r3, #1634	; 0x662
    55b8:	f003 fdd6 	bl	9168 <printk>
    55bc:	4040      	eors	r0, r0
    55be:	f380 8811 	msr	BASEPRI, r0
    55c2:	f04f 0003 	mov.w	r0, #3
    55c6:	df02      	svc	2
	break;
    55c8:	e741      	b.n	544e <rx_demux+0x6>
}
    55ca:	b002      	add	sp, #8
    55cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55d0:	20000134 	.word	0x20000134
    55d4:	20000c68 	.word	0x20000c68
    55d8:	0000ca92 	.word	0x0000ca92
    55dc:	0000cb92 	.word	0x0000cb92
    55e0:	0000c40b 	.word	0x0000c40b
    55e4:	0000d151 	.word	0x0000d151
    55e8:	20000108 	.word	0x20000108
    55ec:	0000cb95 	.word	0x0000cb95
    55f0:	20000288 	.word	0x20000288
    55f4:	0000cb8d 	.word	0x0000cb8d
    55f8:	0000cba5 	.word	0x0000cba5

000055fc <ull_prepare_dequeue_iter>:
{
    55fc:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    55fe:	4a0c      	ldr	r2, [pc, #48]	; (5630 <ull_prepare_dequeue_iter+0x34>)
{
    5600:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    5602:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
    5604:	7819      	ldrb	r1, [r3, #0]
    5606:	78d5      	ldrb	r5, [r2, #3]
    5608:	7810      	ldrb	r0, [r2, #0]
    560a:	42a1      	cmp	r1, r4
    560c:	bf24      	itt	cs
    560e:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
    5610:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
    5612:	7819      	ldrb	r1, [r3, #0]
    5614:	428d      	cmp	r5, r1
    5616:	d009      	beq.n	562c <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
    5618:	1c4a      	adds	r2, r1, #1
    561a:	b2d2      	uxtb	r2, r2
		i = 0U;
    561c:	4294      	cmp	r4, r2
    561e:	bf08      	it	eq
    5620:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    5622:	4c04      	ldr	r4, [pc, #16]	; (5634 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
    5624:	701a      	strb	r2, [r3, #0]
	p = (void *)(fifo + (*idx) * size);
    5626:	fb01 4000 	mla	r0, r1, r0, r4
}
    562a:	bd30      	pop	{r4, r5, pc}
		return NULL;
    562c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    562e:	e7fc      	b.n	562a <ull_prepare_dequeue_iter+0x2e>
    5630:	20000134 	.word	0x20000134
    5634:	20000138 	.word	0x20000138

00005638 <ull_event_done>:
{
    5638:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    563a:	4a10      	ldr	r2, [pc, #64]	; (567c <ull_event_done+0x44>)
	u8_t _first = *first; /* Copy read-index */
    563c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    563e:	78d4      	ldrb	r4, [r2, #3]
    5640:	7855      	ldrb	r5, [r2, #1]
    5642:	429c      	cmp	r4, r3
{
    5644:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
    5646:	7810      	ldrb	r0, [r2, #0]
    5648:	d016      	beq.n	5678 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
    564a:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
    564e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    5650:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
    5652:	b2db      	uxtb	r3, r3
		_first = 0U;
    5654:	429d      	cmp	r5, r3
    5656:	bf08      	it	eq
    5658:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    565a:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    565c:	b154      	cbz	r4, 5674 <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
    565e:	2300      	movs	r3, #0
	link = evdone->hdr.link;
    5660:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
    5662:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    5664:	2301      	movs	r3, #1
    5666:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    5668:	6221      	str	r1, [r4, #32]
	ull_rx_put(link, evdone);
    566a:	4621      	mov	r1, r4
    566c:	f7ff fe9c 	bl	53a8 <ull_rx_put>
	ull_rx_sched();
    5670:	f7ff fea0 	bl	53b4 <ull_rx_sched>
}
    5674:	4620      	mov	r0, r4
    5676:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    5678:	2400      	movs	r4, #0
    567a:	e7fb      	b.n	5674 <ull_event_done+0x3c>
    567c:	20000108 	.word	0x20000108

00005680 <ticker_cb>:
	return adv;
}

static void ticker_cb(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		      void *param)
{
    5680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5684:	461c      	mov	r4, r3

	DEBUG_RADIO_PREPARE_A(1);

	lll = &adv->lll;

	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    5686:	f64f 73ff 	movw	r3, #65535	; 0xffff
    568a:	429a      	cmp	r2, r3
{
    568c:	b08a      	sub	sp, #40	; 0x28
    568e:	4680      	mov	r8, r0
    5690:	460f      	mov	r7, r1
    5692:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    5694:	d02d      	beq.n	56f2 <ticker_cb+0x72>
	return ++hdr->ref;
    5696:	7c23      	ldrb	r3, [r4, #16]
    5698:	3301      	adds	r3, #1
    569a:	b2db      	uxtb	r3, r3
    569c:	7423      	strb	r3, [r4, #16]
	    (lazy != TICKER_LAZY_MUST_EXPIRE)) {
		/* Increment prepare reference count */
		ref = ull_ref_inc(&adv->ull);
		LL_ASSERT(ref);
    569e:	b963      	cbnz	r3, 56ba <ticker_cb+0x3a>
    56a0:	4a2d      	ldr	r2, [pc, #180]	; (5758 <ticker_cb+0xd8>)
    56a2:	492e      	ldr	r1, [pc, #184]	; (575c <ticker_cb+0xdc>)
    56a4:	482e      	ldr	r0, [pc, #184]	; (5760 <ticker_cb+0xe0>)
    56a6:	f44f 638a 	mov.w	r3, #1104	; 0x450
    56aa:	f003 fd5d 	bl	9168 <printk>
    56ae:	4040      	eors	r0, r0
    56b0:	f380 8811 	msr	BASEPRI, r0
    56b4:	f04f 0003 	mov.w	r0, #3
    56b8:	df02      	svc	2

		/* Append timing parameters */
		p.ticks_at_expire = ticks_at_expire;
    56ba:	4d2a      	ldr	r5, [pc, #168]	; (5764 <ticker_cb+0xe4>)
	lll = &adv->lll;
    56bc:	f104 031c 	add.w	r3, r4, #28
		p.remainder = remainder;
		p.lazy = lazy;
		p.param = lll;
    56c0:	60eb      	str	r3, [r5, #12]
		mfy.param = &p;

		/* Kick LLL prepare */
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    56c2:	2200      	movs	r2, #0
		mfy.param = &p;
    56c4:	4b28      	ldr	r3, [pc, #160]	; (5768 <ticker_cb+0xe8>)
		p.lazy = lazy;
    56c6:	812e      	strh	r6, [r5, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    56c8:	4611      	mov	r1, r2
    56ca:	2001      	movs	r0, #1
		p.remainder = remainder;
    56cc:	e9c5 8700 	strd	r8, r7, [r5]
		mfy.param = &p;
    56d0:	609d      	str	r5, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    56d2:	f7fe f9dd 	bl	3a90 <mayfly_enqueue>
				     TICKER_USER_ID_LLL, 0, &mfy);
		LL_ASSERT(!ret);
    56d6:	b160      	cbz	r0, 56f2 <ticker_cb+0x72>
    56d8:	4a1f      	ldr	r2, [pc, #124]	; (5758 <ticker_cb+0xd8>)
    56da:	4924      	ldr	r1, [pc, #144]	; (576c <ticker_cb+0xec>)
    56dc:	4820      	ldr	r0, [pc, #128]	; (5760 <ticker_cb+0xe0>)
    56de:	f240 435c 	movw	r3, #1116	; 0x45c
    56e2:	f003 fd41 	bl	9168 <printk>
    56e6:	4040      	eors	r0, r0
    56e8:	f380 8811 	msr	BASEPRI, r0
    56ec:	f04f 0003 	mov.w	r0, #3
    56f0:	df02      	svc	2
#endif /* CONFIG_BT_PERIPHERAL */
	{
		u32_t random_delay;
		u32_t ret;

		lll_rng_isr_get(&random_delay, sizeof(random_delay));
    56f2:	2104      	movs	r1, #4
    56f4:	a809      	add	r0, sp, #36	; 0x24
    56f6:	f004 ffde 	bl	a6b6 <lll_rng_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    56fa:	9909      	ldr	r1, [sp, #36]	; 0x24
		random_delay += 1;

		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    56fc:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    56fe:	f240 1247 	movw	r2, #327	; 0x147
    5702:	fbb1 f3f2 	udiv	r3, r1, r2
    5706:	fb02 1313 	mls	r3, r2, r3, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    570a:	4a19      	ldr	r2, [pc, #100]	; (5770 <ticker_cb+0xf0>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    570c:	2000      	movs	r0, #0
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    570e:	21cc      	movs	r1, #204	; 0xcc
    5710:	1aa2      	subs	r2, r4, r2
    5712:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    5716:	4917      	ldr	r1, [pc, #92]	; (5774 <ticker_cb+0xf4>)
    5718:	9105      	str	r1, [sp, #20]
				    TICKER_USER_ID_ULL_HIGH,
				    (TICKER_ID_ADV_BASE +
    571a:	3202      	adds	r2, #2
		random_delay += 1;
    571c:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    571e:	e9cd 0003 	strd	r0, r0, [sp, #12]
    5722:	e9cd 0001 	strd	r0, r0, [sp, #4]
    5726:	9000      	str	r0, [sp, #0]
    5728:	b2d2      	uxtb	r2, r2
    572a:	2101      	movs	r1, #1
		random_delay += 1;
    572c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    572e:	f7fe ff27 	bl	4580 <ticker_update>
				     ull_adv_handle_get(adv)),
				    random_delay,
				    0, 0, 0, 0, 0,
				    ticker_op_update_cb, adv);
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    5732:	f030 0302 	bics.w	r3, r0, #2
    5736:	d00c      	beq.n	5752 <ticker_cb+0xd2>
    5738:	4a07      	ldr	r2, [pc, #28]	; (5758 <ticker_cb+0xd8>)
    573a:	490f      	ldr	r1, [pc, #60]	; (5778 <ticker_cb+0xf8>)
    573c:	4808      	ldr	r0, [pc, #32]	; (5760 <ticker_cb+0xe0>)
    573e:	f240 4372 	movw	r3, #1138	; 0x472
    5742:	f003 fd11 	bl	9168 <printk>
    5746:	4040      	eors	r0, r0
    5748:	f380 8811 	msr	BASEPRI, r0
    574c:	f04f 0003 	mov.w	r0, #3
    5750:	df02      	svc	2
			  (ret == TICKER_STATUS_BUSY));
	}

	DEBUG_RADIO_PREPARE_A(1);
}
    5752:	b00a      	add	sp, #40	; 0x28
    5754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5758:	0000cbcf 	.word	0x0000cbcf
    575c:	0000cbae 	.word	0x0000cbae
    5760:	0000c40b 	.word	0x0000c40b
    5764:	20001058 	.word	0x20001058
    5768:	20000298 	.word	0x20000298
    576c:	0000cb8d 	.word	0x0000cb8d
    5770:	20000f80 	.word	0x20000f80
    5774:	0000577d 	.word	0x0000577d
    5778:	0000cc47 	.word	0x0000cc47

0000577c <ticker_op_update_cb>:

static void ticker_op_update_cb(u32_t status, void *param)
{
    577c:	b510      	push	{r4, lr}
    577e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    5780:	b180      	cbz	r0, 57a4 <ticker_op_update_cb+0x28>
    5782:	f7ff fdcd 	bl	5320 <ull_disable_mark_get>
    5786:	4284      	cmp	r4, r0
    5788:	d00c      	beq.n	57a4 <ticker_op_update_cb+0x28>
    578a:	4a07      	ldr	r2, [pc, #28]	; (57a8 <ticker_op_update_cb+0x2c>)
    578c:	4907      	ldr	r1, [pc, #28]	; (57ac <ticker_op_update_cb+0x30>)
    578e:	4808      	ldr	r0, [pc, #32]	; (57b0 <ticker_op_update_cb+0x34>)
    5790:	f240 437b 	movw	r3, #1147	; 0x47b
    5794:	f003 fce8 	bl	9168 <printk>
    5798:	4040      	eors	r0, r0
    579a:	f380 8811 	msr	BASEPRI, r0
    579e:	f04f 0003 	mov.w	r0, #3
    57a2:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    57a4:	bd10      	pop	{r4, pc}
    57a6:	bf00      	nop
    57a8:	0000cbcf 	.word	0x0000cbcf
    57ac:	0000cc60 	.word	0x0000cc60
    57b0:	0000c40b 	.word	0x0000c40b

000057b4 <ll_adv_params_set>:
{
    57b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    57b6:	4c31      	ldr	r4, [pc, #196]	; (587c <ll_adv_params_set+0xc8>)
{
    57b8:	4607      	mov	r7, r0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    57ba:	6820      	ldr	r0, [r4, #0]
    57bc:	9000      	str	r0, [sp, #0]
    57be:	7920      	ldrb	r0, [r4, #4]
	if (!adv || adv->is_enabled) {
    57c0:	4c2f      	ldr	r4, [pc, #188]	; (5880 <ll_adv_params_set+0xcc>)
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    57c2:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!adv || adv->is_enabled) {
    57c6:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
    57ca:	f016 0601 	ands.w	r6, r6, #1
    57ce:	d152      	bne.n	5876 <ll_adv_params_set+0xc2>
	adv->lll.chan_map = chan_map;
    57d0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    57d4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    57d8:	f000 0007 	and.w	r0, r0, #7
    57dc:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
    57e0:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
    57e4:	f10d 0c08 	add.w	ip, sp, #8
		adv->interval = 0;
    57e8:	2901      	cmp	r1, #1
	adv->lll.chan_map = chan_map;
    57ea:	f005 0538 	and.w	r5, r5, #56	; 0x38
	pdu->type = pdu_adv_type[adv_type];
    57ee:	4461      	add	r1, ip
	adv->lll.chan_map = chan_map;
    57f0:	ea40 0005 	orr.w	r0, r0, r5
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    57f4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
    57f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
    57fc:	f811 1c08 	ldrb.w	r1, [r1, #-8]
    5800:	f04f 0027 	mov.w	r0, #39	; 0x27
    5804:	fb05 0000 	mla	r0, r5, r0, r0
    5808:	ea4f 1582 	mov.w	r5, r2, lsl #6
    580c:	f001 010f 	and.w	r1, r1, #15
    5810:	f005 0240 	and.w	r2, r5, #64	; 0x40
    5814:	ea42 0201 	orr.w	r2, r2, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5818:	f002 010f 	and.w	r1, r2, #15
		adv->interval = 0;
    581c:	bf08      	it	eq
    581e:	2700      	moveq	r7, #0
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5820:	2901      	cmp	r1, #1
    5822:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
	pdu->type = pdu_adv_type[adv_type];
    5826:	5422      	strb	r2, [r4, r0]
    5828:	eb04 0700 	add.w	r7, r4, r0
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    582c:	d11e      	bne.n	586c <ll_adv_params_set+0xb8>
		pdu->rx_addr = direct_addr_type;
    582e:	f363 12c7 	bfi	r2, r3, #7, #1
    5832:	5422      	strb	r2, [r4, r0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    5834:	9908      	ldr	r1, [sp, #32]
    5836:	2206      	movs	r2, #6
    5838:	f107 0008 	add.w	r0, r7, #8
    583c:	f004 fb7a 	bl	9f34 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    5840:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
    5842:	707b      	strb	r3, [r7, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    5844:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    5848:	2277      	movs	r2, #119	; 0x77
    584a:	2327      	movs	r3, #39	; 0x27
    584c:	fb13 2301 	smlabb	r3, r3, r1, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5850:	f005 0540 	and.w	r5, r5, #64	; 0x40
    5854:	f045 0504 	orr.w	r5, r5, #4
    5858:	54e5      	strb	r5, [r4, r3]
    585a:	18e2      	adds	r2, r4, r3
	if (pdu->len == 0) {
    585c:	7853      	ldrb	r3, [r2, #1]
    585e:	b913      	cbnz	r3, 5866 <ll_adv_params_set+0xb2>
		pdu->len = BDADDR_SIZE;
    5860:	2106      	movs	r1, #6
    5862:	7051      	strb	r1, [r2, #1]
	return 0;
    5864:	461e      	mov	r6, r3
}
    5866:	4630      	mov	r0, r6
    5868:	b003      	add	sp, #12
    586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (pdu->len == 0) {
    586c:	787b      	ldrb	r3, [r7, #1]
    586e:	2b00      	cmp	r3, #0
    5870:	d1e8      	bne.n	5844 <ll_adv_params_set+0x90>
		pdu->len = BDADDR_SIZE;
    5872:	2306      	movs	r3, #6
    5874:	e7e5      	b.n	5842 <ll_adv_params_set+0x8e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5876:	260c      	movs	r6, #12
    5878:	e7f5      	b.n	5866 <ll_adv_params_set+0xb2>
    587a:	bf00      	nop
    587c:	0000b884 	.word	0x0000b884
    5880:	20000f80 	.word	0x20000f80

00005884 <ll_adv_data_set>:
{
    5884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    5888:	4c1d      	ldr	r4, [pc, #116]	; (5900 <ll_adv_data_set+0x7c>)
    588a:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
    588e:	2327      	movs	r3, #39	; 0x27
    5890:	fb05 3303 	mla	r3, r5, r3, r3
    5894:	460f      	mov	r7, r1
    5896:	18e1      	adds	r1, r4, r3
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    5898:	5ce3      	ldrb	r3, [r4, r3]
{
    589a:	4606      	mov	r6, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    589c:	f003 000f 	and.w	r0, r3, #15
    58a0:	2801      	cmp	r0, #1
    58a2:	f105 0201 	add.w	r2, r5, #1
    58a6:	d027      	beq.n	58f8 <ll_adv_data_set+0x74>
	if (pdu->first == pdu->last) {
    58a8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    58ac:	42a8      	cmp	r0, r5
    58ae:	d103      	bne.n	58b8 <ll_adv_data_set+0x34>
		last = pdu->last + 1;
    58b0:	b2d5      	uxtb	r5, r2
			last = 0U;
    58b2:	2d02      	cmp	r5, #2
    58b4:	bf08      	it	eq
    58b6:	2500      	moveq	r5, #0
	pdu->tx_addr = prev->tx_addr;
    58b8:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	pdu->type = prev->type;
    58bc:	f3c3 0003 	ubfx	r0, r3, #0, #4
	return (void *)pdu->pdu[last];
    58c0:	2227      	movs	r2, #39	; 0x27
    58c2:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
    58c6:	fb05 2202 	mla	r2, r5, r2, r2
    58ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    58ce:	eb04 0802 	add.w	r8, r4, r2
    58d2:	4303      	orrs	r3, r0
    58d4:	54a3      	strb	r3, [r4, r2]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    58d6:	3102      	adds	r1, #2
    58d8:	2206      	movs	r2, #6
    58da:	f108 0002 	add.w	r0, r8, #2
    58de:	f004 fb29 	bl	9f34 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    58e2:	4632      	mov	r2, r6
    58e4:	4639      	mov	r1, r7
    58e6:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    58ea:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    58ec:	f004 fb22 	bl	9f34 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    58f0:	f888 6001 	strb.w	r6, [r8, #1]
	pdu->last = idx;
    58f4:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
}
    58f8:	2000      	movs	r0, #0
    58fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58fe:	bf00      	nop
    5900:	20000f80 	.word	0x20000f80

00005904 <ll_adv_scan_rsp_set>:
{
    5904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    5908:	4b19      	ldr	r3, [pc, #100]	; (5970 <ll_adv_scan_rsp_set+0x6c>)
    590a:	f893 4076 	ldrb.w	r4, [r3, #118]	; 0x76
    590e:	2277      	movs	r2, #119	; 0x77
    5910:	4605      	mov	r5, r0
    5912:	2027      	movs	r0, #39	; 0x27
    5914:	fb10 2004 	smlabb	r0, r0, r4, r2
	if (pdu->first == pdu->last) {
    5918:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    591c:	42a2      	cmp	r2, r4
    591e:	4688      	mov	r8, r1
    5920:	461e      	mov	r6, r3
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    5922:	eb03 0100 	add.w	r1, r3, r0
	if (pdu->first == pdu->last) {
    5926:	d104      	bne.n	5932 <ll_adv_scan_rsp_set+0x2e>
		last = pdu->last + 1;
    5928:	3401      	adds	r4, #1
    592a:	b2e4      	uxtb	r4, r4
			last = 0U;
    592c:	2c02      	cmp	r4, #2
    592e:	bf08      	it	eq
    5930:	2400      	moveq	r4, #0
	pdu->tx_addr = prev->tx_addr;
    5932:	5c1b      	ldrb	r3, [r3, r0]
	return (void *)pdu->pdu[last];
    5934:	2777      	movs	r7, #119	; 0x77
    5936:	2227      	movs	r2, #39	; 0x27
    5938:	f3c3 1380 	ubfx	r3, r3, #6, #1
    593c:	fb12 7204 	smlabb	r2, r2, r4, r7
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5940:	019b      	lsls	r3, r3, #6
    5942:	18b7      	adds	r7, r6, r2
    5944:	f043 0304 	orr.w	r3, r3, #4
    5948:	54b3      	strb	r3, [r6, r2]
	pdu->len = BDADDR_SIZE + len;
    594a:	1dab      	adds	r3, r5, #6
    594c:	707b      	strb	r3, [r7, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    594e:	2206      	movs	r2, #6
    5950:	3102      	adds	r1, #2
    5952:	1cb8      	adds	r0, r7, #2
    5954:	f004 faee 	bl	9f34 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    5958:	462a      	mov	r2, r5
    595a:	4641      	mov	r1, r8
    595c:	f107 0008 	add.w	r0, r7, #8
    5960:	f004 fae8 	bl	9f34 <memcpy>
	pdu->last = idx;
    5964:	f886 4076 	strb.w	r4, [r6, #118]	; 0x76
}
    5968:	2000      	movs	r0, #0
    596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    596e:	bf00      	nop
    5970:	20000f80 	.word	0x20000f80

00005974 <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    5974:	6800      	ldr	r0, [r0, #0]
    5976:	4b03      	ldr	r3, [pc, #12]	; (5984 <ull_adv_lll_handle_get+0x10>)
    5978:	1ac0      	subs	r0, r0, r3
    597a:	23cc      	movs	r3, #204	; 0xcc
    597c:	fbb0 f0f3 	udiv	r0, r0, r3
}
    5980:	b280      	uxth	r0, r0
    5982:	4770      	bx	lr
    5984:	20000f80 	.word	0x20000f80

00005988 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
    5988:	b938      	cbnz	r0, 599a <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    598a:	4805      	ldr	r0, [pc, #20]	; (59a0 <ull_adv_is_enabled_get+0x18>)
    598c:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
	return &ll_adv[handle];
    5990:	f013 0f01 	tst.w	r3, #1
    5994:	bf08      	it	eq
    5996:	2000      	moveq	r0, #0
    5998:	4770      	bx	lr
		return NULL;
    599a:	2000      	movs	r0, #0
}
    599c:	4770      	bx	lr
    599e:	bf00      	nop
    59a0:	20000f80 	.word	0x20000f80

000059a4 <disable.constprop.0>:
	ll_rx_link_release(adv->link_cc_free);
	adv->link_cc_free = NULL;
}
#endif /* CONFIG_BT_PERIPHERAL */

static inline u8_t disable(u16_t handle)
    59a4:	b530      	push	{r4, r5, lr}
    59a6:	b085      	sub	sp, #20
{
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    59a8:	2302      	movs	r3, #2
	struct ll_adv_set *adv;
	void *mark;
	u32_t ret;

	adv = ull_adv_is_enabled_get(handle);
    59aa:	2000      	movs	r0, #0
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    59ac:	9303      	str	r3, [sp, #12]
	adv = ull_adv_is_enabled_get(handle);
    59ae:	f7ff ffeb 	bl	5988 <ull_adv_is_enabled_get>
	if (!adv) {
    59b2:	4604      	mov	r4, r0
    59b4:	b910      	cbnz	r0, 59bc <disable.constprop.0+0x18>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_mark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
    59b6:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
    59b8:	b005      	add	sp, #20
    59ba:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
    59bc:	f7ff fc9a 	bl	52f4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    59c0:	4284      	cmp	r4, r0
    59c2:	d00c      	beq.n	59de <disable.constprop.0+0x3a>
    59c4:	4a2b      	ldr	r2, [pc, #172]	; (5a74 <disable.constprop.0+0xd0>)
    59c6:	492c      	ldr	r1, [pc, #176]	; (5a78 <disable.constprop.0+0xd4>)
    59c8:	482c      	ldr	r0, [pc, #176]	; (5a7c <disable.constprop.0+0xd8>)
    59ca:	f240 530b 	movw	r3, #1291	; 0x50b
    59ce:	f003 fbcb 	bl	9168 <printk>
    59d2:	4040      	eors	r0, r0
    59d4:	f380 8811 	msr	BASEPRI, r0
    59d8:	f04f 0003 	mov.w	r0, #3
    59dc:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    59de:	ad03      	add	r5, sp, #12
    59e0:	2103      	movs	r1, #3
    59e2:	4b27      	ldr	r3, [pc, #156]	; (5a80 <disable.constprop.0+0xdc>)
    59e4:	9500      	str	r5, [sp, #0]
    59e6:	2202      	movs	r2, #2
    59e8:	2000      	movs	r0, #0
    59ea:	f7fe fe11 	bl	4610 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    59ee:	4629      	mov	r1, r5
    59f0:	f7ff fc72 	bl	52d8 <ull_ticker_status_take>
	if (ret) {
    59f4:	b190      	cbz	r0, 5a1c <disable.constprop.0+0x78>
		mark = ull_disable_mark(adv);
    59f6:	4620      	mov	r0, r4
    59f8:	f7ff fc7c 	bl	52f4 <ull_disable_mark>
		LL_ASSERT(mark == adv);
    59fc:	4284      	cmp	r4, r0
    59fe:	d0da      	beq.n	59b6 <disable.constprop.0+0x12>
    5a00:	4a1c      	ldr	r2, [pc, #112]	; (5a74 <disable.constprop.0+0xd0>)
    5a02:	491d      	ldr	r1, [pc, #116]	; (5a78 <disable.constprop.0+0xd4>)
    5a04:	481d      	ldr	r0, [pc, #116]	; (5a7c <disable.constprop.0+0xd8>)
    5a06:	f240 5324 	movw	r3, #1316	; 0x524
    5a0a:	f003 fbad 	bl	9168 <printk>
    5a0e:	4040      	eors	r0, r0
    5a10:	f380 8811 	msr	BASEPRI, r0
    5a14:	f04f 0003 	mov.w	r0, #3
    5a18:	df02      	svc	2
    5a1a:	e7cc      	b.n	59b6 <disable.constprop.0+0x12>
	ret = ull_disable(&adv->lll);
    5a1c:	f104 001c 	add.w	r0, r4, #28
    5a20:	f7ff fc84 	bl	532c <ull_disable>
	LL_ASSERT(!ret);
    5a24:	b160      	cbz	r0, 5a40 <disable.constprop.0+0x9c>
    5a26:	4a13      	ldr	r2, [pc, #76]	; (5a74 <disable.constprop.0+0xd0>)
    5a28:	4916      	ldr	r1, [pc, #88]	; (5a84 <disable.constprop.0+0xe0>)
    5a2a:	4814      	ldr	r0, [pc, #80]	; (5a7c <disable.constprop.0+0xd8>)
    5a2c:	f240 532a 	movw	r3, #1322	; 0x52a
    5a30:	f003 fb9a 	bl	9168 <printk>
    5a34:	4040      	eors	r0, r0
    5a36:	f380 8811 	msr	BASEPRI, r0
    5a3a:	f04f 0003 	mov.w	r0, #3
    5a3e:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    5a40:	4620      	mov	r0, r4
    5a42:	f7ff fc5f 	bl	5304 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    5a46:	4284      	cmp	r4, r0
    5a48:	d00c      	beq.n	5a64 <disable.constprop.0+0xc0>
    5a4a:	4a0a      	ldr	r2, [pc, #40]	; (5a74 <disable.constprop.0+0xd0>)
    5a4c:	490a      	ldr	r1, [pc, #40]	; (5a78 <disable.constprop.0+0xd4>)
    5a4e:	480b      	ldr	r0, [pc, #44]	; (5a7c <disable.constprop.0+0xd8>)
    5a50:	f240 532d 	movw	r3, #1325	; 0x52d
    5a54:	f003 fb88 	bl	9168 <printk>
    5a58:	4040      	eors	r0, r0
    5a5a:	f380 8811 	msr	BASEPRI, r0
    5a5e:	f04f 0003 	mov.w	r0, #3
    5a62:	df02      	svc	2
	adv->is_enabled = 0U;
    5a64:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    5a68:	f36f 0300 	bfc	r3, #0, #1
    5a6c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return 0;
    5a70:	2000      	movs	r0, #0
    5a72:	e7a1      	b.n	59b8 <disable.constprop.0+0x14>
    5a74:	0000cbcf 	.word	0x0000cbcf
    5a78:	0000cc8f 	.word	0x0000cc8f
    5a7c:	0000c40b 	.word	0x0000c40b
    5a80:	000052cd 	.word	0x000052cd
    5a84:	0000cb8d 	.word	0x0000cb8d

00005a88 <dfe_set_mode>:
/*****************************************************************************
 *DFE
 ****************************************************************************/
int dfe_set_mode(u8_t mode)
{
	if (mode != RADIO_DFEMODE_DFEOPMODE_Disabled &&
    5a88:	b110      	cbz	r0, 5a90 <dfe_set_mode+0x8>
    5a8a:	1e83      	subs	r3, r0, #2
    5a8c:	2b01      	cmp	r3, #1
    5a8e:	d803      	bhi.n	5a98 <dfe_set_mode+0x10>
	    mode != RADIO_DFEMODE_DFEOPMODE_AoA) {
		return -EINVAL;
	}

#if defined(CONFIG_BT_CTLR_DFE_TX)
	dfe_tx.dfe_op_mode = mode;
    5a90:	4b03      	ldr	r3, [pc, #12]	; (5aa0 <dfe_set_mode+0x18>)
    5a92:	7098      	strb	r0, [r3, #2]
#endif /* CONFIG_BT_CTLR_DFE_TX */
#if defined(CONFIG_BT_CTLR_DFE_RX)
	dfe_rx.dfe_op_mode = mode;
#endif /* CONFIG_BT_CTLR_DFE_RX */
	return 0;
    5a94:	2000      	movs	r0, #0
    5a96:	4770      	bx	lr
		return -EINVAL;
    5a98:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
    5a9c:	4770      	bx	lr
    5a9e:	bf00      	nop
    5aa0:	200018e3 	.word	0x200018e3

00005aa4 <dfe_set_duration>:

int dfe_set_duration(u8_t numb_of_8us_periods)
{
	if (numb_of_8us_periods > DFE_MAX_8US_PERIODS)
		return -EINVAL;
	else if(numb_of_8us_periods < DFE_MIN_8US_PERIODS)
    5aa4:	1e83      	subs	r3, r0, #2
    5aa6:	2b12      	cmp	r3, #18
		return -EINVAL;

#if defined(CONFIG_BT_CTLR_DFE_TX)
	dfe_tx.dfe_duration = numb_of_8us_periods;
    5aa8:	bf9d      	ittte	ls
    5aaa:	4b03      	ldrls	r3, [pc, #12]	; (5ab8 <dfe_set_duration+0x14>)
    5aac:	7058      	strbls	r0, [r3, #1]
#endif /* CONFIG_BT_CTLR_DFE_TX */
#if defined(CONFIG_BT_CTLR_DFE_RX)
	dfe_rx.dfe_duration = numb_of_8us_periods;
#endif /* CONFIG_BT_CTLR_DFE_RX */
	return 0;
    5aae:	2000      	movls	r0, #0
		return -EINVAL;
    5ab0:	f06f 0015 	mvnhi.w	r0, #21
}
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	200018e3 	.word	0x200018e3

00005abc <dfe_get_duration_us>:
u16_t dfe_get_duration_us()
{
	u16_t duration;

#if IS_ENABLED(CONFIG_BT_CTLR_DFE_TX)
	duration = dfe_tx.dfe_duration;
    5abc:	4b01      	ldr	r3, [pc, #4]	; (5ac4 <dfe_get_duration_us+0x8>)
    5abe:	7858      	ldrb	r0, [r3, #1]
#endif /* CONFIG_BT_CTLR_DFE_TX */
#if defined(CONFIG_BT_CTLR_DFE_RX)
	duration = dfe_rx.dfe_duration;
#endif /* CONFIG_BT_CTLR_DFE_RX */
	return duration * DFE_DURATION_MIN_UNIT_US;
}
    5ac0:	00c0      	lsls	r0, r0, #3
    5ac2:	4770      	bx	lr
    5ac4:	200018e3 	.word	0x200018e3

00005ac8 <dfe_common_init>:
#endif /* CONFIG_BT_CTLR_DFE_RX */

void dfe_common_init(void)
{
#if defined(CONFIG_BT_CTLR_DFE_TX)
	dfe_tx.start_of_dfe = RADIO_DFECTRL1_DFEINEXTENSION_CRC;
    5ac8:	4b01      	ldr	r3, [pc, #4]	; (5ad0 <dfe_common_init+0x8>)
    5aca:	2201      	movs	r2, #1
    5acc:	701a      	strb	r2, [r3, #0]
#endif /* CONFIG_BT_CTLR_DFE_TX */
}
    5ace:	4770      	bx	lr
    5ad0:	200018e3 	.word	0x200018e3

00005ad4 <dfe_init_adv_tx>:

#if defined(CONFIG_BT_CTLR_DFE_TX)
void dfe_init_adv_tx(void)
{
    5ad4:	b510      	push	{r4, lr}
	if (dfe_tx.dfe_op_mode == RADIO_DFEMODE_DFEOPMODE_AoA &&
    5ad6:	4c0c      	ldr	r4, [pc, #48]	; (5b08 <dfe_init_adv_tx+0x34>)
    5ad8:	78a0      	ldrb	r0, [r4, #2]
    5ada:	2803      	cmp	r0, #3
    5adc:	d10f      	bne.n	5afe <dfe_init_adv_tx+0x2a>
    5ade:	7863      	ldrb	r3, [r4, #1]
    5ae0:	2b01      	cmp	r3, #1
    5ae2:	d90c      	bls.n	5afe <dfe_init_adv_tx+0x2a>
	    dfe_tx.dfe_duration >= DFE_MIN_8US_PERIODS) {
		radio_dfe_mode_set(dfe_tx.dfe_op_mode);
    5ae4:	f001 f918 	bl	6d18 <radio_dfe_mode_set>
		radio_cte_inline_ctrl_set(RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled);
    5ae8:	2000      	movs	r0, #0
    5aea:	f001 f927 	bl	6d3c <radio_cte_inline_ctrl_set>
		radio_dfe_numberof8us_set(dfe_tx.dfe_duration);
    5aee:	7860      	ldrb	r0, [r4, #1]
    5af0:	f001 f936 	bl	6d60 <radio_dfe_numberof8us_set>
		radio_dfe_inextension_set(dfe_tx.start_of_dfe);
    5af4:	7820      	ldrb	r0, [r4, #0]
	} else {
		radio_dfe_mode_set(RADIO_DFEMODE_DFEOPMODE_Disabled);
	}
}
    5af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_dfe_inextension_set(dfe_tx.start_of_dfe);
    5afa:	f001 b943 	b.w	6d84 <radio_dfe_inextension_set>
}
    5afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_dfe_mode_set(RADIO_DFEMODE_DFEOPMODE_Disabled);
    5b02:	2000      	movs	r0, #0
    5b04:	f001 b908 	b.w	6d18 <radio_dfe_mode_set>
    5b08:	200018e3 	.word	0x200018e3

00005b0c <ll_wl_clear>:
{
	return WL_SIZE;
}

u8_t ll_wl_clear(void)
{
    5b0c:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
    5b0e:	2000      	movs	r0, #0
    5b10:	f004 fdb5 	bl	a67e <ull_adv_filter_pol_get>
    5b14:	b928      	cbnz	r0, 5b22 <ll_wl_clear+0x16>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
    5b16:	4b04      	ldr	r3, [pc, #16]	; (5b28 <ll_wl_clear+0x1c>)
    5b18:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
    5b1a:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
    5b1c:	4b03      	ldr	r3, [pc, #12]	; (5b2c <ll_wl_clear+0x20>)
    5b1e:	7018      	strb	r0, [r3, #0]
}
    5b20:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    5b22:	200c      	movs	r0, #12
    5b24:	e7fc      	b.n	5b20 <ll_wl_clear+0x14>
    5b26:	bf00      	nop
    5b28:	200018e7 	.word	0x200018e7
    5b2c:	200018e6 	.word	0x200018e6

00005b30 <ll_wl_add>:
{
    5b30:	b570      	push	{r4, r5, r6, lr}
    5b32:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
    5b34:	2000      	movs	r0, #0
    5b36:	f004 fda2 	bl	a67e <ull_adv_filter_pol_get>
    5b3a:	bb38      	cbnz	r0, 5b8c <ll_wl_add+0x5c>
	if (addr->type == ADDR_TYPE_ANON) {
    5b3c:	7823      	ldrb	r3, [r4, #0]
    5b3e:	2bff      	cmp	r3, #255	; 0xff
    5b40:	d103      	bne.n	5b4a <ll_wl_add+0x1a>
		wl_anon = 1U;
    5b42:	4b13      	ldr	r3, [pc, #76]	; (5b90 <ll_wl_add+0x60>)
    5b44:	2201      	movs	r2, #1
    5b46:	701a      	strb	r2, [r3, #0]
}
    5b48:	bd70      	pop	{r4, r5, r6, pc}
	if (filter->enable_bitmask == 0xFF) {
    5b4a:	4d12      	ldr	r5, [pc, #72]	; (5b94 <ll_wl_add+0x64>)
    5b4c:	782a      	ldrb	r2, [r5, #0]
    5b4e:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
    5b50:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
    5b54:	d018      	beq.n	5b88 <ll_wl_add+0x58>
	     (filter->enable_bitmask & BIT(index));
    5b56:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
    5b5a:	f014 0401 	ands.w	r4, r4, #1
    5b5e:	d111      	bne.n	5b84 <ll_wl_add+0x54>
	filter->enable_bitmask |= BIT(index);
    5b60:	2601      	movs	r6, #1
    5b62:	4086      	lsls	r6, r0
    5b64:	4332      	orrs	r2, r6
    5b66:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    5b68:	f003 0301 	and.w	r3, r3, #1
    5b6c:	786a      	ldrb	r2, [r5, #1]
    5b6e:	4083      	lsls	r3, r0
    5b70:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    5b72:	2206      	movs	r2, #6
    5b74:	fb02 5000 	mla	r0, r2, r0, r5
    5b78:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    5b7a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    5b7c:	f004 f9da 	bl	9f34 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
    5b80:	b2e0      	uxtb	r0, r4
    5b82:	e7e1      	b.n	5b48 <ll_wl_add+0x18>
	     index++) {
    5b84:	3001      	adds	r0, #1
    5b86:	e7e6      	b.n	5b56 <ll_wl_add+0x26>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    5b88:	2407      	movs	r4, #7
    5b8a:	e7f9      	b.n	5b80 <ll_wl_add+0x50>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5b8c:	200c      	movs	r0, #12
    5b8e:	e7db      	b.n	5b48 <ll_wl_add+0x18>
    5b90:	200018e6 	.word	0x200018e6
    5b94:	200018e7 	.word	0x200018e7

00005b98 <ll_wl_remove>:
{
    5b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b9c:	4682      	mov	sl, r0
	if (ull_adv_filter_pol_get(0)) {
    5b9e:	2000      	movs	r0, #0
    5ba0:	f004 fd6d 	bl	a67e <ull_adv_filter_pol_get>
    5ba4:	4604      	mov	r4, r0
    5ba6:	2800      	cmp	r0, #0
    5ba8:	d133      	bne.n	5c12 <ll_wl_remove+0x7a>
	if (addr->type == ADDR_TYPE_ANON) {
    5baa:	f89a 7000 	ldrb.w	r7, [sl]
    5bae:	2fff      	cmp	r7, #255	; 0xff
    5bb0:	d103      	bne.n	5bba <ll_wl_remove+0x22>
		wl_anon = 0U;
    5bb2:	4b19      	ldr	r3, [pc, #100]	; (5c18 <ll_wl_remove+0x80>)
    5bb4:	7018      	strb	r0, [r3, #0]
}
    5bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!filter->enable_bitmask) {
    5bba:	4d18      	ldr	r5, [pc, #96]	; (5c1c <ll_wl_remove+0x84>)
    5bbc:	782b      	ldrb	r3, [r5, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    5bbe:	f10a 0a01 	add.w	sl, sl, #1
	if (!filter->enable_bitmask) {
    5bc2:	b913      	cbnz	r3, 5bca <ll_wl_remove+0x32>
		return BT_HCI_ERR_INVALID_PARAM;
    5bc4:	2412      	movs	r4, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    5bc6:	b2e0      	uxtb	r0, r4
    5bc8:	e7f5      	b.n	5bb6 <ll_wl_remove+0x1e>
	index = 8;
    5bca:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    5bcc:	f105 0802 	add.w	r8, r5, #2
    5bd0:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    5bd4:	3e01      	subs	r6, #1
    5bd6:	d3f5      	bcc.n	5bc4 <ll_wl_remove+0x2c>
		if ((filter->enable_bitmask & BIT(index)) &&
    5bd8:	782b      	ldrb	r3, [r5, #0]
    5bda:	40f3      	lsrs	r3, r6
    5bdc:	07da      	lsls	r2, r3, #31
    5bde:	d5f9      	bpl.n	5bd4 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    5be0:	786b      	ldrb	r3, [r5, #1]
    5be2:	4133      	asrs	r3, r6
    5be4:	407b      	eors	r3, r7
		if ((filter->enable_bitmask & BIT(index)) &&
    5be6:	07db      	lsls	r3, r3, #31
    5be8:	d4f4      	bmi.n	5bd4 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    5bea:	2206      	movs	r2, #6
    5bec:	4651      	mov	r1, sl
    5bee:	fb09 8006 	mla	r0, r9, r6, r8
    5bf2:	f004 f98f 	bl	9f14 <memcmp>
		     (addr_type & 0x01)) &&
    5bf6:	2800      	cmp	r0, #0
    5bf8:	d1ec      	bne.n	5bd4 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    5bfa:	2301      	movs	r3, #1
    5bfc:	fa03 f606 	lsl.w	r6, r3, r6
    5c00:	782b      	ldrb	r3, [r5, #0]
    5c02:	ea23 0306 	bic.w	r3, r3, r6
    5c06:	702b      	strb	r3, [r5, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    5c08:	786b      	ldrb	r3, [r5, #1]
    5c0a:	ea23 0606 	bic.w	r6, r3, r6
    5c0e:	706e      	strb	r6, [r5, #1]
			return 0;
    5c10:	e7d9      	b.n	5bc6 <ll_wl_remove+0x2e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5c12:	200c      	movs	r0, #12
    5c14:	e7cf      	b.n	5bb6 <ll_wl_remove+0x1e>
    5c16:	bf00      	nop
    5c18:	200018e6 	.word	0x200018e6
    5c1c:	200018e7 	.word	0x200018e7

00005c20 <ull_filter_reset>:
	wl_anon = 0U;
    5c20:	4a03      	ldr	r2, [pc, #12]	; (5c30 <ull_filter_reset+0x10>)
    5c22:	2300      	movs	r3, #0
    5c24:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    5c26:	4a03      	ldr	r2, [pc, #12]	; (5c34 <ull_filter_reset+0x14>)
    5c28:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    5c2a:	7053      	strb	r3, [r2, #1]
}
    5c2c:	4770      	bx	lr
    5c2e:	bf00      	nop
    5c30:	200018e6 	.word	0x200018e6
    5c34:	200018e7 	.word	0x200018e7

00005c38 <ull_filter_lll_get>:
{
    5c38:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
    5c3a:	b960      	cbnz	r0, 5c56 <ull_filter_lll_get+0x1e>
    5c3c:	4a07      	ldr	r2, [pc, #28]	; (5c5c <ull_filter_lll_get+0x24>)
    5c3e:	4908      	ldr	r1, [pc, #32]	; (5c60 <ull_filter_lll_get+0x28>)
    5c40:	4808      	ldr	r0, [pc, #32]	; (5c64 <ull_filter_lll_get+0x2c>)
    5c42:	f44f 7336 	mov.w	r3, #728	; 0x2d8
    5c46:	f003 fa8f 	bl	9168 <printk>
    5c4a:	4040      	eors	r0, r0
    5c4c:	f380 8811 	msr	BASEPRI, r0
    5c50:	f04f 0003 	mov.w	r0, #3
    5c54:	df02      	svc	2
}
    5c56:	4804      	ldr	r0, [pc, #16]	; (5c68 <ull_filter_lll_get+0x30>)
    5c58:	bd08      	pop	{r3, pc}
    5c5a:	bf00      	nop
    5c5c:	0000ccab 	.word	0x0000ccab
    5c60:	0000cd26 	.word	0x0000cd26
    5c64:	0000c40b 	.word	0x0000c40b
    5c68:	200018e7 	.word	0x200018e7

00005c6c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    5c6c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    5c6e:	4b08      	ldr	r3, [pc, #32]	; (5c90 <rtc0_nrf5_isr+0x24>)
    5c70:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    5c74:	b122      	cbz	r2, 5c80 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    5c76:	2000      	movs	r0, #0
    5c78:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    5c7c:	f7fe fc20 	bl	44c0 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    5c80:	2001      	movs	r0, #1
    5c82:	f7fd ff55 	bl	3b30 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
    5c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    5c8a:	2002      	movs	r0, #2
    5c8c:	f7fd bf50 	b.w	3b30 <mayfly_run>
    5c90:	4000b000 	.word	0x4000b000

00005c94 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5c94:	2801      	cmp	r0, #1
{
    5c96:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5c98:	d90c      	bls.n	5cb4 <ticker_start_op_cb+0x20>
    5c9a:	4a07      	ldr	r2, [pc, #28]	; (5cb8 <ticker_start_op_cb+0x24>)
    5c9c:	4907      	ldr	r1, [pc, #28]	; (5cbc <ticker_start_op_cb+0x28>)
    5c9e:	4808      	ldr	r0, [pc, #32]	; (5cc0 <ticker_start_op_cb+0x2c>)
    5ca0:	f240 2319 	movw	r3, #537	; 0x219
    5ca4:	f003 fa60 	bl	9168 <printk>
    5ca8:	4040      	eors	r0, r0
    5caa:	f380 8811 	msr	BASEPRI, r0
    5cae:	f04f 0003 	mov.w	r0, #3
    5cb2:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
    5cb4:	bd08      	pop	{r3, pc}
    5cb6:	bf00      	nop
    5cb8:	0000cd43 	.word	0x0000cd43
    5cbc:	0000cdc2 	.word	0x0000cdc2
    5cc0:	0000c40b 	.word	0x0000c40b

00005cc4 <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
    5cc4:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	u32_t preempt_to;
	int ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
    5cc6:	68c3      	ldr	r3, [r0, #12]
    5cc8:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    5cca:	4b16      	ldr	r3, [pc, #88]	; (5d24 <preempt_ticker_start+0x60>)
    5ccc:	2200      	movs	r2, #0
{
    5cce:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    5cd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5cd4:	4b14      	ldr	r3, [pc, #80]	; (5d28 <preempt_ticker_start+0x64>)
    5cd6:	9208      	str	r2, [sp, #32]
    5cd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5cdc:	e9cd 2202 	strd	r2, r2, [sp, #8]
    5ce0:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
    5ce2:	e9d1 5400 	ldrd	r5, r4, [r1]
    5ce6:	688b      	ldr	r3, [r1, #8]
    5ce8:	42a5      	cmp	r5, r4
    5cea:	bf2c      	ite	cs
    5cec:	ebc3 0305 	rsbcs	r3, r3, r5
    5cf0:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    5cf4:	9300      	str	r3, [sp, #0]
    5cf6:	6803      	ldr	r3, [r0, #0]
    5cf8:	4611      	mov	r1, r2
    5cfa:	4610      	mov	r0, r2
    5cfc:	f004 fc46 	bl	a58c <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    5d00:	2802      	cmp	r0, #2
    5d02:	d90c      	bls.n	5d1e <preempt_ticker_start+0x5a>
    5d04:	4a09      	ldr	r2, [pc, #36]	; (5d2c <preempt_ticker_start+0x68>)
    5d06:	490a      	ldr	r1, [pc, #40]	; (5d30 <preempt_ticker_start+0x6c>)
    5d08:	480a      	ldr	r0, [pc, #40]	; (5d34 <preempt_ticker_start+0x70>)
    5d0a:	f240 2337 	movw	r3, #567	; 0x237
    5d0e:	f003 fa2b 	bl	9168 <printk>
    5d12:	4040      	eors	r0, r0
    5d14:	f380 8811 	msr	BASEPRI, r0
    5d18:	f04f 0003 	mov.w	r0, #3
    5d1c:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
    5d1e:	b00b      	add	sp, #44	; 0x2c
    5d20:	bd30      	pop	{r4, r5, pc}
    5d22:	bf00      	nop
    5d24:	00005c95 	.word	0x00005c95
    5d28:	00005ed5 	.word	0x00005ed5
    5d2c:	0000cd43 	.word	0x0000cd43
    5d30:	0000cde1 	.word	0x0000cde1
    5d34:	0000c40b 	.word	0x0000c40b

00005d38 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
    5d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
    5d3a:	4d3c      	ldr	r5, [pc, #240]	; (5e2c <preempt+0xf4>)
{
    5d3c:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
    5d3e:	f7ff fb75 	bl	542c <ull_prepare_dequeue_get>
	u8_t idx = UINT8_MAX;
    5d42:	23ff      	movs	r3, #255	; 0xff
    5d44:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
    5d48:	68ab      	ldr	r3, [r5, #8]
    5d4a:	b35b      	cbz	r3, 5da4 <preempt+0x6c>
    5d4c:	682b      	ldr	r3, [r5, #0]
    5d4e:	b34b      	cbz	r3, 5da4 <preempt+0x6c>
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
    5d50:	f10d 000e 	add.w	r0, sp, #14
    5d54:	f7ff fc52 	bl	55fc <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    5d58:	4604      	mov	r4, r0
    5d5a:	b318      	cbz	r0, 5da4 <preempt+0x6c>
    5d5c:	f890 0020 	ldrb.w	r0, [r0, #32]
    5d60:	f010 0703 	ands.w	r7, r0, #3
    5d64:	d1f4      	bne.n	5d50 <preempt+0x18>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
    5d66:	ab05      	add	r3, sp, #20
    5d68:	9300      	str	r3, [sp, #0]
    5d6a:	686e      	ldr	r6, [r5, #4]
    5d6c:	682a      	ldr	r2, [r5, #0]
    5d6e:	69e1      	ldr	r1, [r4, #28]
    5d70:	68e0      	ldr	r0, [r4, #12]
    5d72:	ab04      	add	r3, sp, #16
    5d74:	47b0      	blx	r6
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
    5d76:	4606      	mov	r6, r0
    5d78:	b9b0      	cbnz	r0, 5da8 <preempt+0x70>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
    5d7a:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    5d7e:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
    5d80:	f043 0302 	orr.w	r3, r3, #2
    5d84:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    5d88:	4620      	mov	r0, r4
    5d8a:	69a3      	ldr	r3, [r4, #24]
    5d8c:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
    5d8e:	f10d 000e 	add.w	r0, sp, #14
    5d92:	f7ff fc33 	bl	55fc <ull_prepare_dequeue_iter>
		if (!next) {
    5d96:	b128      	cbz	r0, 5da4 <preempt+0x6c>
			return;
		}
	} while (next->is_aborted || next->is_resume);
    5d98:	f890 3020 	ldrb.w	r3, [r0, #32]
    5d9c:	079b      	lsls	r3, r3, #30
    5d9e:	d1f6      	bne.n	5d8e <preempt+0x56>

	preempt_ticker_start(&next->prepare_param);
    5da0:	f7ff ff90 	bl	5cc4 <preempt_ticker_start>
}
    5da4:	b00b      	add	sp, #44	; 0x2c
    5da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
    5da8:	68ab      	ldr	r3, [r5, #8]
    5daa:	6829      	ldr	r1, [r5, #0]
    5dac:	4638      	mov	r0, r7
    5dae:	4798      	blx	r3
	if (ret == -EAGAIN) {
    5db0:	f116 0f0b 	cmn.w	r6, #11
    5db4:	d133      	bne.n	5e1e <preempt+0xe6>
		u8_t iter_idx = UINT8_MAX;
    5db6:	23ff      	movs	r3, #255	; 0xff
    5db8:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
    5dbc:	f10d 000f 	add.w	r0, sp, #15
    5dc0:	f7ff fc1c 	bl	55fc <ull_prepare_dequeue_iter>
		while (iter) {
    5dc4:	b9e0      	cbnz	r0, 5e00 <preempt+0xc8>
	prepare_param.param = event.curr.param;
    5dc6:	682b      	ldr	r3, [r5, #0]
    5dc8:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    5dca:	2301      	movs	r3, #1
    5dcc:	9301      	str	r3, [sp, #4]
    5dce:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
    5dd0:	6028      	str	r0, [r5, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    5dd2:	9300      	str	r3, [sp, #0]
    5dd4:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
    5dd8:	9b04      	ldr	r3, [sp, #16]
    5dda:	aa06      	add	r2, sp, #24
    5ddc:	f7ff faf2 	bl	53c4 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    5de0:	2800      	cmp	r0, #0
    5de2:	d0d4      	beq.n	5d8e <preempt+0x56>
    5de4:	4a12      	ldr	r2, [pc, #72]	; (5e30 <preempt+0xf8>)
    5de6:	4913      	ldr	r1, [pc, #76]	; (5e34 <preempt+0xfc>)
    5de8:	f240 237f 	movw	r3, #639	; 0x27f
		LL_ASSERT(ret == -ECANCELED);
    5dec:	4812      	ldr	r0, [pc, #72]	; (5e38 <preempt+0x100>)
    5dee:	f003 f9bb 	bl	9168 <printk>
    5df2:	4040      	eors	r0, r0
    5df4:	f380 8811 	msr	BASEPRI, r0
    5df8:	f04f 0003 	mov.w	r0, #3
    5dfc:	df02      	svc	2
    5dfe:	e7c6      	b.n	5d8e <preempt+0x56>
			if (!iter->is_aborted &&
    5e00:	f890 3020 	ldrb.w	r3, [r0, #32]
    5e04:	079a      	lsls	r2, r3, #30
    5e06:	d4d9      	bmi.n	5dbc <preempt+0x84>
			    event.curr.param == iter->prepare_param.param) {
    5e08:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
    5e0a:	6829      	ldr	r1, [r5, #0]
    5e0c:	4291      	cmp	r1, r2
    5e0e:	d1d5      	bne.n	5dbc <preempt+0x84>
				iter->is_aborted = 1;
    5e10:	f043 0302 	orr.w	r3, r3, #2
    5e14:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
    5e18:	6983      	ldr	r3, [r0, #24]
    5e1a:	4798      	blx	r3
    5e1c:	e7ce      	b.n	5dbc <preempt+0x84>
		LL_ASSERT(ret == -ECANCELED);
    5e1e:	3648      	adds	r6, #72	; 0x48
    5e20:	d0b5      	beq.n	5d8e <preempt+0x56>
    5e22:	4a03      	ldr	r2, [pc, #12]	; (5e30 <preempt+0xf8>)
    5e24:	4905      	ldr	r1, [pc, #20]	; (5e3c <preempt+0x104>)
    5e26:	f240 2381 	movw	r3, #641	; 0x281
    5e2a:	e7df      	b.n	5dec <preempt+0xb4>
    5e2c:	2000106c 	.word	0x2000106c
    5e30:	0000cd43 	.word	0x0000cd43
    5e34:	0000cb8d 	.word	0x0000cb8d
    5e38:	0000c40b 	.word	0x0000c40b
    5e3c:	0000ce08 	.word	0x0000ce08

00005e40 <prepare>:
{
    5e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5e44:	b085      	sub	sp, #20
    5e46:	4698      	mov	r8, r3
    5e48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5e4a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
	u8_t idx = UINT8_MAX;
    5e4e:	23ff      	movs	r3, #255	; 0xff
{
    5e50:	4606      	mov	r6, r0
    5e52:	4689      	mov	r9, r1
    5e54:	4614      	mov	r4, r2
	u8_t idx = UINT8_MAX;
    5e56:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
    5e5a:	f10d 000f 	add.w	r0, sp, #15
    5e5e:	f7ff fbcd 	bl	55fc <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
    5e62:	b118      	cbz	r0, 5e6c <prepare+0x2c>
    5e64:	f890 3020 	ldrb.w	r3, [r0, #32]
    5e68:	079b      	lsls	r3, r3, #30
    5e6a:	d1f6      	bne.n	5e5a <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
    5e6c:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <prepare+0x84>)
    5e6e:	689a      	ldr	r2, [r3, #8]
    5e70:	b90a      	cbnz	r2, 5e76 <prepare+0x36>
    5e72:	b1e8      	cbz	r0, 5eb0 <prepare+0x70>
    5e74:	b1e7      	cbz	r7, 5eb0 <prepare+0x70>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    5e76:	e9cd 8700 	strd	r8, r7, [sp]
    5e7a:	4623      	mov	r3, r4
    5e7c:	462a      	mov	r2, r5
    5e7e:	4649      	mov	r1, r9
    5e80:	4630      	mov	r0, r6
    5e82:	f7ff fa9f 	bl	53c4 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    5e86:	b160      	cbz	r0, 5ea2 <prepare+0x62>
    5e88:	4a0f      	ldr	r2, [pc, #60]	; (5ec8 <prepare+0x88>)
    5e8a:	4910      	ldr	r1, [pc, #64]	; (5ecc <prepare+0x8c>)
    5e8c:	4810      	ldr	r0, [pc, #64]	; (5ed0 <prepare+0x90>)
    5e8e:	f240 13cd 	movw	r3, #461	; 0x1cd
    5e92:	f003 f969 	bl	9168 <printk>
    5e96:	4040      	eors	r0, r0
    5e98:	f380 8811 	msr	BASEPRI, r0
    5e9c:	f04f 0003 	mov.w	r0, #3
    5ea0:	df02      	svc	2
		if (is_resume) {
    5ea2:	b917      	cbnz	r7, 5eaa <prepare+0x6a>
		preempt_ticker_start(prepare_param);
    5ea4:	4628      	mov	r0, r5
    5ea6:	f7ff ff0d 	bl	5cc4 <preempt_ticker_start>
		return -EINPROGRESS;
    5eaa:	f06f 0043 	mvn.w	r0, #67	; 0x43
    5eae:	e006      	b.n	5ebe <prepare+0x7e>
	event.curr.param = prepare_param->param;
    5eb0:	68ea      	ldr	r2, [r5, #12]
	event.curr.abort_cb = abort_cb;
    5eb2:	f8c3 9008 	str.w	r9, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
    5eb6:	e9c3 2600 	strd	r2, r6, [r3]
	err = prepare_cb(prepare_param);
    5eba:	4628      	mov	r0, r5
    5ebc:	47a0      	blx	r4
}
    5ebe:	b005      	add	sp, #20
    5ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ec4:	2000106c 	.word	0x2000106c
    5ec8:	0000cd43 	.word	0x0000cd43
    5ecc:	0000cb8d 	.word	0x0000cb8d
    5ed0:	0000c40b 	.word	0x0000c40b

00005ed4 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    5ed4:	2200      	movs	r2, #0
{
    5ed6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    5ed8:	4611      	mov	r1, r2
    5eda:	4b09      	ldr	r3, [pc, #36]	; (5f00 <preempt_ticker_cb+0x2c>)
    5edc:	2001      	movs	r0, #1
    5ede:	f7fd fdd7 	bl	3a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
    5ee2:	b160      	cbz	r0, 5efe <preempt_ticker_cb+0x2a>
    5ee4:	4a07      	ldr	r2, [pc, #28]	; (5f04 <preempt_ticker_cb+0x30>)
    5ee6:	4908      	ldr	r1, [pc, #32]	; (5f08 <preempt_ticker_cb+0x34>)
    5ee8:	4808      	ldr	r0, [pc, #32]	; (5f0c <preempt_ticker_cb+0x38>)
    5eea:	f240 2345 	movw	r3, #581	; 0x245
    5eee:	f003 f93b 	bl	9168 <printk>
    5ef2:	4040      	eors	r0, r0
    5ef4:	f380 8811 	msr	BASEPRI, r0
    5ef8:	f04f 0003 	mov.w	r0, #3
    5efc:	df02      	svc	2
}
    5efe:	bd08      	pop	{r3, pc}
    5f00:	200002a8 	.word	0x200002a8
    5f04:	0000cd43 	.word	0x0000cd43
    5f08:	0000cb8d 	.word	0x0000cb8d
    5f0c:	0000c40b 	.word	0x0000c40b

00005f10 <lll_init>:
{
    5f10:	b510      	push	{r4, lr}
    5f12:	4816      	ldr	r0, [pc, #88]	; (5f6c <lll_init+0x5c>)
    5f14:	f001 ff7a 	bl	7e0c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    5f18:	4b15      	ldr	r3, [pc, #84]	; (5f70 <lll_init+0x60>)
    5f1a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    5f1c:	b310      	cbz	r0, 5f64 <lll_init+0x54>
	event.curr.abort_cb = NULL;
    5f1e:	4b15      	ldr	r3, [pc, #84]	; (5f74 <lll_init+0x64>)
    5f20:	2200      	movs	r2, #0
    5f22:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
    5f24:	f000 f92c 	bl	6180 <lll_clock_init>
	if (err) {
    5f28:	4604      	mov	r4, r0
    5f2a:	b9c8      	cbnz	r0, 5f60 <lll_init+0x50>
	dfe_common_init();
    5f2c:	f7ff fdcc 	bl	5ac8 <dfe_common_init>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    5f30:	4622      	mov	r2, r4
    5f32:	4621      	mov	r1, r4
    5f34:	2001      	movs	r0, #1
    5f36:	f7fb fdfb 	bl	1b30 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    5f3a:	4622      	mov	r2, r4
    5f3c:	4621      	mov	r1, r4
    5f3e:	200b      	movs	r0, #11
    5f40:	f7fb fdf6 	bl	1b30 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
    5f44:	4622      	mov	r2, r4
    5f46:	4621      	mov	r1, r4
    5f48:	2018      	movs	r0, #24
    5f4a:	f7fb fdf1 	bl	1b30 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    5f4e:	2001      	movs	r0, #1
    5f50:	f7fb fdbc 	bl	1acc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
    5f54:	200b      	movs	r0, #11
    5f56:	f7fb fdb9 	bl	1acc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
    5f5a:	2018      	movs	r0, #24
    5f5c:	f7fb fdb6 	bl	1acc <arch_irq_enable>
}
    5f60:	4620      	mov	r0, r4
    5f62:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5f64:	f06f 0412 	mvn.w	r4, #18
    5f68:	e7fa      	b.n	5f60 <lll_init+0x50>
    5f6a:	bf00      	nop
    5f6c:	0000ce13 	.word	0x0000ce13
    5f70:	20001068 	.word	0x20001068
    5f74:	2000106c 	.word	0x2000106c

00005f78 <lll_trng_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
    5f78:	4a05      	ldr	r2, [pc, #20]	; (5f90 <lll_trng_get+0x18>)
{
    5f7a:	b410      	push	{r4}
    5f7c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
    5f7e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    5f80:	6882      	ldr	r2, [r0, #8]
    5f82:	6814      	ldr	r4, [r2, #0]
    5f84:	b28a      	uxth	r2, r1
    5f86:	4619      	mov	r1, r3
    5f88:	4623      	mov	r3, r4
}
    5f8a:	bc10      	pop	{r4}
    5f8c:	4718      	bx	r3
    5f8e:	bf00      	nop
    5f90:	20001068 	.word	0x20001068

00005f94 <lll_trng_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
    5f94:	4b08      	ldr	r3, [pc, #32]	; (5fb8 <lll_trng_isr_get+0x24>)
{
    5f96:	b430      	push	{r4, r5}
    5f98:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
    5f9a:	6818      	ldr	r0, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    5f9c:	6883      	ldr	r3, [r0, #8]
    5f9e:	685d      	ldr	r5, [r3, #4]
    5fa0:	b28a      	uxth	r2, r1
    5fa2:	b125      	cbz	r5, 5fae <lll_trng_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    5fa4:	4621      	mov	r1, r4
    5fa6:	46ac      	mov	ip, r5
    5fa8:	2300      	movs	r3, #0
}
    5faa:	bc30      	pop	{r4, r5}
    5fac:	4760      	bx	ip
    5fae:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5fb2:	bc30      	pop	{r4, r5}
    5fb4:	4770      	bx	lr
    5fb6:	bf00      	nop
    5fb8:	20001068 	.word	0x20001068

00005fbc <lll_resume>:
{
    5fbc:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
    5fbe:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    5fc2:	f003 0301 	and.w	r3, r3, #1
    5fc6:	e9cd 0300 	strd	r0, r3, [sp]
    5fca:	69c3      	ldr	r3, [r0, #28]
    5fcc:	6902      	ldr	r2, [r0, #16]
    5fce:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
    5fd2:	f7ff ff35 	bl	5e40 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    5fd6:	b168      	cbz	r0, 5ff4 <lll_resume+0x38>
    5fd8:	3044      	adds	r0, #68	; 0x44
    5fda:	d00b      	beq.n	5ff4 <lll_resume+0x38>
    5fdc:	4a07      	ldr	r2, [pc, #28]	; (5ffc <lll_resume+0x40>)
    5fde:	4908      	ldr	r1, [pc, #32]	; (6000 <lll_resume+0x44>)
    5fe0:	4808      	ldr	r0, [pc, #32]	; (6004 <lll_resume+0x48>)
    5fe2:	23e9      	movs	r3, #233	; 0xe9
    5fe4:	f003 f8c0 	bl	9168 <printk>
    5fe8:	4040      	eors	r0, r0
    5fea:	f380 8811 	msr	BASEPRI, r0
    5fee:	f04f 0003 	mov.w	r0, #3
    5ff2:	df02      	svc	2
}
    5ff4:	b003      	add	sp, #12
    5ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    5ffa:	bf00      	nop
    5ffc:	0000cd43 	.word	0x0000cd43
    6000:	0000ce17 	.word	0x0000ce17
    6004:	0000c40b 	.word	0x0000c40b

00006008 <lll_disable>:
{
    6008:	b513      	push	{r0, r1, r4, lr}
    600a:	4b1b      	ldr	r3, [pc, #108]	; (6078 <lll_disable+0x70>)
	if (!param || (param == event.curr.param)) {
    600c:	4604      	mov	r4, r0
    600e:	b110      	cbz	r0, 6016 <lll_disable+0xe>
    6010:	681a      	ldr	r2, [r3, #0]
    6012:	4282      	cmp	r2, r0
    6014:	d105      	bne.n	6022 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
    6016:	689a      	ldr	r2, [r3, #8]
    6018:	b16a      	cbz	r2, 6036 <lll_disable+0x2e>
    601a:	6819      	ldr	r1, [r3, #0]
    601c:	b159      	cbz	r1, 6036 <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
    601e:	2000      	movs	r0, #0
    6020:	4790      	blx	r2
		u8_t idx = UINT8_MAX;
    6022:	23ff      	movs	r3, #255	; 0xff
    6024:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
    6028:	f10d 0007 	add.w	r0, sp, #7
    602c:	f7ff fae6 	bl	55fc <ull_prepare_dequeue_iter>
		while (next) {
    6030:	b980      	cbnz	r0, 6054 <lll_disable+0x4c>
}
    6032:	b002      	add	sp, #8
    6034:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
    6036:	2c00      	cmp	r4, #0
    6038:	d0f3      	beq.n	6022 <lll_disable+0x1a>
    603a:	4a10      	ldr	r2, [pc, #64]	; (607c <lll_disable+0x74>)
    603c:	4910      	ldr	r1, [pc, #64]	; (6080 <lll_disable+0x78>)
    603e:	4811      	ldr	r0, [pc, #68]	; (6084 <lll_disable+0x7c>)
    6040:	23f3      	movs	r3, #243	; 0xf3
    6042:	f003 f891 	bl	9168 <printk>
    6046:	4040      	eors	r0, r0
    6048:	f380 8811 	msr	BASEPRI, r0
    604c:	f04f 0003 	mov.w	r0, #3
    6050:	df02      	svc	2
    6052:	e7e6      	b.n	6022 <lll_disable+0x1a>
			if (!next->is_aborted &&
    6054:	f890 3020 	ldrb.w	r3, [r0, #32]
    6058:	079b      	lsls	r3, r3, #30
    605a:	d4e5      	bmi.n	6028 <lll_disable+0x20>
    605c:	68c1      	ldr	r1, [r0, #12]
    605e:	b10c      	cbz	r4, 6064 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
    6060:	428c      	cmp	r4, r1
    6062:	d1e1      	bne.n	6028 <lll_disable+0x20>
				next->is_aborted = 1;
    6064:	f890 3020 	ldrb.w	r3, [r0, #32]
    6068:	f043 0302 	orr.w	r3, r3, #2
    606c:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
    6070:	6983      	ldr	r3, [r0, #24]
    6072:	4798      	blx	r3
    6074:	e7d8      	b.n	6028 <lll_disable+0x20>
    6076:	bf00      	nop
    6078:	2000106c 	.word	0x2000106c
    607c:	0000cd43 	.word	0x0000cd43
    6080:	0000ce2a 	.word	0x0000ce2a
    6084:	0000c40b 	.word	0x0000c40b

00006088 <lll_done>:
{
    6088:	b510      	push	{r4, lr}
    608a:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
    608c:	f7ff f9ce 	bl	542c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    6090:	b17c      	cbz	r4, 60b2 <lll_done+0x2a>
    6092:	b960      	cbnz	r0, 60ae <lll_done+0x26>
    6094:	4a1b      	ldr	r2, [pc, #108]	; (6104 <lll_done+0x7c>)
    6096:	491c      	ldr	r1, [pc, #112]	; (6108 <lll_done+0x80>)
    6098:	481c      	ldr	r0, [pc, #112]	; (610c <lll_done+0x84>)
    609a:	f44f 7391 	mov.w	r3, #290	; 0x122
    609e:	f003 f863 	bl	9168 <printk>
    60a2:	4040      	eors	r0, r0
    60a4:	f380 8811 	msr	BASEPRI, r0
    60a8:	f04f 0003 	mov.w	r0, #3
    60ac:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    60ae:	6820      	ldr	r0, [r4, #0]
    60b0:	e015      	b.n	60de <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
    60b2:	4c17      	ldr	r4, [pc, #92]	; (6110 <lll_done+0x88>)
    60b4:	68a3      	ldr	r3, [r4, #8]
    60b6:	b963      	cbnz	r3, 60d2 <lll_done+0x4a>
    60b8:	4a12      	ldr	r2, [pc, #72]	; (6104 <lll_done+0x7c>)
    60ba:	4916      	ldr	r1, [pc, #88]	; (6114 <lll_done+0x8c>)
    60bc:	4813      	ldr	r0, [pc, #76]	; (610c <lll_done+0x84>)
    60be:	f240 1327 	movw	r3, #295	; 0x127
    60c2:	f003 f851 	bl	9168 <printk>
    60c6:	4040      	eors	r0, r0
    60c8:	f380 8811 	msr	BASEPRI, r0
    60cc:	f04f 0003 	mov.w	r0, #3
    60d0:	df02      	svc	2
		param = event.curr.param;
    60d2:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
    60d4:	2300      	movs	r3, #0
    60d6:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
    60d8:	6023      	str	r3, [r4, #0]
		if (param) {
    60da:	b108      	cbz	r0, 60e0 <lll_done+0x58>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    60dc:	6800      	ldr	r0, [r0, #0]
    60de:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
    60e0:	f7ff faaa 	bl	5638 <ull_event_done>
	LL_ASSERT(evdone);
    60e4:	b960      	cbnz	r0, 6100 <lll_done+0x78>
    60e6:	4a07      	ldr	r2, [pc, #28]	; (6104 <lll_done+0x7c>)
    60e8:	490b      	ldr	r1, [pc, #44]	; (6118 <lll_done+0x90>)
    60ea:	4808      	ldr	r0, [pc, #32]	; (610c <lll_done+0x84>)
    60ec:	f240 133f 	movw	r3, #319	; 0x13f
    60f0:	f003 f83a 	bl	9168 <printk>
    60f4:	4040      	eors	r0, r0
    60f6:	f380 8811 	msr	BASEPRI, r0
    60fa:	f04f 0003 	mov.w	r0, #3
    60fe:	df02      	svc	2
}
    6100:	2000      	movs	r0, #0
    6102:	bd10      	pop	{r4, pc}
    6104:	0000cd43 	.word	0x0000cd43
    6108:	0000ce31 	.word	0x0000ce31
    610c:	0000c40b 	.word	0x0000c40b
    6110:	2000106c 	.word	0x2000106c
    6114:	0000ce40 	.word	0x0000ce40
    6118:	0000ce54 	.word	0x0000ce54

0000611c <lll_chan_set>:
	switch (chan) {
    611c:	2826      	cmp	r0, #38	; 0x26
{
    611e:	b510      	push	{r4, lr}
    6120:	4604      	mov	r4, r0
	switch (chan) {
    6122:	d00b      	beq.n	613c <lll_chan_set+0x20>
    6124:	2827      	cmp	r0, #39	; 0x27
    6126:	d00b      	beq.n	6140 <lll_chan_set+0x24>
    6128:	2825      	cmp	r0, #37	; 0x25
    612a:	d10b      	bne.n	6144 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    612c:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
    612e:	f000 fbdd 	bl	68ec <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    6132:	4620      	mov	r0, r4
}
    6134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    6138:	f000 bbde 	b.w	68f8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    613c:	201a      	movs	r0, #26
    613e:	e7f6      	b.n	612e <lll_chan_set+0x12>
		radio_freq_chan_set(80);
    6140:	2050      	movs	r0, #80	; 0x50
    6142:	e7f4      	b.n	612e <lll_chan_set+0x12>
		if (chan < 11) {
    6144:	280a      	cmp	r0, #10
    6146:	d802      	bhi.n	614e <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
    6148:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    614a:	0040      	lsls	r0, r0, #1
    614c:	e7ef      	b.n	612e <lll_chan_set+0x12>
		} else if (chan < 40) {
    614e:	2827      	cmp	r0, #39	; 0x27
    6150:	d801      	bhi.n	6156 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    6152:	3003      	adds	r0, #3
    6154:	e7f9      	b.n	614a <lll_chan_set+0x2e>
			LL_ASSERT(0);
    6156:	4a07      	ldr	r2, [pc, #28]	; (6174 <lll_chan_set+0x58>)
    6158:	4907      	ldr	r1, [pc, #28]	; (6178 <lll_chan_set+0x5c>)
    615a:	4808      	ldr	r0, [pc, #32]	; (617c <lll_chan_set+0x60>)
    615c:	f240 138d 	movw	r3, #397	; 0x18d
    6160:	f003 f802 	bl	9168 <printk>
    6164:	4040      	eors	r0, r0
    6166:	f380 8811 	msr	BASEPRI, r0
    616a:	f04f 0003 	mov.w	r0, #3
    616e:	df02      	svc	2
    6170:	e7df      	b.n	6132 <lll_chan_set+0x16>
    6172:	bf00      	nop
    6174:	0000cd43 	.word	0x0000cd43
    6178:	0000d151 	.word	0x0000d151
    617c:	0000c40b 	.word	0x0000c40b

00006180 <lll_clock_init>:
			void *user_data);

static struct device *dev;

int lll_clock_init(void)
{
    6180:	b510      	push	{r4, lr}
    6182:	4807      	ldr	r0, [pc, #28]	; (61a0 <lll_clock_init+0x20>)
    6184:	f001 fe42 	bl	7e0c <z_impl_device_get_binding>
	int err;

	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
    6188:	4a06      	ldr	r2, [pc, #24]	; (61a4 <lll_clock_init+0x24>)
    618a:	6010      	str	r0, [r2, #0]
	if (!dev) {
    618c:	b128      	cbz	r0, 619a <lll_clock_init+0x1a>
    618e:	6883      	ldr	r3, [r0, #8]
	}

	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF);

	return err;
}
    6190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	2101      	movs	r1, #1
    6198:	4718      	bx	r3
    619a:	f06f 0012 	mvn.w	r0, #18
    619e:	bd10      	pop	{r4, pc}
    61a0:	0000bd1d 	.word	0x0000bd1d
    61a4:	20001080 	.word	0x20001080

000061a8 <lll_hfclock_on>:
int lll_hfclock_on(void)
{
	int err;

	/* turn on radio clock in non-blocking mode. */
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
    61a8:	4b02      	ldr	r3, [pc, #8]	; (61b4 <lll_hfclock_on+0xc>)
    61aa:	6818      	ldr	r0, [r3, #0]
    61ac:	6883      	ldr	r3, [r0, #8]
    61ae:	2100      	movs	r1, #0
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	4718      	bx	r3
    61b4:	20001080 	.word	0x20001080

000061b8 <lll_hfclock_off>:
int lll_hfclock_off(void)
{
	int err;

	/* turn off radio clock in non-blocking mode. */
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
    61b8:	4b02      	ldr	r3, [pc, #8]	; (61c4 <lll_hfclock_off+0xc>)
    61ba:	6818      	ldr	r0, [r3, #0]
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->off(dev, sys);
    61bc:	6883      	ldr	r3, [r0, #8]
    61be:	2100      	movs	r1, #0
    61c0:	685b      	ldr	r3, [r3, #4]
    61c2:	4718      	bx	r3
    61c4:	20001080 	.word	0x20001080

000061c8 <isr_cleanup>:

	isr_cleanup(param);
}

static void isr_cleanup(void *param)
{
    61c8:	b508      	push	{r3, lr}
    61ca:	4601      	mov	r1, r0
	int err;

	radio_isr_set(isr_race, param);
    61cc:	4810      	ldr	r0, [pc, #64]	; (6210 <isr_cleanup+0x48>)
    61ce:	f000 fb3f 	bl	6850 <radio_isr_set>
	if (!radio_is_idle()) {
    61d2:	f000 fc2b 	bl	6a2c <radio_is_idle>
    61d6:	b908      	cbnz	r0, 61dc <isr_cleanup+0x14>
		radio_disable();
    61d8:	f000 fbf6 	bl	69c8 <radio_disable>
	}

	radio_tmr_stop();
    61dc:	f000 fd50 	bl	6c80 <radio_tmr_stop>

	err = lll_hfclock_off();
    61e0:	f7ff ffea 	bl	61b8 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
    61e4:	b170      	cbz	r0, 6204 <isr_cleanup+0x3c>
    61e6:	3010      	adds	r0, #16
    61e8:	d00c      	beq.n	6204 <isr_cleanup+0x3c>
    61ea:	4a0a      	ldr	r2, [pc, #40]	; (6214 <isr_cleanup+0x4c>)
    61ec:	490a      	ldr	r1, [pc, #40]	; (6218 <isr_cleanup+0x50>)
    61ee:	480b      	ldr	r0, [pc, #44]	; (621c <isr_cleanup+0x54>)
    61f0:	f240 235a 	movw	r3, #602	; 0x25a
    61f4:	f002 ffb8 	bl	9168 <printk>
    61f8:	4040      	eors	r0, r0
    61fa:	f380 8811 	msr	BASEPRI, r0
    61fe:	f04f 0003 	mov.w	r0, #3
    6202:	df02      	svc	2

	lll_done(NULL);
}
    6204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
    6208:	2000      	movs	r0, #0
    620a:	f7ff bf3d 	b.w	6088 <lll_done>
    620e:	bf00      	nop
    6210:	0000a719 	.word	0x0000a719
    6214:	0000ce79 	.word	0x0000ce79
    6218:	0000cefc 	.word	0x0000cefc
    621c:	0000c40b 	.word	0x0000c40b

00006220 <isr_tx>:
{
    6220:	b538      	push	{r3, r4, r5, lr}
    6222:	4604      	mov	r4, r0
	radio_status_reset();
    6224:	f000 fbe2 	bl	69ec <radio_status_reset>
	radio_tmr_status_reset();
    6228:	f000 fc9e 	bl	6b68 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
    622c:	2096      	movs	r0, #150	; 0x96
    622e:	f000 fcab 	bl	6b88 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6232:	2300      	movs	r3, #0
    6234:	461a      	mov	r2, r3
    6236:	4619      	mov	r1, r3
    6238:	4618      	mov	r0, r3
    623a:	f000 fc29 	bl	6a90 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
    623e:	f000 fc15 	bl	6a6c <radio_pkt_scratch_get>
    6242:	f000 fbaf 	bl	69a4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
    6246:	f000 fbdd 	bl	6a04 <radio_is_ready>
    624a:	b160      	cbz	r0, 6266 <isr_tx+0x46>
    624c:	4a12      	ldr	r2, [pc, #72]	; (6298 <isr_tx+0x78>)
    624e:	4913      	ldr	r1, [pc, #76]	; (629c <isr_tx+0x7c>)
    6250:	4813      	ldr	r0, [pc, #76]	; (62a0 <isr_tx+0x80>)
    6252:	f44f 73b4 	mov.w	r3, #360	; 0x168
    6256:	f002 ff87 	bl	9168 <printk>
    625a:	4040      	eors	r0, r0
    625c:	f380 8811 	msr	BASEPRI, r0
    6260:	f04f 0003 	mov.w	r0, #3
    6264:	df02      	svc	2
	radio_isr_set(isr_rx, param);
    6266:	4621      	mov	r1, r4
    6268:	480e      	ldr	r0, [pc, #56]	; (62a4 <isr_tx+0x84>)
    626a:	f000 faf1 	bl	6850 <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    626e:	f000 fd27 	bl	6cc0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
    6272:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    6274:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    6276:	4608      	mov	r0, r1
    6278:	f004 faaa 	bl	a7d0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
    627c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
    627e:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
    6280:	4608      	mov	r0, r1
    6282:	f004 faa3 	bl	a7cc <radio_tx_chain_delay_get>
    6286:	442c      	add	r4, r5
    6288:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
    628a:	1a20      	subs	r0, r4, r0
    628c:	f000 fd04 	bl	6c98 <radio_tmr_hcto_configure>
}
    6290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    6294:	f000 bd0c 	b.w	6cb0 <radio_tmr_end_capture>
    6298:	0000ce79 	.word	0x0000ce79
    629c:	0000cf0f 	.word	0x0000cf0f
    62a0:	0000c40b 	.word	0x0000c40b
    62a4:	000062fd 	.word	0x000062fd

000062a8 <abort_cb>:
{
    62a8:	b510      	push	{r4, lr}
    62aa:	460c      	mov	r4, r1
	if (!prepare_param) {
    62ac:	b930      	cbnz	r0, 62bc <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
    62ae:	480f      	ldr	r0, [pc, #60]	; (62ec <abort_cb+0x44>)
    62b0:	f000 face 	bl	6850 <radio_isr_set>
}
    62b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    62b8:	f000 bb86 	b.w	69c8 <radio_disable>
	err = lll_hfclock_off();
    62bc:	f7ff ff7c 	bl	61b8 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
    62c0:	b170      	cbz	r0, 62e0 <abort_cb+0x38>
    62c2:	3010      	adds	r0, #16
    62c4:	d00c      	beq.n	62e0 <abort_cb+0x38>
    62c6:	4a0a      	ldr	r2, [pc, #40]	; (62f0 <abort_cb+0x48>)
    62c8:	490a      	ldr	r1, [pc, #40]	; (62f4 <abort_cb+0x4c>)
    62ca:	480b      	ldr	r0, [pc, #44]	; (62f8 <abort_cb+0x50>)
    62cc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    62d0:	f002 ff4a 	bl	9168 <printk>
    62d4:	4040      	eors	r0, r0
    62d6:	f380 8811 	msr	BASEPRI, r0
    62da:	f04f 0003 	mov.w	r0, #3
    62de:	df02      	svc	2
	lll_done(param);
    62e0:	4620      	mov	r0, r4
}
    62e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
    62e6:	f7ff becf 	b.w	6088 <lll_done>
    62ea:	bf00      	nop
    62ec:	0000a71d 	.word	0x0000a71d
    62f0:	0000ce79 	.word	0x0000ce79
    62f4:	0000cefc 	.word	0x0000cefc
    62f8:	0000c40b 	.word	0x0000c40b

000062fc <isr_rx>:
{
    62fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62fe:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    6300:	f000 fb8a 	bl	6a18 <radio_is_done>
	if (trx_done) {
    6304:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    6308:	d03b      	beq.n	6382 <isr_rx+0x86>
		crc_ok = radio_crc_is_valid();
    630a:	f000 fba5 	bl	6a58 <radio_crc_is_valid>
    630e:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    6310:	f000 fc1a 	bl	6b48 <radio_filter_has_match>
    6314:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    6316:	f000 fc21 	bl	6b5c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    631a:	f000 fce9 	bl	6cf0 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    631e:	f000 fcd5 	bl	6ccc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6322:	f000 fbd9 	bl	6ad8 <radio_rssi_is_ready>
	radio_status_reset();
    6326:	f000 fb61 	bl	69ec <radio_status_reset>
	radio_tmr_status_reset();
    632a:	f000 fc1d 	bl	6b68 <radio_tmr_status_reset>
	radio_filter_status_reset();
    632e:	f000 fc03 	bl	6b38 <radio_filter_status_reset>
	radio_ar_status_reset();
    6332:	f000 fcd1 	bl	6cd8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    6336:	f000 fbc7 	bl	6ac8 <radio_rssi_status_reset>
	if (!trx_done) {
    633a:	b1d5      	cbz	r5, 6372 <isr_rx+0x76>
	if (crc_ok) {
    633c:	b1cf      	cbz	r7, 6372 <isr_rx+0x76>
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
    633e:	f000 fb95 	bl	6a6c <radio_pkt_scratch_get>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
    6342:	7a61      	ldrb	r1, [r4, #9]
    6344:	220b      	movs	r2, #11
    6346:	2327      	movs	r3, #39	; 0x27
    6348:	fb13 2301 	smlabb	r3, r3, r1, r2
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
    634c:	7802      	ldrb	r2, [r0, #0]
    634e:	f002 010f 	and.w	r1, r2, #15
    6352:	2903      	cmp	r1, #3
    6354:	eb04 0503 	add.w	r5, r4, r3
    6358:	d10b      	bne.n	6372 <isr_rx+0x76>
    635a:	7841      	ldrb	r1, [r0, #1]
    635c:	290c      	cmp	r1, #12
    635e:	d108      	bne.n	6372 <isr_rx+0x76>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    6360:	5ce3      	ldrb	r3, [r4, r3]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
    6362:	f003 010f 	and.w	r1, r3, #15
    6366:	2901      	cmp	r1, #1
    6368:	d003      	beq.n	6372 <isr_rx+0x76>
						rl_idx)) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
		isr_rx_sr_adva_check(adv, sr);
#else
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
    636a:	7a21      	ldrb	r1, [r4, #8]
    636c:	0649      	lsls	r1, r1, #25
    636e:	d50b      	bpl.n	6388 <isr_rx+0x8c>
    6370:	b956      	cbnz	r6, 6388 <isr_rx+0x8c>
	radio_isr_set(isr_done, param);
    6372:	4621      	mov	r1, r4
    6374:	481a      	ldr	r0, [pc, #104]	; (63e0 <isr_rx+0xe4>)
    6376:	f000 fa6b 	bl	6850 <radio_isr_set>
}
    637a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	radio_disable();
    637e:	f000 bb23 	b.w	69c8 <radio_disable>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    6382:	462e      	mov	r6, r5
    6384:	462f      	mov	r7, r5
    6386:	e7ce      	b.n	6326 <isr_rx+0x2a>
}

static inline bool isr_rx_sr_adva_check(struct pdu_adv *adv,
					struct pdu_adv *sr)
{
	return (adv->tx_addr == sr->rx_addr) &&
    6388:	f3c3 1380 	ubfx	r3, r3, #6, #1
    638c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6390:	d1ef      	bne.n	6372 <isr_rx+0x76>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    6392:	f100 0108 	add.w	r1, r0, #8
    6396:	2206      	movs	r2, #6
    6398:	1ca8      	adds	r0, r5, #2
    639a:	f003 fdbb 	bl	9f14 <memcmp>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    639e:	2800      	cmp	r0, #0
    63a0:	d1e7      	bne.n	6372 <isr_rx+0x76>
		radio_isr_set(isr_done, lll);
    63a2:	480f      	ldr	r0, [pc, #60]	; (63e0 <isr_rx+0xe4>)
    63a4:	4621      	mov	r1, r4
    63a6:	f000 fa53 	bl	6850 <radio_isr_set>
		radio_switch_complete_and_disable();
    63aa:	f000 fb7d 	bl	6aa8 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
    63ae:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    63b2:	2327      	movs	r3, #39	; 0x27
    63b4:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
    63b8:	305b      	adds	r0, #91	; 0x5b
    63ba:	f000 faf9 	bl	69b0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    63be:	f000 fb21 	bl	6a04 <radio_is_ready>
    63c2:	b160      	cbz	r0, 63de <isr_rx+0xe2>
    63c4:	4a07      	ldr	r2, [pc, #28]	; (63e4 <isr_rx+0xe8>)
    63c6:	4908      	ldr	r1, [pc, #32]	; (63e8 <isr_rx+0xec>)
    63c8:	4808      	ldr	r0, [pc, #32]	; (63ec <isr_rx+0xf0>)
    63ca:	f240 23b9 	movw	r3, #697	; 0x2b9
    63ce:	f002 fecb 	bl	9168 <printk>
    63d2:	4040      	eors	r0, r0
    63d4:	f380 8811 	msr	BASEPRI, r0
    63d8:	f04f 0003 	mov.w	r0, #3
    63dc:	df02      	svc	2
}
    63de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63e0:	0000a743 	.word	0x0000a743
    63e4:	0000ce79 	.word	0x0000ce79
    63e8:	0000cf0f 	.word	0x0000cf0f
    63ec:	0000c40b 	.word	0x0000c40b

000063f0 <chan_prepare>:
{
    63f0:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
    63f2:	7a42      	ldrb	r2, [r0, #9]
	if (first != pdu->last) {
    63f4:	7a83      	ldrb	r3, [r0, #10]
    63f6:	429a      	cmp	r2, r3
    63f8:	4604      	mov	r4, r0
    63fa:	d005      	beq.n	6408 <chan_prepare+0x18>
		first += 1U;
    63fc:	1c53      	adds	r3, r2, #1
    63fe:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    6400:	2b02      	cmp	r3, #2
			first = 0U;
    6402:	bf08      	it	eq
    6404:	2300      	moveq	r3, #0
		pdu->first = first;
    6406:	7243      	strb	r3, [r0, #9]
	return (void *)pdu->pdu[first];
    6408:	2202      	movs	r2, #2
    640a:	2527      	movs	r5, #39	; 0x27
    640c:	fb15 2503 	smlabb	r5, r5, r3, r2
	first = pdu->first;
    6410:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	if (first != pdu->last) {
    6414:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
	return (void *)pdu->pdu[first];
    6418:	f104 0609 	add.w	r6, r4, #9
	if (first != pdu->last) {
    641c:	429a      	cmp	r2, r3
	return (void *)pdu->pdu[first];
    641e:	eb06 0005 	add.w	r0, r6, r5
	if (first != pdu->last) {
    6422:	d006      	beq.n	6432 <chan_prepare+0x42>
		first += 1U;
    6424:	3301      	adds	r3, #1
    6426:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    6428:	2b02      	cmp	r3, #2
			first = 0U;
    642a:	bf08      	it	eq
    642c:	2300      	moveq	r3, #0
		pdu->first = first;
    642e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	radio_pkt_tx_set(pdu);
    6432:	f000 fabd 	bl	69b0 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6436:	5d73      	ldrb	r3, [r6, r5]
    6438:	f003 030f 	and.w	r3, r3, #15
    643c:	2b02      	cmp	r3, #2
		radio_isr_set(isr_tx, lll);
    643e:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6440:	d02f      	beq.n	64a2 <chan_prepare+0xb2>
		radio_isr_set(isr_tx, lll);
    6442:	481b      	ldr	r0, [pc, #108]	; (64b0 <chan_prepare+0xc0>)
    6444:	f000 fa04 	bl	6850 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
    6448:	2096      	movs	r0, #150	; 0x96
    644a:	f000 fb9d 	bl	6b88 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    644e:	2000      	movs	r0, #0
    6450:	f000 fb10 	bl	6a74 <radio_switch_complete_and_rx>
		chan = find_lsb_set(lll->chan_map_curr);
    6454:	7a23      	ldrb	r3, [r4, #8]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    6456:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    645a:	2b00      	cmp	r3, #0
    645c:	fa93 f0a3 	rbit	r0, r3
    6460:	fab0 f080 	clz	r0, r0
    6464:	bf08      	it	eq
    6466:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		LL_ASSERT(chan);
    646a:	1c45      	adds	r5, r0, #1
    646c:	d10c      	bne.n	6488 <chan_prepare+0x98>
    646e:	4a11      	ldr	r2, [pc, #68]	; (64b4 <chan_prepare+0xc4>)
    6470:	4911      	ldr	r1, [pc, #68]	; (64b8 <chan_prepare+0xc8>)
    6472:	4812      	ldr	r0, [pc, #72]	; (64bc <chan_prepare+0xcc>)
    6474:	f44f 7325 	mov.w	r3, #660	; 0x294
    6478:	f002 fe76 	bl	9168 <printk>
    647c:	4040      	eors	r0, r0
    647e:	f380 8811 	msr	BASEPRI, r0
    6482:	f04f 0003 	mov.w	r0, #3
    6486:	df02      	svc	2
		lll_chan_set(36 + chan);
    6488:	f105 0024 	add.w	r0, r5, #36	; 0x24
    648c:	f7ff fe46 	bl	611c <lll_chan_set>
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
    6490:	7a23      	ldrb	r3, [r4, #8]
    6492:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    6496:	1e51      	subs	r1, r2, #1
    6498:	400a      	ands	r2, r1
    649a:	f362 03c5 	bfi	r3, r2, #3, #3
    649e:	7223      	strb	r3, [r4, #8]
}
    64a0:	bd70      	pop	{r4, r5, r6, pc}
		radio_isr_set(isr_done, lll);
    64a2:	4807      	ldr	r0, [pc, #28]	; (64c0 <chan_prepare+0xd0>)
    64a4:	f000 f9d4 	bl	6850 <radio_isr_set>
		radio_switch_complete_and_disable();
    64a8:	f000 fafe 	bl	6aa8 <radio_switch_complete_and_disable>
    64ac:	e7d2      	b.n	6454 <chan_prepare+0x64>
    64ae:	bf00      	nop
    64b0:	00006221 	.word	0x00006221
    64b4:	0000ce79 	.word	0x0000ce79
    64b8:	0000cbca 	.word	0x0000cbca
    64bc:	0000c40b 	.word	0x0000c40b
    64c0:	0000a743 	.word	0x0000a743

000064c4 <prepare_cb>:
{
    64c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
    64c6:	68c4      	ldr	r4, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    64c8:	4b3d      	ldr	r3, [pc, #244]	; (65c0 <prepare_cb+0xfc>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
    64ca:	7925      	ldrb	r5, [r4, #4]
    64cc:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
    64ce:	f015 0501 	ands.w	r5, r5, #1
{
    64d2:	4606      	mov	r6, r0
	if (lll_is_stop(lll)) {
    64d4:	d016      	beq.n	6504 <prepare_cb+0x40>
		err = lll_hfclock_off();
    64d6:	f7ff fe6f 	bl	61b8 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
    64da:	b168      	cbz	r0, 64f8 <prepare_cb+0x34>
    64dc:	3010      	adds	r0, #16
    64de:	d00b      	beq.n	64f8 <prepare_cb+0x34>
    64e0:	4a38      	ldr	r2, [pc, #224]	; (65c4 <prepare_cb+0x100>)
    64e2:	4939      	ldr	r1, [pc, #228]	; (65c8 <prepare_cb+0x104>)
    64e4:	4839      	ldr	r0, [pc, #228]	; (65cc <prepare_cb+0x108>)
    64e6:	2394      	movs	r3, #148	; 0x94
    64e8:	f002 fe3e 	bl	9168 <printk>
    64ec:	4040      	eors	r0, r0
    64ee:	f380 8811 	msr	BASEPRI, r0
    64f2:	f04f 0003 	mov.w	r0, #3
    64f6:	df02      	svc	2
		lll_done(NULL);
    64f8:	2000      	movs	r0, #0
    64fa:	f7ff fdc5 	bl	6088 <lll_done>
}
    64fe:	2000      	movs	r0, #0
    6500:	b003      	add	sp, #12
    6502:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
    6504:	f000 f9c4 	bl	6890 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    6508:	4628      	mov	r0, r5
    650a:	f000 f9e9 	bl	68e0 <radio_tx_power_set>
	radio_phy_set(0, 0);
    650e:	4629      	mov	r1, r5
    6510:	4628      	mov	r0, r5
    6512:	f000 f9d5 	bl	68c0 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
    6516:	462a      	mov	r2, r5
    6518:	2125      	movs	r1, #37	; 0x25
    651a:	2008      	movs	r0, #8
    651c:	f000 fa16 	bl	694c <radio_pkt_configure>
	dfe_init_adv_tx();
    6520:	f7ff fad8 	bl	5ad4 <dfe_init_adv_tx>
	radio_aa_set((u8_t *)&aa);
    6524:	a801      	add	r0, sp, #4
    6526:	f000 f9f9 	bl	691c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    652a:	4929      	ldr	r1, [pc, #164]	; (65d0 <prepare_cb+0x10c>)
    652c:	f240 605b 	movw	r0, #1627	; 0x65b
    6530:	f000 fa86 	bl	6a40 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
    6534:	7a23      	ldrb	r3, [r4, #8]
    6536:	f3c3 0202 	ubfx	r2, r3, #0, #3
    653a:	f362 03c5 	bfi	r3, r2, #3, #3
    653e:	7223      	strb	r3, [r4, #8]
	chan_prepare(lll);
    6540:	4620      	mov	r0, r4
    6542:	f7ff ff55 	bl	63f0 <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
    6546:	7a23      	ldrb	r3, [r4, #8]
    6548:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    654c:	d007      	beq.n	655e <prepare_cb+0x9a>
		struct lll_filter *wl = ull_filter_lll_get(true);
    654e:	2001      	movs	r0, #1
    6550:	f7ff fb72 	bl	5c38 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
    6554:	7841      	ldrb	r1, [r0, #1]
    6556:	1c82      	adds	r2, r0, #2
    6558:	7800      	ldrb	r0, [r0, #0]
    655a:	f000 fac7 	bl	6aec <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
    655e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
    6560:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
    6562:	4638      	mov	r0, r7
    6564:	f004 f8b6 	bl	a6d4 <lll_evt_offset_get>
    6568:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
    656a:	6872      	ldr	r2, [r6, #4]
    656c:	f105 0109 	add.w	r1, r5, #9
    6570:	2001      	movs	r0, #1
    6572:	f000 fb15 	bl	6ba0 <radio_tmr_start>
	radio_tmr_end_capture();
    6576:	f000 fb9b 	bl	6cb0 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
    657a:	4620      	mov	r0, r4
    657c:	f7ff f9fa 	bl	5974 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
    6580:	1c81      	adds	r1, r0, #2
    6582:	462a      	mov	r2, r5
    6584:	b2c9      	uxtb	r1, r1
    6586:	4638      	mov	r0, r7
    6588:	f004 f8b2 	bl	a6f0 <lll_preempt_calc>
    658c:	b130      	cbz	r0, 659c <prepare_cb+0xd8>
		radio_isr_set(isr_abort, lll);
    658e:	4811      	ldr	r0, [pc, #68]	; (65d4 <prepare_cb+0x110>)
    6590:	4621      	mov	r1, r4
    6592:	f000 f95d 	bl	6850 <radio_isr_set>
		radio_disable();
    6596:	f000 fa17 	bl	69c8 <radio_disable>
    659a:	e7b0      	b.n	64fe <prepare_cb+0x3a>
		ret = lll_prepare_done(lll);
    659c:	4620      	mov	r0, r4
    659e:	f004 f897 	bl	a6d0 <lll_prepare_done>
		LL_ASSERT(!ret);
    65a2:	2800      	cmp	r0, #0
    65a4:	d0ab      	beq.n	64fe <prepare_cb+0x3a>
    65a6:	4a07      	ldr	r2, [pc, #28]	; (65c4 <prepare_cb+0x100>)
    65a8:	490b      	ldr	r1, [pc, #44]	; (65d8 <prepare_cb+0x114>)
    65aa:	4808      	ldr	r0, [pc, #32]	; (65cc <prepare_cb+0x108>)
    65ac:	23fa      	movs	r3, #250	; 0xfa
    65ae:	f002 fddb 	bl	9168 <printk>
    65b2:	4040      	eors	r0, r0
    65b4:	f380 8811 	msr	BASEPRI, r0
    65b8:	f04f 0003 	mov.w	r0, #3
    65bc:	df02      	svc	2
    65be:	e79e      	b.n	64fe <prepare_cb+0x3a>
    65c0:	8e89bed6 	.word	0x8e89bed6
    65c4:	0000ce79 	.word	0x0000ce79
    65c8:	0000cefc 	.word	0x0000cefc
    65cc:	0000c40b 	.word	0x0000c40b
    65d0:	00555555 	.word	0x00555555
    65d4:	0000a71d 	.word	0x0000a71d
    65d8:	0000cb8d 	.word	0x0000cb8d

000065dc <lll_adv_prepare>:
{
    65dc:	b513      	push	{r0, r1, r4, lr}
    65de:	4604      	mov	r4, r0
	err = lll_hfclock_on();
    65e0:	f7ff fde2 	bl	61a8 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
    65e4:	b168      	cbz	r0, 6602 <lll_adv_prepare+0x26>
    65e6:	3044      	adds	r0, #68	; 0x44
    65e8:	d00b      	beq.n	6602 <lll_adv_prepare+0x26>
    65ea:	4a12      	ldr	r2, [pc, #72]	; (6634 <lll_adv_prepare+0x58>)
    65ec:	4912      	ldr	r1, [pc, #72]	; (6638 <lll_adv_prepare+0x5c>)
    65ee:	4813      	ldr	r0, [pc, #76]	; (663c <lll_adv_prepare+0x60>)
    65f0:	2377      	movs	r3, #119	; 0x77
    65f2:	f002 fdb9 	bl	9168 <printk>
    65f6:	4040      	eors	r0, r0
    65f8:	f380 8811 	msr	BASEPRI, r0
    65fc:	f04f 0003 	mov.w	r0, #3
    6600:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
    6602:	4a0f      	ldr	r2, [pc, #60]	; (6640 <lll_adv_prepare+0x64>)
    6604:	490f      	ldr	r1, [pc, #60]	; (6644 <lll_adv_prepare+0x68>)
    6606:	4810      	ldr	r0, [pc, #64]	; (6648 <lll_adv_prepare+0x6c>)
    6608:	9400      	str	r4, [sp, #0]
    660a:	2300      	movs	r3, #0
    660c:	f004 f857 	bl	a6be <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    6610:	b168      	cbz	r0, 662e <lll_adv_prepare+0x52>
    6612:	3044      	adds	r0, #68	; 0x44
    6614:	d00b      	beq.n	662e <lll_adv_prepare+0x52>
    6616:	4a07      	ldr	r2, [pc, #28]	; (6634 <lll_adv_prepare+0x58>)
    6618:	4907      	ldr	r1, [pc, #28]	; (6638 <lll_adv_prepare+0x5c>)
    661a:	4808      	ldr	r0, [pc, #32]	; (663c <lll_adv_prepare+0x60>)
    661c:	237a      	movs	r3, #122	; 0x7a
    661e:	f002 fda3 	bl	9168 <printk>
    6622:	4040      	eors	r0, r0
    6624:	f380 8811 	msr	BASEPRI, r0
    6628:	f04f 0003 	mov.w	r0, #3
    662c:	df02      	svc	2
}
    662e:	b002      	add	sp, #8
    6630:	bd10      	pop	{r4, pc}
    6632:	bf00      	nop
    6634:	0000ce79 	.word	0x0000ce79
    6638:	0000cf21 	.word	0x0000cf21
    663c:	0000c40b 	.word	0x0000c40b
    6640:	000064c5 	.word	0x000064c5
    6644:	000062a9 	.word	0x000062a9
    6648:	0000a713 	.word	0x0000a713

0000664c <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    664c:	4b05      	ldr	r3, [pc, #20]	; (6664 <cntr_init+0x18>)
    664e:	2200      	movs	r2, #0
    6650:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6658:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
    665c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
    6660:	4770      	bx	lr
    6662:	bf00      	nop
    6664:	4000b000 	.word	0x4000b000

00006668 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    6668:	4a04      	ldr	r2, [pc, #16]	; (667c <cntr_start+0x14>)
    666a:	7813      	ldrb	r3, [r2, #0]
    666c:	1c59      	adds	r1, r3, #1
    666e:	7011      	strb	r1, [r2, #0]
    6670:	2001      	movs	r0, #1
    6672:	b913      	cbnz	r3, 667a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6674:	4a02      	ldr	r2, [pc, #8]	; (6680 <cntr_start+0x18>)
    6676:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    6678:	4618      	mov	r0, r3
}
    667a:	4770      	bx	lr
    667c:	20001919 	.word	0x20001919
    6680:	4000b000 	.word	0x4000b000

00006684 <cntr_stop>:

u32_t cntr_stop(void)
{
    6684:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
    6686:	4c0d      	ldr	r4, [pc, #52]	; (66bc <cntr_stop+0x38>)
    6688:	7823      	ldrb	r3, [r4, #0]
    668a:	b95b      	cbnz	r3, 66a4 <cntr_stop+0x20>
    668c:	4a0c      	ldr	r2, [pc, #48]	; (66c0 <cntr_stop+0x3c>)
    668e:	490d      	ldr	r1, [pc, #52]	; (66c4 <cntr_stop+0x40>)
    6690:	480d      	ldr	r0, [pc, #52]	; (66c8 <cntr_stop+0x44>)
    6692:	232e      	movs	r3, #46	; 0x2e
    6694:	f002 fd68 	bl	9168 <printk>
    6698:	4040      	eors	r0, r0
    669a:	f380 8811 	msr	BASEPRI, r0
    669e:	f04f 0003 	mov.w	r0, #3
    66a2:	df02      	svc	2

	if (--_refcount) {
    66a4:	7820      	ldrb	r0, [r4, #0]
    66a6:	3801      	subs	r0, #1
    66a8:	b2c0      	uxtb	r0, r0
    66aa:	7020      	strb	r0, [r4, #0]
    66ac:	2301      	movs	r3, #1
    66ae:	b910      	cbnz	r0, 66b6 <cntr_stop+0x32>
    66b0:	4a06      	ldr	r2, [pc, #24]	; (66cc <cntr_stop+0x48>)
    66b2:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
    66b4:	bd10      	pop	{r4, pc}
		return 1;
    66b6:	4618      	mov	r0, r3
    66b8:	e7fc      	b.n	66b4 <cntr_stop+0x30>
    66ba:	bf00      	nop
    66bc:	20001919 	.word	0x20001919
    66c0:	0000cf44 	.word	0x0000cf44
    66c4:	0000cfc9 	.word	0x0000cfc9
    66c8:	0000c40b 	.word	0x0000c40b
    66cc:	4000b004 	.word	0x4000b004

000066d0 <cntr_cnt_get>:
     return p_reg->COUNTER;
    66d0:	4b01      	ldr	r3, [pc, #4]	; (66d8 <cntr_cnt_get+0x8>)
    66d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    66d6:	4770      	bx	lr
    66d8:	4000b000 	.word	0x4000b000

000066dc <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
    66dc:	4b02      	ldr	r3, [pc, #8]	; (66e8 <cntr_cmp_set+0xc>)
    66de:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    66e2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
    66e6:	4770      	bx	lr
    66e8:	4000b000 	.word	0x4000b000

000066ec <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    66ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    66ee:	4b13      	ldr	r3, [pc, #76]	; (673c <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66f0:	4c13      	ldr	r4, [pc, #76]	; (6740 <do_ecb+0x54>)
    66f2:	2501      	movs	r5, #1
    66f4:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
    66f6:	2700      	movs	r7, #0
    66f8:	46a6      	mov	lr, r4
    66fa:	461a      	mov	r2, r3
    66fc:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    66fe:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    6702:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    6706:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    670a:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    670c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    6710:	b931      	cbnz	r1, 6720 <do_ecb+0x34>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    6712:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    6716:	b919      	cbnz	r1, 6720 <do_ecb+0x34>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    6718:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    671c:	2900      	cmp	r1, #0
    671e:	d1f5      	bne.n	670c <do_ecb+0x20>
    6720:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    6724:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    6728:	2900      	cmp	r1, #0
    672a:	d1e7      	bne.n	66fc <do_ecb+0x10>
    672c:	f8d2 c504 	ldr.w	ip, [r2, #1284]	; 0x504
    6730:	f1bc 0f00 	cmp.w	ip, #0
    6734:	d0e2      	beq.n	66fc <do_ecb+0x10>

	NRF_ECB->ECBDATAPTR = 0;
    6736:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    673c:	4000e000 	.word	0x4000e000
    6740:	4000e004 	.word	0x4000e004

00006744 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
    6744:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    6746:	4b08      	ldr	r3, [pc, #32]	; (6768 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    6748:	bf14      	ite	ne
    674a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
    674e:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    6752:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
    6756:	bf14      	ite	ne
    6758:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
    675c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
    6760:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
    6764:	4770      	bx	lr
    6766:	bf00      	nop
    6768:	4001f000 	.word	0x4001f000

0000676c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    676c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    676e:	4e2b      	ldr	r6, [pc, #172]	; (681c <sw_switch.isra.0+0xb0>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6770:	4f2b      	ldr	r7, [pc, #172]	; (6820 <sw_switch.isra.0+0xb4>)
    6772:	7835      	ldrb	r5, [r6, #0]
    6774:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 682c <sw_switch.isra.0+0xc0>
    6778:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
    677c:	00ec      	lsls	r4, r5, #3
    677e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    6782:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6786:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
    678a:	f105 040b 	add.w	r4, r5, #11
    678e:	b2e4      	uxtb	r4, r4
    6790:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
    6792:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    6796:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    679a:	3fc0      	subs	r7, #192	; 0xc0
    679c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    67a0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
    67a4:	462b      	mov	r3, r5

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    67a6:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
    67aa:	b390      	cbz	r0, 6812 <sw_switch.isra.0+0xa6>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52833_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52833_TXEN_TXIDLE_TX_2M_NS;
    67ac:	f649 70c4 	movw	r0, #40900	; 0x9fc4
    67b0:	f649 4740 	movw	r7, #40000	; 0x9c40
    67b4:	2a02      	cmp	r2, #2
    67b6:	bf14      	ite	ne
    67b8:	4602      	movne	r2, r0
    67ba:	463a      	moveq	r2, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_2M_NS;
    67bc:	f242 40b8 	movw	r0, #9400	; 0x24b8
    67c0:	f241 3788 	movw	r7, #5000	; 0x1388
    67c4:	2902      	cmp	r1, #2
    67c6:	bf14      	ite	ne
    67c8:	4601      	movne	r1, r0
    67ca:	4639      	moveq	r1, r7

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
#if defined(CONFIG_BT_CTLR_DF_SUBSYSTEM)
		delay = HAL_RADIO_NS2US_ROUND(
    67cc:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    67d0:	440a      	add	r2, r1
    67d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    67d6:	fbb2 f2f1 	udiv	r2, r2, r1

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
    67da:	4912      	ldr	r1, [pc, #72]	; (6824 <sw_switch.isra.0+0xb8>)
    67dc:	f8c4 1514 	str.w	r1, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
    67e0:	009b      	lsls	r3, r3, #2
    67e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    67e6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
    67ea:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
    67ee:	4291      	cmp	r1, r2
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
    67f0:	bf8a      	itet	hi
    67f2:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    67f6:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
    67f8:	1a8a      	subhi	r2, r1, r2
    67fa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
    67fe:	4b08      	ldr	r3, [pc, #32]	; (6820 <sw_switch.isra.0+0xb4>)
    6800:	f44f 6290 	mov.w	r2, #1152	; 0x480
    6804:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
    6808:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    680a:	f003 0301 	and.w	r3, r3, #1
    680e:	7033      	strb	r3, [r6, #0]
}
    6810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6812:	4a05      	ldr	r2, [pc, #20]	; (6828 <sw_switch.isra.0+0xbc>)
    6814:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    6818:	2228      	movs	r2, #40	; 0x28
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
    681a:	e7e1      	b.n	67e0 <sw_switch.isra.0+0x74>
    681c:	2000191a 	.word	0x2000191a
    6820:	4001f000 	.word	0x4001f000
    6824:	40001000 	.word	0x40001000
    6828:	40001004 	.word	0x40001004
    682c:	4000116c 	.word	0x4000116c

00006830 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
    6830:	4b04      	ldr	r3, [pc, #16]	; (6844 <isr_radio+0x14>)
    6832:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
    6836:	b123      	cbz	r3, 6842 <isr_radio+0x12>
		isr_cb(isr_cb_param);
    6838:	4b03      	ldr	r3, [pc, #12]	; (6848 <isr_radio+0x18>)
    683a:	4a04      	ldr	r2, [pc, #16]	; (684c <isr_radio+0x1c>)
    683c:	681b      	ldr	r3, [r3, #0]
    683e:	6810      	ldr	r0, [r2, #0]
    6840:	4718      	bx	r3
}
    6842:	4770      	bx	lr
    6844:	40001000 	.word	0x40001000
    6848:	20001188 	.word	0x20001188
    684c:	2000118c 	.word	0x2000118c

00006850 <radio_isr_set>:
{
    6850:	b538      	push	{r3, r4, r5, lr}
    6852:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
    6854:	2001      	movs	r0, #1
{
    6856:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
    6858:	f7fb f948 	bl	1aec <arch_irq_disable>
	isr_cb_param = param;
    685c:	4b08      	ldr	r3, [pc, #32]	; (6880 <radio_isr_set+0x30>)
    685e:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
    6860:	4b08      	ldr	r3, [pc, #32]	; (6884 <radio_isr_set+0x34>)
    6862:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    6864:	4b08      	ldr	r3, [pc, #32]	; (6888 <radio_isr_set+0x38>)
    6866:	2210      	movs	r2, #16
    6868:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    686c:	4b07      	ldr	r3, [pc, #28]	; (688c <radio_isr_set+0x3c>)
    686e:	2202      	movs	r2, #2
    6870:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    6874:	2001      	movs	r0, #1
}
    6876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
    687a:	f7fb b927 	b.w	1acc <arch_irq_enable>
    687e:	bf00      	nop
    6880:	2000118c 	.word	0x2000118c
    6884:	20001188 	.word	0x20001188
    6888:	40001000 	.word	0x40001000
    688c:	e000e100 	.word	0xe000e100

00006890 <radio_reset>:
{
    6890:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    6892:	2001      	movs	r0, #1
    6894:	f7fb f92a 	bl	1aec <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
    6898:	4b08      	ldr	r3, [pc, #32]	; (68bc <radio_reset+0x2c>)
    689a:	2200      	movs	r2, #0
    689c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    68a0:	2201      	movs	r2, #1
    68a2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    68a6:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    68aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
    68ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    68b2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    68b6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
    68ba:	bd08      	pop	{r3, pc}
    68bc:	40001000 	.word	0x40001000

000068c0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    68c0:	4b06      	ldr	r3, [pc, #24]	; (68dc <radio_phy_set+0x1c>)
	switch (phy) {
    68c2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    68c4:	bf14      	ite	ne
    68c6:	2203      	movne	r2, #3
    68c8:	2204      	moveq	r2, #4
    68ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    68ce:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    68d2:	f042 0201 	orr.w	r2, r2, #1
    68d6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
    68da:	4770      	bx	lr
    68dc:	40001000 	.word	0x40001000

000068e0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
    68e0:	4b01      	ldr	r3, [pc, #4]	; (68e8 <radio_tx_power_set+0x8>)
    68e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    68e6:	4770      	bx	lr
    68e8:	40001000 	.word	0x40001000

000068ec <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    68ec:	4b01      	ldr	r3, [pc, #4]	; (68f4 <radio_freq_chan_set+0x8>)
    68ee:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    68f2:	4770      	bx	lr
    68f4:	40001000 	.word	0x40001000

000068f8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    68f8:	4b07      	ldr	r3, [pc, #28]	; (6918 <radio_whiten_iv_set+0x20>)
    68fa:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    68fe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    6902:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    6906:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    690a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    690e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    6912:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6916:	4770      	bx	lr
    6918:	40001000 	.word	0x40001000

0000691c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    691c:	4a0a      	ldr	r2, [pc, #40]	; (6948 <radio_aa_set+0x2c>)
    691e:	2300      	movs	r3, #0
    6920:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    6924:	2301      	movs	r3, #1
    6926:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    692a:	78c3      	ldrb	r3, [r0, #3]
    692c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    6930:	7843      	ldrb	r3, [r0, #1]
    6932:	7881      	ldrb	r1, [r0, #2]
    6934:	041b      	lsls	r3, r3, #16
    6936:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    693a:	7801      	ldrb	r1, [r0, #0]
    693c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6940:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    6944:	4770      	bx	lr
    6946:	bf00      	nop
    6948:	40001000 	.word	0x40001000

0000694c <radio_pkt_configure>:
	switch (phy) {
    694c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    6950:	2b02      	cmp	r3, #2
{
    6952:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    6954:	bf14      	ite	ne
    6956:	2400      	movne	r4, #0
    6958:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
    695c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    695e:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    6962:	bf48      	it	mi
    6964:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    6968:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    696a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    696e:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    6970:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    6974:	4a09      	ldr	r2, [pc, #36]	; (699c <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
    6976:	4303      	orrs	r3, r0
    6978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    697c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    6980:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    6984:	4b06      	ldr	r3, [pc, #24]	; (69a0 <radio_pkt_configure+0x54>)
    6986:	4003      	ands	r3, r0
    6988:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    698c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    6990:	4319      	orrs	r1, r3
    6992:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    6996:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
    699a:	bd10      	pop	{r4, pc}
    699c:	40001000 	.word	0x40001000
    69a0:	fef80000 	.word	0xfef80000

000069a4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    69a4:	4b01      	ldr	r3, [pc, #4]	; (69ac <radio_pkt_rx_set+0x8>)
    69a6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    69aa:	4770      	bx	lr
    69ac:	40001000 	.word	0x40001000

000069b0 <radio_pkt_tx_set>:
    69b0:	4b01      	ldr	r3, [pc, #4]	; (69b8 <radio_pkt_tx_set+0x8>)
    69b2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    69b6:	4770      	bx	lr
    69b8:	40001000 	.word	0x40001000

000069bc <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69bc:	4b01      	ldr	r3, [pc, #4]	; (69c4 <radio_tx_enable+0x8>)
    69be:	2201      	movs	r2, #1
    69c0:	601a      	str	r2, [r3, #0]
}
    69c2:	4770      	bx	lr
    69c4:	40001000 	.word	0x40001000

000069c8 <radio_disable>:
    p_reg->CHENCLR = mask;
    69c8:	4a07      	ldr	r2, [pc, #28]	; (69e8 <radio_disable+0x20>)
    69ca:	f44f 6390 	mov.w	r3, #1152	; 0x480
    69ce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    69d2:	2301      	movs	r3, #1
    69d4:	6053      	str	r3, [r2, #4]
    69d6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    69d8:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    69dc:	2100      	movs	r1, #0
    69de:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    69e2:	6113      	str	r3, [r2, #16]
}
    69e4:	4770      	bx	lr
    69e6:	bf00      	nop
    69e8:	4001f000 	.word	0x4001f000

000069ec <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    69ec:	4b04      	ldr	r3, [pc, #16]	; (6a00 <radio_status_reset+0x14>)
    69ee:	2200      	movs	r2, #0
    69f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    69f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    69f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    69fc:	4770      	bx	lr
    69fe:	bf00      	nop
    6a00:	40001000 	.word	0x40001000

00006a04 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    6a04:	4b03      	ldr	r3, [pc, #12]	; (6a14 <radio_is_ready+0x10>)
    6a06:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    6a0a:	3800      	subs	r0, #0
    6a0c:	bf18      	it	ne
    6a0e:	2001      	movne	r0, #1
    6a10:	4770      	bx	lr
    6a12:	bf00      	nop
    6a14:	40001000 	.word	0x40001000

00006a18 <radio_is_done>:
	return (NRF_RADIO->EVENTS_PHYEND != 0);
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <radio_is_done+0x10>)
    6a1a:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
}
    6a1e:	3800      	subs	r0, #0
    6a20:	bf18      	it	ne
    6a22:	2001      	movne	r0, #1
    6a24:	4770      	bx	lr
    6a26:	bf00      	nop
    6a28:	40001000 	.word	0x40001000

00006a2c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    6a2c:	4b03      	ldr	r3, [pc, #12]	; (6a3c <radio_is_idle+0x10>)
    6a2e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    6a32:	fab0 f080 	clz	r0, r0
    6a36:	0940      	lsrs	r0, r0, #5
    6a38:	4770      	bx	lr
    6a3a:	bf00      	nop
    6a3c:	40001000 	.word	0x40001000

00006a40 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    6a40:	4b04      	ldr	r3, [pc, #16]	; (6a54 <radio_crc_configure+0x14>)
    6a42:	f240 1203 	movw	r2, #259	; 0x103
    6a46:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    6a4a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    6a4e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    6a52:	4770      	bx	lr
    6a54:	40001000 	.word	0x40001000

00006a58 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    6a58:	4b03      	ldr	r3, [pc, #12]	; (6a68 <radio_crc_is_valid+0x10>)
    6a5a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    6a5e:	3800      	subs	r0, #0
    6a60:	bf18      	it	ne
    6a62:	2001      	movne	r0, #1
    6a64:	4770      	bx	lr
    6a66:	bf00      	nop
    6a68:	40001000 	.word	0x40001000

00006a6c <radio_pkt_scratch_get>:
}
    6a6c:	4800      	ldr	r0, [pc, #0]	; (6a70 <radio_pkt_scratch_get+0x4>)
    6a6e:	4770      	bx	lr
    6a70:	20001084 	.word	0x20001084

00006a74 <radio_switch_complete_and_rx>:

	//printk("b\n");
#endif /* CONFIG_CTLR_DF_SUBSYSTEM */
#else /* !CONFIG_BT_CTLR_TIFS_HW */
#if defined(CONFIG_BT_CTLR_DF_SUBSYSTEM)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6a74:	4b04      	ldr	r3, [pc, #16]	; (6a88 <radio_switch_complete_and_rx+0x14>)
    6a76:	4905      	ldr	r1, [pc, #20]	; (6a8c <radio_switch_complete_and_rx+0x18>)
    6a78:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_PHYEND_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    6a7c:	2100      	movs	r1, #0
{
    6a7e:	4602      	mov	r2, r0
	sw_switch(0, 0, 0, phy_rx, 0);
    6a80:	4608      	mov	r0, r1
    6a82:	f7ff be73 	b.w	676c <sw_switch.isra.0>
    6a86:	bf00      	nop
    6a88:	40001000 	.word	0x40001000
    6a8c:	00100001 	.word	0x00100001

00006a90 <radio_switch_complete_and_tx>:

	//printk("f\n");
#endif /* CONFIG_CTLR_DF_SUBSYSTEM */
#else /* !CONFIG_BT_CTLR_TIFS_HW */
#if defined(CONFIG_BT_CTLR_DF_SUBSYSTEM)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6a90:	4b03      	ldr	r3, [pc, #12]	; (6aa0 <radio_switch_complete_and_tx+0x10>)
{
    6a92:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6a94:	4803      	ldr	r0, [pc, #12]	; (6aa4 <radio_switch_complete_and_tx+0x14>)
    6a96:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			    RADIO_SHORTS_PHYEND_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    6a9a:	2001      	movs	r0, #1
    6a9c:	f7ff be66 	b.w	676c <sw_switch.isra.0>
    6aa0:	40001000 	.word	0x40001000
    6aa4:	00100001 	.word	0x00100001

00006aa8 <radio_switch_complete_and_disable>:
}

void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_DF_SUBSYSTEM)
	NRF_RADIO->SHORTS =
    6aa8:	4b05      	ldr	r3, [pc, #20]	; (6ac0 <radio_switch_complete_and_disable+0x18>)
    6aaa:	4a06      	ldr	r2, [pc, #24]	; (6ac4 <radio_switch_complete_and_disable+0x1c>)
    6aac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
    6ab0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    6ab4:	f44f 6290 	mov.w	r2, #1152	; 0x480
    6ab8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	//printk("j\n");
#endif /* CONFIG_CTLR_DF_SUBSYSTEM */
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    6abc:	4770      	bx	lr
    6abe:	bf00      	nop
    6ac0:	40001000 	.word	0x40001000
    6ac4:	00100001 	.word	0x00100001

00006ac8 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    6ac8:	4b02      	ldr	r3, [pc, #8]	; (6ad4 <radio_rssi_status_reset+0xc>)
    6aca:	2200      	movs	r2, #0
    6acc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    6ad0:	4770      	bx	lr
    6ad2:	bf00      	nop
    6ad4:	40001000 	.word	0x40001000

00006ad8 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    6ad8:	4b03      	ldr	r3, [pc, #12]	; (6ae8 <radio_rssi_is_ready+0x10>)
    6ada:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    6ade:	3800      	subs	r0, #0
    6ae0:	bf18      	it	ne
    6ae2:	2001      	movne	r0, #1
    6ae4:	4770      	bx	lr
    6ae6:	bf00      	nop
    6ae8:	40001000 	.word	0x40001000

00006aec <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	2400      	movs	r4, #0
    6af0:	2706      	movs	r7, #6
    6af2:	00a3      	lsls	r3, r4, #2
    6af4:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    6b00:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6b02:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    6b06:	3401      	adds	r4, #1
    6b08:	88ad      	ldrh	r5, [r5, #4]
    6b0a:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
    6b0e:	2c08      	cmp	r4, #8
    6b10:	d1ef      	bne.n	6af2 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    6b12:	4b03      	ldr	r3, [pc, #12]	; (6b20 <radio_filter_configure+0x34>)
    6b14:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    6b18:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    6b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b1e:	bf00      	nop
    6b20:	40001000 	.word	0x40001000

00006b24 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    6b24:	4a03      	ldr	r2, [pc, #12]	; (6b34 <radio_filter_disable+0x10>)
    6b26:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    6b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6b2e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
    6b32:	4770      	bx	lr
    6b34:	40001000 	.word	0x40001000

00006b38 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    6b38:	4b02      	ldr	r3, [pc, #8]	; (6b44 <radio_filter_status_reset+0xc>)
    6b3a:	2200      	movs	r2, #0
    6b3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    6b40:	4770      	bx	lr
    6b42:	bf00      	nop
    6b44:	40001000 	.word	0x40001000

00006b48 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    6b48:	4b03      	ldr	r3, [pc, #12]	; (6b58 <radio_filter_has_match+0x10>)
    6b4a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    6b4e:	3800      	subs	r0, #0
    6b50:	bf18      	it	ne
    6b52:	2001      	movne	r0, #1
    6b54:	4770      	bx	lr
    6b56:	bf00      	nop
    6b58:	40001000 	.word	0x40001000

00006b5c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    6b5c:	4b01      	ldr	r3, [pc, #4]	; (6b64 <radio_filter_match_get+0x8>)
    6b5e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    6b62:	4770      	bx	lr
    6b64:	40001000 	.word	0x40001000

00006b68 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6b68:	4b05      	ldr	r3, [pc, #20]	; (6b80 <radio_tmr_status_reset+0x18>)
    6b6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6b6e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    6b72:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    6b76:	4a03      	ldr	r2, [pc, #12]	; (6b84 <radio_tmr_status_reset+0x1c>)
    6b78:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
    6b7c:	4770      	bx	lr
    6b7e:	bf00      	nop
    6b80:	4000b000 	.word	0x4000b000
    6b84:	0e700060 	.word	0x0e700060

00006b88 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
    6b88:	4b03      	ldr	r3, [pc, #12]	; (6b98 <radio_tmr_tifs_set+0x10>)
    6b8a:	4a04      	ldr	r2, [pc, #16]	; (6b9c <radio_tmr_tifs_set+0x14>)
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    6b92:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    6b96:	4770      	bx	lr
    6b98:	2000191a 	.word	0x2000191a
    6b9c:	40009000 	.word	0x40009000

00006ba0 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    6ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    6ba2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    6ba6:	4c2f      	ldr	r4, [pc, #188]	; (6c64 <radio_tmr_start+0xc4>)
    6ba8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    6bac:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    6bae:	bf88      	it	hi
    6bb0:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bb4:	4b2c      	ldr	r3, [pc, #176]	; (6c68 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
    6bb6:	4c2d      	ldr	r4, [pc, #180]	; (6c6c <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
    6bb8:	bf84      	itt	hi
    6bba:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
    6bbe:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
    6bc2:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
    6bc6:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
    6bca:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
    6bce:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    6bd2:	f04f 0202 	mov.w	r2, #2
    6bd6:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
    6bd8:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
    6bdc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    6be0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
    6be4:	4a22      	ldr	r2, [pc, #136]	; (6c70 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
    6be6:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
    6bea:	bf88      	it	hi
    6bec:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
    6bf0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
    6bf4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    6bf8:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6bfc:	491d      	ldr	r1, [pc, #116]	; (6c74 <radio_tmr_start+0xd4>)
    6bfe:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
    6c02:	3b0c      	subs	r3, #12
    6c04:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6c08:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    p_reg->CHENSET = mask;
    6c0c:	2320      	movs	r3, #32
    6c0e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    6c12:	f7ff fd97 	bl	6744 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
    6c16:	4b18      	ldr	r3, [pc, #96]	; (6c78 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c18:	4a18      	ldr	r2, [pc, #96]	; (6c7c <radio_tmr_start+0xdc>)
    6c1a:	6015      	str	r5, [r2, #0]
    6c1c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    6c20:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    6c24:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    6c28:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6c2a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    6c2e:	3b14      	subs	r3, #20
    6c30:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
    6c34:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    6c38:	3354      	adds	r3, #84	; 0x54
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6c3a:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6c3e:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6c42:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    6c46:	33c4      	adds	r3, #196	; 0xc4
    6c48:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6c4c:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    6c50:	3bc0      	subs	r3, #192	; 0xc0
    6c52:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6c56:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    6c5a:	33c8      	adds	r3, #200	; 0xc8
    6c5c:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    6c60:	4620      	mov	r0, r4
    6c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c64:	7ff0bdbf 	.word	0x7ff0bdbf
    6c68:	4000800c 	.word	0x4000800c
    6c6c:	000f4240 	.word	0x000f4240
    6c70:	4000b000 	.word	0x4000b000
    6c74:	4001f000 	.word	0x4001f000
    6c78:	40009000 	.word	0x40009000
    6c7c:	4000900c 	.word	0x4000900c

00006c80 <radio_tmr_stop>:
    6c80:	4a04      	ldr	r2, [pc, #16]	; (6c94 <radio_tmr_stop+0x14>)
    6c82:	2301      	movs	r3, #1
    6c84:	6013      	str	r3, [r2, #0]
    6c86:	60d3      	str	r3, [r2, #12]
    6c88:	320c      	adds	r2, #12
    6c8a:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
    6c8e:	6013      	str	r3, [r2, #0]
    6c90:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    6c92:	4770      	bx	lr
    6c94:	40008004 	.word	0x40008004

00006c98 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
    6c98:	4b04      	ldr	r3, [pc, #16]	; (6cac <radio_tmr_hcto_configure+0x14>)
    6c9a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
    6c9e:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    6ca2:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
    6ca6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
    6caa:	4770      	bx	lr
    6cac:	40008000 	.word	0x40008000

00006cb0 <radio_tmr_end_capture>:
    6cb0:	4b02      	ldr	r3, [pc, #8]	; (6cbc <radio_tmr_end_capture+0xc>)
    6cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    6cb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
    6cba:	4770      	bx	lr
    6cbc:	4001f000 	.word	0x4001f000

00006cc0 <radio_tmr_tifs_base_get>:
    6cc0:	4b01      	ldr	r3, [pc, #4]	; (6cc8 <radio_tmr_tifs_base_get+0x8>)
    6cc2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    6cc6:	4770      	bx	lr
    6cc8:	40008000 	.word	0x40008000

00006ccc <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    6ccc:	4b01      	ldr	r3, [pc, #4]	; (6cd4 <radio_ar_match_get+0x8>)
    6cce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    6cd2:	4770      	bx	lr
    6cd4:	4000f000 	.word	0x4000f000

00006cd8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    6cd8:	4a04      	ldr	r2, [pc, #16]	; (6cec <radio_ar_status_reset+0x14>)
    6cda:	2300      	movs	r3, #0
    6cdc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    6ce0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    6ce4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
    6ce8:	4770      	bx	lr
    6cea:	bf00      	nop
    6cec:	40001000 	.word	0x40001000

00006cf0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    6cf0:	4b08      	ldr	r3, [pc, #32]	; (6d14 <radio_ar_has_match+0x24>)
    6cf2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    6cf6:	b160      	cbz	r0, 6d12 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    6cf8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    6cfc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    6d00:	b138      	cbz	r0, 6d12 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    6d02:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    6d06:	b120      	cbz	r0, 6d12 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    6d08:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    6d0c:	fab0 f080 	clz	r0, r0
    6d10:	0940      	lsrs	r0, r0, #5
}
    6d12:	4770      	bx	lr
    6d14:	40001000 	.word	0x40001000

00006d18 <radio_dfe_mode_set>:
 *DFE
 ****************************************************************************/
#if defined(CONFIG_BT_CTLR_DF_SUBSYSTEM)
void radio_dfe_mode_set(u8_t mode)
{
	NRF_RADIO->DFEMODE &= ~RADIO_DFEMODE_DFEOPMODE_Msk;
    6d18:	4b07      	ldr	r3, [pc, #28]	; (6d38 <radio_dfe_mode_set+0x20>)
    6d1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    6d1e:	f022 0203 	bic.w	r2, r2, #3
    6d22:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
	NRF_RADIO->DFEMODE |= (mode << RADIO_DFEMODE_DFEOPMODE_Pos)
    6d26:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
			      & RADIO_DFEMODE_DFEOPMODE_Msk;
    6d2a:	f000 0003 	and.w	r0, r0, #3
	NRF_RADIO->DFEMODE |= (mode << RADIO_DFEMODE_DFEOPMODE_Pos)
    6d2e:	4310      	orrs	r0, r2
    6d30:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
}
    6d34:	4770      	bx	lr
    6d36:	bf00      	nop
    6d38:	40001000 	.word	0x40001000

00006d3c <radio_cte_inline_ctrl_set>:

void radio_cte_inline_ctrl_set(u8_t value)
{
	NRF_RADIO->CTEINLINECONF &= ~RADIO_CTEINLINECONF_CTEINLINECTRLEN_Msk;
    6d3c:	4b07      	ldr	r3, [pc, #28]	; (6d5c <radio_cte_inline_ctrl_set+0x20>)
    6d3e:	f8d3 2904 	ldr.w	r2, [r3, #2308]	; 0x904
    6d42:	f022 0201 	bic.w	r2, r2, #1
    6d46:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
	NRF_RADIO->CTEINLINECONF |= (value << RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos)
    6d4a:	f8d3 2904 	ldr.w	r2, [r3, #2308]	; 0x904
				    & RADIO_CTEINLINECONF_CTEINLINECTRLEN_Msk;
    6d4e:	f000 0001 	and.w	r0, r0, #1
	NRF_RADIO->CTEINLINECONF |= (value << RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos)
    6d52:	4310      	orrs	r0, r2
    6d54:	f8c3 0904 	str.w	r0, [r3, #2308]	; 0x904
}
    6d58:	4770      	bx	lr
    6d5a:	bf00      	nop
    6d5c:	40001000 	.word	0x40001000

00006d60 <radio_dfe_numberof8us_set>:
				    & RADIO_CTEINLINECONF_CTEINFOINS1_Msk;
}

void radio_dfe_numberof8us_set(u8_t value)
{
	NRF_RADIO->DFECTRL1 &= ~RADIO_DFECTRL1_NUMBEROF8US_Msk;
    6d60:	4b07      	ldr	r3, [pc, #28]	; (6d80 <radio_dfe_numberof8us_set+0x20>)
    6d62:	f8d3 2910 	ldr.w	r2, [r3, #2320]	; 0x910
    6d66:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6d6a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	NRF_RADIO->DFECTRL1 |= (value << RADIO_DFECTRL1_NUMBEROF8US_Pos)
    6d6e:	f8d3 2910 	ldr.w	r2, [r3, #2320]	; 0x910
			       & RADIO_DFECTRL1_NUMBEROF8US_Msk;
    6d72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	NRF_RADIO->DFECTRL1 |= (value << RADIO_DFECTRL1_NUMBEROF8US_Pos)
    6d76:	4310      	orrs	r0, r2
    6d78:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
}
    6d7c:	4770      	bx	lr
    6d7e:	bf00      	nop
    6d80:	40001000 	.word	0x40001000

00006d84 <radio_dfe_inextension_set>:

void radio_dfe_inextension_set(u8_t dfe_start_pos)
{
	NRF_RADIO->DFECTRL1 &= ~RADIO_DFECTRL1_DFEINEXTENSION_Msk;
    6d84:	4b07      	ldr	r3, [pc, #28]	; (6da4 <radio_dfe_inextension_set+0x20>)
    6d86:	f8d3 2910 	ldr.w	r2, [r3, #2320]	; 0x910
    6d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6d8e:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	NRF_RADIO->DFECTRL1 |= (dfe_start_pos <<
    6d92:	f8d3 2910 	ldr.w	r2, [r3, #2320]	; 0x910
    6d96:	01c0      	lsls	r0, r0, #7
			       RADIO_DFECTRL1_DFEINEXTENSION_Pos)
			       & RADIO_DFECTRL1_DFEINEXTENSION_Msk;
    6d98:	b2c0      	uxtb	r0, r0
	NRF_RADIO->DFECTRL1 |= (dfe_start_pos <<
    6d9a:	4310      	orrs	r0, r2
    6d9c:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
}
    6da0:	4770      	bx	lr
    6da2:	bf00      	nop
    6da4:	40001000 	.word	0x40001000

00006da8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    6da8:	2902      	cmp	r1, #2
{
    6daa:	b510      	push	{r4, lr}
    6dac:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    6dae:	d00b      	beq.n	6dc8 <mayfly_enable_cb+0x20>
    6db0:	4a0a      	ldr	r2, [pc, #40]	; (6ddc <mayfly_enable_cb+0x34>)
    6db2:	490b      	ldr	r1, [pc, #44]	; (6de0 <mayfly_enable_cb+0x38>)
    6db4:	480b      	ldr	r0, [pc, #44]	; (6de4 <mayfly_enable_cb+0x3c>)
    6db6:	2322      	movs	r3, #34	; 0x22
    6db8:	f002 f9d6 	bl	9168 <printk>
    6dbc:	4040      	eors	r0, r0
    6dbe:	f380 8811 	msr	BASEPRI, r0
    6dc2:	f04f 0003 	mov.w	r0, #3
    6dc6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
    6dc8:	200b      	movs	r0, #11
	if (enable) {
    6dca:	b11c      	cbz	r4, 6dd4 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
    6dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
    6dd0:	f7fa be7c 	b.w	1acc <arch_irq_enable>
}
    6dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
    6dd8:	f7fa be88 	b.w	1aec <arch_irq_disable>
    6ddc:	0000cff4 	.word	0x0000cff4
    6de0:	0000d07b 	.word	0x0000d07b
    6de4:	0000c40b 	.word	0x0000c40b

00006de8 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    6de8:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
    6dea:	b181      	cbz	r1, 6e0e <mayfly_is_enabled+0x26>
    6dec:	3901      	subs	r1, #1
    6dee:	2901      	cmp	r1, #1
    6df0:	d912      	bls.n	6e18 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
    6df2:	4a0a      	ldr	r2, [pc, #40]	; (6e1c <mayfly_is_enabled+0x34>)
    6df4:	490a      	ldr	r1, [pc, #40]	; (6e20 <mayfly_is_enabled+0x38>)
    6df6:	480b      	ldr	r0, [pc, #44]	; (6e24 <mayfly_is_enabled+0x3c>)
    6df8:	233c      	movs	r3, #60	; 0x3c
    6dfa:	f002 f9b5 	bl	9168 <printk>
    6dfe:	4040      	eors	r0, r0
    6e00:	f380 8811 	msr	BASEPRI, r0
    6e04:	f04f 0003 	mov.w	r0, #3
    6e08:	df02      	svc	2
		break;
	}

	return 0;
}
    6e0a:	2000      	movs	r0, #0
    6e0c:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
    6e0e:	2018      	movs	r0, #24
}
    6e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
    6e14:	f7fa be7e 	b.w	1b14 <arch_irq_is_enabled>
    6e18:	200b      	movs	r0, #11
    6e1a:	e7f9      	b.n	6e10 <mayfly_is_enabled+0x28>
    6e1c:	0000cff4 	.word	0x0000cff4
    6e20:	0000d151 	.word	0x0000d151
    6e24:	0000c40b 	.word	0x0000c40b

00006e28 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    6e28:	2901      	cmp	r1, #1
{
    6e2a:	b508      	push	{r3, lr}
	switch (callee_id) {
    6e2c:	d008      	beq.n	6e40 <mayfly_pend+0x18>
    6e2e:	2902      	cmp	r1, #2
    6e30:	d006      	beq.n	6e40 <mayfly_pend+0x18>
    6e32:	b949      	cbnz	r1, 6e48 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e34:	4b0b      	ldr	r3, [pc, #44]	; (6e64 <mayfly_pend+0x3c>)
    6e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6e3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
    6e3e:	bd08      	pop	{r3, pc}
    6e40:	4b08      	ldr	r3, [pc, #32]	; (6e64 <mayfly_pend+0x3c>)
    6e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6e46:	e7f8      	b.n	6e3a <mayfly_pend+0x12>
		LL_ASSERT(0);
    6e48:	4a07      	ldr	r2, [pc, #28]	; (6e68 <mayfly_pend+0x40>)
    6e4a:	4908      	ldr	r1, [pc, #32]	; (6e6c <mayfly_pend+0x44>)
    6e4c:	4808      	ldr	r0, [pc, #32]	; (6e70 <mayfly_pend+0x48>)
    6e4e:	2371      	movs	r3, #113	; 0x71
    6e50:	f002 f98a 	bl	9168 <printk>
    6e54:	4040      	eors	r0, r0
    6e56:	f380 8811 	msr	BASEPRI, r0
    6e5a:	f04f 0003 	mov.w	r0, #3
    6e5e:	df02      	svc	2
}
    6e60:	e7ed      	b.n	6e3e <mayfly_pend+0x16>
    6e62:	bf00      	nop
    6e64:	e000e100 	.word	0xe000e100
    6e68:	0000cff4 	.word	0x0000cff4
    6e6c:	0000d151 	.word	0x0000d151
    6e70:	0000c40b 	.word	0x0000c40b

00006e74 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    6e74:	2803      	cmp	r0, #3
{
    6e76:	b510      	push	{r4, lr}
    6e78:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    6e7a:	d90b      	bls.n	6e94 <hal_ticker_instance0_caller_id_get+0x20>
    6e7c:	4a0e      	ldr	r2, [pc, #56]	; (6eb8 <hal_ticker_instance0_caller_id_get+0x44>)
    6e7e:	490f      	ldr	r1, [pc, #60]	; (6ebc <hal_ticker_instance0_caller_id_get+0x48>)
    6e80:	480f      	ldr	r0, [pc, #60]	; (6ec0 <hal_ticker_instance0_caller_id_get+0x4c>)
    6e82:	232d      	movs	r3, #45	; 0x2d
    6e84:	f002 f970 	bl	9168 <printk>
    6e88:	4040      	eors	r0, r0
    6e8a:	f380 8811 	msr	BASEPRI, r0
    6e8e:	f04f 0003 	mov.w	r0, #3
    6e92:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
    6e94:	4b0b      	ldr	r3, [pc, #44]	; (6ec4 <hal_ticker_instance0_caller_id_get+0x50>)
    6e96:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    6e98:	b95c      	cbnz	r4, 6eb2 <hal_ticker_instance0_caller_id_get+0x3e>
    6e9a:	4a07      	ldr	r2, [pc, #28]	; (6eb8 <hal_ticker_instance0_caller_id_get+0x44>)
    6e9c:	490a      	ldr	r1, [pc, #40]	; (6ec8 <hal_ticker_instance0_caller_id_get+0x54>)
    6e9e:	4808      	ldr	r0, [pc, #32]	; (6ec0 <hal_ticker_instance0_caller_id_get+0x4c>)
    6ea0:	2330      	movs	r3, #48	; 0x30
    6ea2:	f002 f961 	bl	9168 <printk>
    6ea6:	4040      	eors	r0, r0
    6ea8:	f380 8811 	msr	BASEPRI, r0
    6eac:	f04f 0003 	mov.w	r0, #3
    6eb0:	df02      	svc	2

	return caller_id;
}
    6eb2:	4620      	mov	r0, r4
    6eb4:	bd10      	pop	{r4, pc}
    6eb6:	bf00      	nop
    6eb8:	0000d09d 	.word	0x0000d09d
    6ebc:	0000d124 	.word	0x0000d124
    6ec0:	0000c40b 	.word	0x0000c40b
    6ec4:	0000d166 	.word	0x0000d166
    6ec8:	0000d144 	.word	0x0000d144

00006ecc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    6ecc:	3801      	subs	r0, #1
{
    6ece:	b510      	push	{r4, lr}
    6ed0:	461c      	mov	r4, r3
    6ed2:	2804      	cmp	r0, #4
    6ed4:	d845      	bhi.n	6f62 <hal_ticker_instance0_sched+0x96>
    6ed6:	e8df f000 	tbb	[pc, r0]
    6eda:	1a03      	.short	0x1a03
    6edc:	2c23      	.short	0x2c23
    6ede:	3b          	.byte	0x3b
    6edf:	00          	.byte	0x00
#if defined(CONFIG_BT_LL_SW_SPLIT)
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
    6ee0:	2904      	cmp	r1, #4
    6ee2:	d107      	bne.n	6ef4 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
    6ee4:	4b20      	ldr	r3, [pc, #128]	; (6f68 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
    6ee6:	2102      	movs	r1, #2
			m.param = instance;
    6ee8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
    6eea:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    6eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6ef0:	f7fc bdce 	b.w	3a90 <mayfly_enqueue>
			LL_ASSERT(0);
    6ef4:	2351      	movs	r3, #81	; 0x51
		LL_ASSERT(0);
    6ef6:	4a1d      	ldr	r2, [pc, #116]	; (6f6c <hal_ticker_instance0_sched+0xa0>)
    6ef8:	491d      	ldr	r1, [pc, #116]	; (6f70 <hal_ticker_instance0_sched+0xa4>)
    6efa:	481e      	ldr	r0, [pc, #120]	; (6f74 <hal_ticker_instance0_sched+0xa8>)
    6efc:	f002 f934 	bl	9168 <printk>
    6f00:	4040      	eors	r0, r0
    6f02:	f380 8811 	msr	BASEPRI, r0
    6f06:	f04f 0003 	mov.w	r0, #3
    6f0a:	df02      	svc	2
}
    6f0c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
    6f0e:	2903      	cmp	r1, #3
    6f10:	d104      	bne.n	6f1c <hal_ticker_instance0_sched+0x50>
			m.param = instance;
    6f12:	4b19      	ldr	r3, [pc, #100]	; (6f78 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    6f14:	2101      	movs	r1, #1
			m.param = instance;
    6f16:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6f18:	4608      	mov	r0, r1
    6f1a:	e7e7      	b.n	6eec <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
    6f1c:	2369      	movs	r3, #105	; 0x69
    6f1e:	e7ea      	b.n	6ef6 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
    6f20:	2904      	cmp	r1, #4
    6f22:	d104      	bne.n	6f2e <hal_ticker_instance0_sched+0x62>
			m.param = instance;
    6f24:	4b15      	ldr	r3, [pc, #84]	; (6f7c <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6f26:	2102      	movs	r1, #2
			m.param = instance;
    6f28:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6f2a:	2001      	movs	r0, #1
    6f2c:	e7de      	b.n	6eec <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
    6f2e:	2380      	movs	r3, #128	; 0x80
    6f30:	e7e1      	b.n	6ef6 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
    6f32:	2903      	cmp	r1, #3
    6f34:	d003      	beq.n	6f3e <hal_ticker_instance0_sched+0x72>
    6f36:	2904      	cmp	r1, #4
    6f38:	d006      	beq.n	6f48 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
    6f3a:	23a6      	movs	r3, #166	; 0xa6
    6f3c:	e7db      	b.n	6ef6 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
    6f3e:	4b10      	ldr	r3, [pc, #64]	; (6f80 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6f40:	2101      	movs	r1, #1
			m.param = instance;
    6f42:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6f44:	2002      	movs	r0, #2
    6f46:	e7d1      	b.n	6eec <hal_ticker_instance0_sched+0x20>
			m.param = instance;
    6f48:	4b0e      	ldr	r3, [pc, #56]	; (6f84 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6f4a:	2102      	movs	r1, #2
			m.param = instance;
    6f4c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6f4e:	e7e3      	b.n	6f18 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
    6f50:	2904      	cmp	r1, #4
    6f52:	d104      	bne.n	6f5e <hal_ticker_instance0_sched+0x92>
			m.param = instance;
    6f54:	4b0c      	ldr	r3, [pc, #48]	; (6f88 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6f56:	2102      	movs	r1, #2
			m.param = instance;
    6f58:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6f5a:	2003      	movs	r0, #3
    6f5c:	e7c6      	b.n	6eec <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
    6f5e:	23be      	movs	r3, #190	; 0xbe
    6f60:	e7c9      	b.n	6ef6 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
    6f62:	23c4      	movs	r3, #196	; 0xc4
    6f64:	e7c7      	b.n	6ef6 <hal_ticker_instance0_sched+0x2a>
    6f66:	bf00      	nop
    6f68:	200002b8 	.word	0x200002b8
    6f6c:	0000d09d 	.word	0x0000d09d
    6f70:	0000d151 	.word	0x0000d151
    6f74:	0000c40b 	.word	0x0000c40b
    6f78:	200002c8 	.word	0x200002c8
    6f7c:	200002d8 	.word	0x200002d8
    6f80:	200002e8 	.word	0x200002e8
    6f84:	200002f8 	.word	0x200002f8
    6f88:	20000308 	.word	0x20000308

00006f8c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    6f8c:	4b02      	ldr	r3, [pc, #8]	; (6f98 <net_buf_pool_get+0xc>)
    6f8e:	2228      	movs	r2, #40	; 0x28
    6f90:	fb02 3000 	mla	r0, r2, r0, r3
    6f94:	4770      	bx	lr
    6f96:	bf00      	nop
    6f98:	20000424 	.word	0x20000424

00006f9c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6f9c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
    6f9e:	4a05      	ldr	r2, [pc, #20]	; (6fb4 <net_buf_id+0x18>)
    6fa0:	2128      	movs	r1, #40	; 0x28
    6fa2:	fb01 2303 	mla	r3, r1, r3, r2
    6fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fa8:	1ac0      	subs	r0, r0, r3
}
    6faa:	4b03      	ldr	r3, [pc, #12]	; (6fb8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    6fac:	10c0      	asrs	r0, r0, #3
}
    6fae:	4358      	muls	r0, r3
    6fb0:	4770      	bx	lr
    6fb2:	bf00      	nop
    6fb4:	20000424 	.word	0x20000424
    6fb8:	aaaaaaab 	.word	0xaaaaaaab

00006fbc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    6fbc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6fbe:	4a0a      	ldr	r2, [pc, #40]	; (6fe8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6fc0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6fc2:	2428      	movs	r4, #40	; 0x28
    6fc4:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
    6fc8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6fca:	6a1b      	ldr	r3, [r3, #32]
    6fcc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    6fce:	6823      	ldr	r3, [r4, #0]
    6fd0:	429a      	cmp	r2, r3
    6fd2:	bf94      	ite	ls
    6fd4:	600a      	strls	r2, [r1, #0]
    6fd6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    6fd8:	f7ff ffe0 	bl	6f9c <net_buf_id>
    6fdc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    6fe0:	fb02 3000 	mla	r0, r2, r0, r3
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	bf00      	nop
    6fe8:	20000424 	.word	0x20000424

00006fec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    6fec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6ff0:	4605      	mov	r5, r0
    6ff2:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
    6ff4:	4610      	mov	r0, r2
    6ff6:	4619      	mov	r1, r3
{
    6ff8:	4616      	mov	r6, r2
    6ffa:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
    6ffc:	f004 f927 	bl	b24e <z_timeout_end_calc>
    7000:	4680      	mov	r8, r0
    7002:	4689      	mov	r9, r1
	__asm__ volatile(
    7004:	f04f 0320 	mov.w	r3, #32
    7008:	f3ef 8a11 	mrs	sl, BASEPRI
    700c:	f383 8811 	msr	BASEPRI, r3
    7010:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    7014:	8b6b      	ldrh	r3, [r5, #26]
    7016:	2b00      	cmp	r3, #0
    7018:	d054      	beq.n	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    701a:	8b2a      	ldrh	r2, [r5, #24]
    701c:	429a      	cmp	r2, r3
    701e:	d93d      	bls.n	709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>
	return z_impl_k_queue_get(queue, timeout);
    7020:	2200      	movs	r2, #0
    7022:	2300      	movs	r3, #0
    7024:	4628      	mov	r0, r5
    7026:	f001 f9ad 	bl	8384 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    702a:	4604      	mov	r4, r0
    702c:	2800      	cmp	r0, #0
    702e:	d035      	beq.n	709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>
	__asm__ volatile(
    7030:	f38a 8811 	msr	BASEPRI, sl
    7034:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    7038:	9b01      	ldr	r3, [sp, #4]
    703a:	2b00      	cmp	r3, #0
    703c:	d052      	beq.n	70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    703e:	ea56 0307 	orrs.w	r3, r6, r7
    7042:	d010      	beq.n	7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    7044:	1c7b      	adds	r3, r7, #1
    7046:	bf08      	it	eq
    7048:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    704c:	d00b      	beq.n	7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
    704e:	f001 ff67 	bl	8f20 <z_tick_get>
    7052:	ebb8 0600 	subs.w	r6, r8, r0
    7056:	eb69 0701 	sbc.w	r7, r9, r1
    705a:	2e00      	cmp	r6, #0
    705c:	f177 0300 	sbcs.w	r3, r7, #0
    7060:	bfbc      	itt	lt
    7062:	2600      	movlt	r6, #0
    7064:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7066:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    7068:	f8df 8090 	ldr.w	r8, [pc, #144]	; 70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
    706c:	2228      	movs	r2, #40	; 0x28
    706e:	fb02 8303 	mla	r3, r2, r3, r8
    7072:	a901      	add	r1, sp, #4
    7074:	6a1b      	ldr	r3, [r3, #32]
    7076:	681b      	ldr	r3, [r3, #0]
    7078:	4632      	mov	r2, r6
    707a:	681d      	ldr	r5, [r3, #0]
    707c:	4620      	mov	r0, r4
    707e:	463b      	mov	r3, r7
    7080:	47a8      	blx	r5
    7082:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    7084:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    7086:	bb70      	cbnz	r0, 70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    7088:	79a0      	ldrb	r0, [r4, #6]
    708a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    708e:	4621      	mov	r1, r4
    7090:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    7094:	f003 ff0c 	bl	aeb0 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    7098:	462c      	mov	r4, r5
}
    709a:	e01f      	b.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
		uninit_count = pool->uninit_count--;
    709c:	8b68      	ldrh	r0, [r5, #26]
    709e:	1e43      	subs	r3, r0, #1
    70a0:	836b      	strh	r3, [r5, #26]
    70a2:	f38a 8811 	msr	BASEPRI, sl
    70a6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    70aa:	8b2c      	ldrh	r4, [r5, #24]
    70ac:	1a24      	subs	r4, r4, r0
    70ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
    70b0:	2318      	movs	r3, #24
    70b2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    70b6:	4811      	ldr	r0, [pc, #68]	; (70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    70b8:	4b11      	ldr	r3, [pc, #68]	; (7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    70ba:	1a2d      	subs	r5, r5, r0
    70bc:	10ed      	asrs	r5, r5, #3
    70be:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    70c0:	71a5      	strb	r5, [r4, #6]
		goto success;
    70c2:	e7b9      	b.n	7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    70c4:	f38a 8811 	msr	BASEPRI, sl
    70c8:	f3bf 8f6f 	isb	sy
    70cc:	4632      	mov	r2, r6
    70ce:	463b      	mov	r3, r7
    70d0:	4628      	mov	r0, r5
    70d2:	f001 f957 	bl	8384 <z_impl_k_queue_get>
	if (!buf) {
    70d6:	4604      	mov	r4, r0
    70d8:	2800      	cmp	r0, #0
    70da:	d1ad      	bne.n	7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    70dc:	4620      	mov	r0, r4
    70de:	b002      	add	sp, #8
    70e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    70e4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    70e6:	2300      	movs	r3, #0
	buf->ref   = 1U;
    70e8:	2201      	movs	r2, #1
	buf->frags = NULL;
    70ea:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    70ec:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    70ee:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    70f0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    70f2:	6923      	ldr	r3, [r4, #16]
    70f4:	81e2      	strh	r2, [r4, #14]
    70f6:	60a3      	str	r3, [r4, #8]
	return buf;
    70f8:	e7f0      	b.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    70fa:	bf00      	nop
    70fc:	20000424 	.word	0x20000424
    7100:	cccccccd 	.word	0xcccccccd

00007104 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    7104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7108:	4d17      	ldr	r5, [pc, #92]	; (7168 <net_buf_unref+0x64>)
    710a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    710c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    710e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
    7110:	b90c      	cbnz	r4, 7116 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    7112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    7116:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    7118:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    711c:	3b01      	subs	r3, #1
    711e:	b2db      	uxtb	r3, r3
    7120:	7123      	strb	r3, [r4, #4]
    7122:	2b00      	cmp	r3, #0
    7124:	d1f5      	bne.n	7112 <net_buf_unref+0xe>
		if (buf->__buf) {
    7126:	6921      	ldr	r1, [r4, #16]
    7128:	b159      	cbz	r1, 7142 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    712a:	7963      	ldrb	r3, [r4, #5]
    712c:	079b      	lsls	r3, r3, #30
    712e:	d407      	bmi.n	7140 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    7130:	79a3      	ldrb	r3, [r4, #6]
    7132:	fb07 5303 	mla	r3, r7, r3, r5
    7136:	4620      	mov	r0, r4
    7138:	6a1b      	ldr	r3, [r3, #32]
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	689b      	ldr	r3, [r3, #8]
    713e:	4798      	blx	r3
			buf->__buf = NULL;
    7140:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    7142:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    7144:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    7146:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    714a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    714c:	69db      	ldr	r3, [r3, #28]
    714e:	b11b      	cbz	r3, 7158 <net_buf_unref+0x54>
			pool->destroy(buf);
    7150:	4620      	mov	r0, r4
    7152:	4798      	blx	r3
{
    7154:	4644      	mov	r4, r8
    7156:	e7db      	b.n	7110 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    7158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    715c:	4621      	mov	r1, r4
    715e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    7162:	f003 fea5 	bl	aeb0 <k_queue_prepend>
}
    7166:	e7f5      	b.n	7154 <net_buf_unref+0x50>
    7168:	20000424 	.word	0x20000424

0000716c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    716c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    716e:	4b09      	ldr	r3, [pc, #36]	; (7194 <gpio_nrfx_init+0x28>)
    7170:	781a      	ldrb	r2, [r3, #0]
    7172:	b96a      	cbnz	r2, 7190 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    7174:	2101      	movs	r1, #1
    7176:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7178:	2006      	movs	r0, #6
    717a:	2105      	movs	r1, #5
    717c:	f7fa fcd8 	bl	1b30 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    7180:	2006      	movs	r0, #6
    7182:	f7fa fca3 	bl	1acc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    7186:	4b04      	ldr	r3, [pc, #16]	; (7198 <gpio_nrfx_init+0x2c>)
    7188:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    718c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    7190:	2000      	movs	r0, #0
    7192:	bd08      	pop	{r3, pc}
    7194:	2000191b 	.word	0x2000191b
    7198:	40006000 	.word	0x40006000

0000719c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    719c:	4b2d      	ldr	r3, [pc, #180]	; (7254 <gpio_nrfx_config+0xb8>)
{
    719e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71a0:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    71a2:	482d      	ldr	r0, [pc, #180]	; (7258 <gpio_nrfx_config+0xbc>)
    71a4:	4013      	ands	r3, r2
    71a6:	4283      	cmp	r3, r0
    71a8:	d045      	beq.n	7236 <gpio_nrfx_config+0x9a>
    71aa:	d80d      	bhi.n	71c8 <gpio_nrfx_config+0x2c>
    71ac:	2b06      	cmp	r3, #6
    71ae:	d015      	beq.n	71dc <gpio_nrfx_config+0x40>
    71b0:	d805      	bhi.n	71be <gpio_nrfx_config+0x22>
    71b2:	b19b      	cbz	r3, 71dc <gpio_nrfx_config+0x40>
    71b4:	2b02      	cmp	r3, #2
    71b6:	d040      	beq.n	723a <gpio_nrfx_config+0x9e>
    71b8:	f06f 0015 	mvn.w	r0, #21
    71bc:	e03a      	b.n	7234 <gpio_nrfx_config+0x98>
    71be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    71c2:	d1f9      	bne.n	71b8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    71c4:	2301      	movs	r3, #1
    71c6:	e009      	b.n	71dc <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    71c8:	4824      	ldr	r0, [pc, #144]	; (725c <gpio_nrfx_config+0xc0>)
    71ca:	4283      	cmp	r3, r0
    71cc:	d037      	beq.n	723e <gpio_nrfx_config+0xa2>
    71ce:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    71d2:	d036      	beq.n	7242 <gpio_nrfx_config+0xa6>
    71d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    71d8:	d1ee      	bne.n	71b8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    71da:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    71dc:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    71de:	bf54      	ite	pl
    71e0:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    71e4:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    71e6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    71ea:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    71ec:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    71f0:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    71f4:	d507      	bpl.n	7206 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    71f6:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71fa:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    71fc:	d023      	beq.n	7246 <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
    71fe:	2201      	movs	r2, #1
    7200:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    7202:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    7206:	7a32      	ldrb	r2, [r6, #8]
    7208:	f001 011f 	and.w	r1, r1, #31
    720c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
    7210:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    7212:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    7216:	bfc6      	itte	gt
    7218:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
    721c:	4e10      	ldrgt	r6, [pc, #64]	; (7260 <gpio_nrfx_config+0xc4>)
        return NRF_P0;
    721e:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    7222:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    7226:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    722a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    722e:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
    7232:	2000      	movs	r0, #0
}
    7234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    7236:	2307      	movs	r3, #7
    7238:	e7d0      	b.n	71dc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    723a:	2304      	movs	r3, #4
    723c:	e7ce      	b.n	71dc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    723e:	2305      	movs	r3, #5
    7240:	e7cc      	b.n	71dc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    7242:	2303      	movs	r3, #3
    7244:	e7ca      	b.n	71dc <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7246:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    7248:	bf42      	ittt	mi
    724a:	2201      	movmi	r2, #1
    724c:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    724e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    7252:	e7d8      	b.n	7206 <gpio_nrfx_config+0x6a>
    7254:	00f00006 	.word	0x00f00006
    7258:	00100006 	.word	0x00100006
    725c:	00400002 	.word	0x00400002
    7260:	50000300 	.word	0x50000300

00007264 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
    7264:	281f      	cmp	r0, #31
        return NRF_P1;
    7266:	bf8a      	itet	hi
    7268:	4b07      	ldrhi	r3, [pc, #28]	; (7288 <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
    726a:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    726e:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7272:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7276:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    727a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    727e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7282:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    7286:	4770      	bx	lr
    7288:	50000300 	.word	0x50000300

0000728c <gpiote_pin_int_cfg>:
{
    728c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    728e:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    7290:	68c6      	ldr	r6, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7292:	7a18      	ldrb	r0, [r3, #8]
    7294:	f001 041f 	and.w	r4, r1, #31
{
    7298:	460d      	mov	r5, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    729a:	4949      	ldr	r1, [pc, #292]	; (73c0 <gpiote_pin_int_cfg+0x134>)
    729c:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    72a0:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
    72a4:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    72a6:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    72a8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    72ac:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    72b0:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    72b4:	4284      	cmp	r4, r0
    72b6:	d16d      	bne.n	7394 <gpiote_pin_int_cfg+0x108>
		    && (intenset & BIT(i))) {
    72b8:	fa22 f003 	lsr.w	r0, r2, r3
    72bc:	07c0      	lsls	r0, r0, #31
    72be:	d569      	bpl.n	7394 <gpiote_pin_int_cfg+0x108>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    72c0:	009a      	lsls	r2, r3, #2
    72c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    72c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    72ca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    72ce:	f020 0001 	bic.w	r0, r0, #1
    72d2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    72d6:	2201      	movs	r2, #1
    72d8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    72dc:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    72e0:	4620      	mov	r0, r4
    72e2:	2100      	movs	r1, #0
    72e4:	f7ff ffbe 	bl	7264 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    72e8:	68f3      	ldr	r3, [r6, #12]
    72ea:	40eb      	lsrs	r3, r5
    72ec:	f013 0001 	ands.w	r0, r3, #1
    72f0:	d04e      	beq.n	7390 <gpiote_pin_int_cfg+0x104>
    72f2:	6933      	ldr	r3, [r6, #16]
    72f4:	40eb      	lsrs	r3, r5
    72f6:	f013 0001 	ands.w	r0, r3, #1
    72fa:	d049      	beq.n	7390 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    72fc:	69b3      	ldr	r3, [r6, #24]
    72fe:	40eb      	lsrs	r3, r5
    7300:	f013 0201 	ands.w	r2, r3, #1
    7304:	d050      	beq.n	73a8 <gpiote_pin_int_cfg+0x11c>
			if (data->double_edge & BIT(pin)) {
    7306:	69f3      	ldr	r3, [r6, #28]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    7308:	4f2d      	ldr	r7, [pc, #180]	; (73c0 <gpiote_pin_int_cfg+0x134>)
    730a:	40eb      	lsrs	r3, r5
    730c:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    730e:	bf5f      	itttt	pl
    7310:	6971      	ldrpl	r1, [r6, #20]
    7312:	fa21 f505 	lsrpl.w	r5, r1, r5
    7316:	f005 0501 	andpl.w	r5, r5, #1
    731a:	f1c5 0502 	rsbpl	r5, r5, #2
    731e:	bf54      	ite	pl
    7320:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    7322:	2503      	movmi	r5, #3
    7324:	2600      	movs	r6, #0
    7326:	f506 73a2 	add.w	r3, r6, #324	; 0x144
    732a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    732e:	f010 0003 	ands.w	r0, r0, #3
    7332:	d133      	bne.n	739c <gpiote_pin_int_cfg+0x110>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7334:	00b2      	lsls	r2, r6, #2
    7336:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    733a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    733e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7340:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    7344:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7348:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    734c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7350:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    7354:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
    7358:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    735c:	430d      	orrs	r5, r1
			nrf_gpiote_event_t evt =
    735e:	f106 0140 	add.w	r1, r6, #64	; 0x40
    7362:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    7364:	b289      	uxth	r1, r1
    7366:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    736a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    736e:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7372:	6008      	str	r0, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    7374:	6809      	ldr	r1, [r1, #0]
    7376:	9101      	str	r1, [sp, #4]
    (void)dummy;
    7378:	9901      	ldr	r1, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    737a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    737e:	f041 0101 	orr.w	r1, r1, #1
    7382:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    7386:	2201      	movs	r2, #1
    7388:	fa02 f606 	lsl.w	r6, r2, r6
    p_reg->INTENSET = mask;
    738c:	f8c7 6304 	str.w	r6, [r7, #772]	; 0x304
}
    7390:	b003      	add	sp, #12
    7392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7394:	3301      	adds	r3, #1
    7396:	2b08      	cmp	r3, #8
    7398:	d186      	bne.n	72a8 <gpiote_pin_int_cfg+0x1c>
    739a:	e7a1      	b.n	72e0 <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    739c:	3601      	adds	r6, #1
    739e:	2e08      	cmp	r6, #8
    73a0:	d1c1      	bne.n	7326 <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    73a2:	f06f 0012 	mvn.w	r0, #18
    73a6:	e7f3      	b.n	7390 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    73a8:	6971      	ldr	r1, [r6, #20]
    73aa:	40e9      	lsrs	r1, r5
    73ac:	f001 0101 	and.w	r1, r1, #1
    73b0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    73b4:	4620      	mov	r0, r4
    73b6:	b2c9      	uxtb	r1, r1
    73b8:	f7ff ff54 	bl	7264 <nrf_gpio_cfg_sense_set>
	int res = 0;
    73bc:	4610      	mov	r0, r2
    73be:	e7e7      	b.n	7390 <gpiote_pin_int_cfg+0x104>
    73c0:	40006000 	.word	0x40006000

000073c4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    73c4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    73c8:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    73ca:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    73cc:	d116      	bne.n	73fc <gpio_nrfx_pin_interrupt_configure+0x38>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    73ce:	6845      	ldr	r5, [r0, #4]
    73d0:	7a2e      	ldrb	r6, [r5, #8]
    73d2:	f001 051f 	and.w	r5, r1, #31
    73d6:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    if (*p_pin < P0_PIN_NUM)
    73da:	2d1f      	cmp	r5, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    73dc:	bfc6      	itte	gt
    73de:	f005 051f 	andgt.w	r5, r5, #31
        return NRF_P1;
    73e2:	4e1e      	ldrgt	r6, [pc, #120]	; (745c <gpio_nrfx_pin_interrupt_configure+0x98>)
        return NRF_P0;
    73e4:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    73e8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    73ec:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    73f0:	07ed      	lsls	r5, r5, #31
    73f2:	d507      	bpl.n	7404 <gpio_nrfx_pin_interrupt_configure+0x40>
}
    73f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    73f8:	bc70      	pop	{r4, r5, r6}
    73fa:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    73fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    7400:	68e5      	ldr	r5, [r4, #12]
    7402:	d026      	beq.n	7452 <gpio_nrfx_pin_interrupt_configure+0x8e>
    7404:	68e6      	ldr	r6, [r4, #12]
    7406:	2501      	movs	r5, #1
    7408:	408d      	lsls	r5, r1
    740a:	4335      	orrs	r5, r6
    740c:	6926      	ldr	r6, [r4, #16]
    740e:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7410:	2501      	movs	r5, #1
    7412:	408d      	lsls	r5, r1
    7414:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    7418:	bf14      	ite	ne
    741a:	432e      	orrne	r6, r5
    741c:	43ae      	biceq	r6, r5
    741e:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    7420:	69a6      	ldr	r6, [r4, #24]
    7422:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7426:	69e2      	ldr	r2, [r4, #28]
    7428:	bf0c      	ite	eq
    742a:	432e      	orreq	r6, r5
    742c:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    742e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7432:	bf0c      	ite	eq
    7434:	432a      	orreq	r2, r5
    7436:	43aa      	bicne	r2, r5
    7438:	61e2      	str	r2, [r4, #28]
    743a:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    743c:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    743e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    7442:	bf0c      	ite	eq
    7444:	4315      	orreq	r5, r2
    7446:	ea22 0505 	bicne.w	r5, r2, r5
    744a:	6165      	str	r5, [r4, #20]
}
    744c:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    744e:	f7ff bf1d 	b.w	728c <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7452:	2601      	movs	r6, #1
    7454:	408e      	lsls	r6, r1
    7456:	ea25 0506 	bic.w	r5, r5, r6
    745a:	e7d7      	b.n	740c <gpio_nrfx_pin_interrupt_configure+0x48>
    745c:	50000300 	.word	0x50000300

00007460 <gpiote_event_handler>:
{
    7460:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    7462:	2600      	movs	r6, #0
{
    7464:	b085      	sub	sp, #20
	u32_t fired_triggers[GPIO_COUNT] = {0};
    7466:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    746a:	4d28      	ldr	r5, [pc, #160]	; (750c <gpiote_event_handler+0xac>)
    746c:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    746e:	b15c      	cbz	r4, 7488 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    7470:	4827      	ldr	r0, [pc, #156]	; (7510 <gpiote_event_handler+0xb0>)
    7472:	f003 fb26 	bl	aac2 <check_level_trigger_pins>
		fired_triggers[0] =
    7476:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    7478:	4826      	ldr	r0, [pc, #152]	; (7514 <gpiote_event_handler+0xb4>)
    747a:	f003 fb22 	bl	aac2 <check_level_trigger_pins>
		fired_triggers[1] =
    747e:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7480:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    7482:	682b      	ldr	r3, [r5, #0]
    7484:	9300      	str	r3, [sp, #0]
    (void)dummy;
    7486:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    7488:	4d23      	ldr	r5, [pc, #140]	; (7518 <gpiote_event_handler+0xb8>)
{
    748a:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    748c:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    748e:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    7490:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    7494:	fa06 f102 	lsl.w	r1, r6, r2
    7498:	4219      	tst	r1, r3
    749a:	d01d      	beq.n	74d8 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    749c:	0091      	lsls	r1, r2, #2
    749e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    74a2:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    74a6:	680b      	ldr	r3, [r1, #0]
    74a8:	b1b3      	cbz	r3, 74d8 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    74aa:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    74ae:	af04      	add	r7, sp, #16
    74b0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    74b4:	f8c1 c000 	str.w	ip, [r1]
    74b8:	f3c3 3040 	ubfx	r0, r3, #13, #1
    74bc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    74c0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    74c4:	f850 7c08 	ldr.w	r7, [r0, #-8]
    74c8:	fa06 f303 	lsl.w	r3, r6, r3
    74cc:	433b      	orrs	r3, r7
    74ce:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    74d2:	680b      	ldr	r3, [r1, #0]
    74d4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    74d6:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    74d8:	3201      	adds	r2, #1
    74da:	2a08      	cmp	r2, #8
    74dc:	d1d8      	bne.n	7490 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
    74de:	9902      	ldr	r1, [sp, #8]
    74e0:	b111      	cbz	r1, 74e8 <gpiote_event_handler+0x88>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    74e2:	480b      	ldr	r0, [pc, #44]	; (7510 <gpiote_event_handler+0xb0>)
    74e4:	f003 fad2 	bl	aa8c <fire_callbacks>
	if (fired_triggers[1]) {
    74e8:	9903      	ldr	r1, [sp, #12]
    74ea:	b111      	cbz	r1, 74f2 <gpiote_event_handler+0x92>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    74ec:	4809      	ldr	r0, [pc, #36]	; (7514 <gpiote_event_handler+0xb4>)
    74ee:	f003 facd 	bl	aa8c <fire_callbacks>
	if (port_event) {
    74f2:	b144      	cbz	r4, 7506 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    74f4:	4806      	ldr	r0, [pc, #24]	; (7510 <gpiote_event_handler+0xb0>)
    74f6:	f003 fb16 	bl	ab26 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    74fa:	4806      	ldr	r0, [pc, #24]	; (7514 <gpiote_event_handler+0xb4>)
}
    74fc:	b005      	add	sp, #20
    74fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    7502:	f003 bb10 	b.w	ab26 <cfg_level_pins>
}
    7506:	b005      	add	sp, #20
    7508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    750a:	bf00      	nop
    750c:	4000617c 	.word	0x4000617c
    7510:	20000394 	.word	0x20000394
    7514:	200003a4 	.word	0x200003a4
    7518:	40006000 	.word	0x40006000

0000751c <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    751c:	4b02      	ldr	r3, [pc, #8]	; (7528 <uart_nrfx_err_check+0xc>)
    751e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7522:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    7526:	4770      	bx	lr
    7528:	40002000 	.word	0x40002000

0000752c <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    752c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    752e:	794b      	ldrb	r3, [r1, #5]
    7530:	2b01      	cmp	r3, #1
    7532:	d029      	beq.n	7588 <uart_nrfx_configure+0x5c>
    7534:	2b03      	cmp	r3, #3
    7536:	d124      	bne.n	7582 <uart_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    7538:	2410      	movs	r4, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    753a:	798b      	ldrb	r3, [r1, #6]
    753c:	2b03      	cmp	r3, #3
    753e:	d120      	bne.n	7582 <uart_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    7540:	79ce      	ldrb	r6, [r1, #7]
    7542:	b126      	cbz	r6, 754e <uart_nrfx_configure+0x22>
    7544:	2e01      	cmp	r6, #1
    7546:	d11c      	bne.n	7582 <uart_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    7548:	6843      	ldr	r3, [r0, #4]
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	b1cb      	cbz	r3, 7582 <uart_nrfx_configure+0x56>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    754e:	790a      	ldrb	r2, [r1, #4]
    7550:	2a01      	cmp	r2, #1
    7552:	d01b      	beq.n	758c <uart_nrfx_configure+0x60>
    7554:	2a02      	cmp	r2, #2
    7556:	d01d      	beq.n	7594 <uart_nrfx_configure+0x68>
    7558:	b99a      	cbnz	r2, 7582 <uart_nrfx_configure+0x56>
    755a:	4615      	mov	r5, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    755c:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    755e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    7562:	d069      	beq.n	7638 <uart_nrfx_configure+0x10c>
    7564:	d833      	bhi.n	75ce <uart_nrfx_configure+0xa2>
    7566:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    756a:	d067      	beq.n	763c <uart_nrfx_configure+0x110>
    756c:	d81c      	bhi.n	75a8 <uart_nrfx_configure+0x7c>
    756e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7572:	d065      	beq.n	7640 <uart_nrfx_configure+0x114>
    7574:	d810      	bhi.n	7598 <uart_nrfx_configure+0x6c>
    7576:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    757a:	d064      	beq.n	7646 <uart_nrfx_configure+0x11a>
    757c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7580:	d064      	beq.n	764c <uart_nrfx_configure+0x120>
    7582:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7586:	e056      	b.n	7636 <uart_nrfx_configure+0x10a>
	switch (cfg->stop_bits) {
    7588:	2400      	movs	r4, #0
    758a:	e7d6      	b.n	753a <uart_nrfx_configure+0xe>
		uart_cfg.paritytype = NRF_UART_PARITYTYPE_ODD;
    758c:	f44f 7580 	mov.w	r5, #256	; 0x100
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    7590:	220e      	movs	r2, #14
    7592:	e7e3      	b.n	755c <uart_nrfx_configure+0x30>
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
    7594:	2500      	movs	r5, #0
    7596:	e7fb      	b.n	7590 <uart_nrfx_configure+0x64>
	switch (baudrate) {
    7598:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    759c:	d059      	beq.n	7652 <uart_nrfx_configure+0x126>
    759e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    75a2:	d1ee      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    75a4:	4b35      	ldr	r3, [pc, #212]	; (767c <uart_nrfx_configure+0x150>)
    75a6:	e039      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    75a8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    75ac:	d054      	beq.n	7658 <uart_nrfx_configure+0x12c>
    75ae:	d807      	bhi.n	75c0 <uart_nrfx_configure+0x94>
    75b0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    75b4:	d052      	beq.n	765c <uart_nrfx_configure+0x130>
    75b6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    75ba:	d1e2      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    75bc:	4b30      	ldr	r3, [pc, #192]	; (7680 <uart_nrfx_configure+0x154>)
    75be:	e02d      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    75c0:	f647 2712 	movw	r7, #31250	; 0x7a12
    75c4:	42bb      	cmp	r3, r7
    75c6:	d1dc      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    75c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    75cc:	e026      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    75ce:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    75d2:	d046      	beq.n	7662 <uart_nrfx_configure+0x136>
    75d4:	d811      	bhi.n	75fa <uart_nrfx_configure+0xce>
    75d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    75da:	d044      	beq.n	7666 <uart_nrfx_configure+0x13a>
    75dc:	d808      	bhi.n	75f0 <uart_nrfx_configure+0xc4>
    75de:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    75e2:	42bb      	cmp	r3, r7
    75e4:	d041      	beq.n	766a <uart_nrfx_configure+0x13e>
    75e6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    75ea:	d1ca      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    75ec:	4b25      	ldr	r3, [pc, #148]	; (7684 <uart_nrfx_configure+0x158>)
    75ee:	e015      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    75f0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    75f4:	d1c5      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    75f6:	4b24      	ldr	r3, [pc, #144]	; (7688 <uart_nrfx_configure+0x15c>)
    75f8:	e010      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    75fa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    75fe:	d037      	beq.n	7670 <uart_nrfx_configure+0x144>
    7600:	d807      	bhi.n	7612 <uart_nrfx_configure+0xe6>
    7602:	4f22      	ldr	r7, [pc, #136]	; (768c <uart_nrfx_configure+0x160>)
    7604:	42bb      	cmp	r3, r7
    7606:	d035      	beq.n	7674 <uart_nrfx_configure+0x148>
    7608:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    760c:	d1b9      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    760e:	4b20      	ldr	r3, [pc, #128]	; (7690 <uart_nrfx_configure+0x164>)
    7610:	e004      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    7612:	4f20      	ldr	r7, [pc, #128]	; (7694 <uart_nrfx_configure+0x168>)
    7614:	42bb      	cmp	r3, r7
    7616:	d1b4      	bne.n	7582 <uart_nrfx_configure+0x56>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    7618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    761c:	4f1e      	ldr	r7, [pc, #120]	; (7698 <uart_nrfx_configure+0x16c>)
                    | (uint32_t)p_cfg->stop
    761e:	4322      	orrs	r2, r4
                    | (uint32_t)p_cfg->hwfc;
    7620:	4335      	orrs	r5, r6
    7622:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
    7624:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7628:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    762c:	68c3      	ldr	r3, [r0, #12]
    762e:	c903      	ldmia	r1, {r0, r1}
    7630:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    7634:	2000      	movs	r0, #0
}
    7636:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    7638:	4b18      	ldr	r3, [pc, #96]	; (769c <uart_nrfx_configure+0x170>)
    763a:	e7ef      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    763c:	4b18      	ldr	r3, [pc, #96]	; (76a0 <uart_nrfx_configure+0x174>)
    763e:	e7ed      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    7640:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7644:	e7ea      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = 0x00014000;
    7646:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    764a:	e7e7      	b.n	761c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    764c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    7650:	e7e4      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    7652:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7656:	e7e1      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    7658:	4b12      	ldr	r3, [pc, #72]	; (76a4 <uart_nrfx_configure+0x178>)
    765a:	e7df      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    765c:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    7660:	e7dc      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    7662:	4b11      	ldr	r3, [pc, #68]	; (76a8 <uart_nrfx_configure+0x17c>)
    7664:	e7da      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    7666:	4b11      	ldr	r3, [pc, #68]	; (76ac <uart_nrfx_configure+0x180>)
    7668:	e7d8      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    766a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    766e:	e7d5      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    7670:	4b0f      	ldr	r3, [pc, #60]	; (76b0 <uart_nrfx_configure+0x184>)
    7672:	e7d3      	b.n	761c <uart_nrfx_configure+0xf0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    7674:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7678:	e7d0      	b.n	761c <uart_nrfx_configure+0xf0>
    767a:	bf00      	nop
    767c:	0013b000 	.word	0x0013b000
    7680:	004ea000 	.word	0x004ea000
    7684:	00ebf000 	.word	0x00ebf000
    7688:	01d7e000 	.word	0x01d7e000
    768c:	0003d090 	.word	0x0003d090
    7690:	075f7000 	.word	0x075f7000
    7694:	000f4240 	.word	0x000f4240
    7698:	40002000 	.word	0x40002000
    769c:	009d5000 	.word	0x009d5000
    76a0:	00275000 	.word	0x00275000
    76a4:	0075f000 	.word	0x0075f000
    76a8:	03afb000 	.word	0x03afb000
    76ac:	013a9000 	.word	0x013a9000
    76b0:	0ebed000 	.word	0x0ebed000

000076b4 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76b4:	4b08      	ldr	r3, [pc, #32]	; (76d8 <uart_nrfx_poll_in+0x24>)
    76b6:	681a      	ldr	r2, [r3, #0]
{
    76b8:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    76ba:	b152      	cbz	r2, 76d2 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76bc:	2000      	movs	r0, #0
    76be:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    76c0:	681b      	ldr	r3, [r3, #0]
    76c2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    76c4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    76c6:	4b05      	ldr	r3, [pc, #20]	; (76dc <uart_nrfx_poll_in+0x28>)
    76c8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    76cc:	700b      	strb	r3, [r1, #0]
}
    76ce:	b002      	add	sp, #8
    76d0:	4770      	bx	lr
		return -1;
    76d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    76d6:	e7fa      	b.n	76ce <uart_nrfx_poll_in+0x1a>
    76d8:	40002108 	.word	0x40002108
    76dc:	40002000 	.word	0x40002000

000076e0 <uart_nrfx_poll_out>:
{
    76e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    76e2:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    76e4:	f003 fd62 	bl	b1ac <k_is_in_isr>
    76e8:	4d1b      	ldr	r5, [pc, #108]	; (7758 <uart_nrfx_poll_out+0x78>)
    76ea:	b9c0      	cbnz	r0, 771e <uart_nrfx_poll_out+0x3e>
    76ec:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    76ee:	2701      	movs	r7, #1
    76f0:	f3bf 8f5b 	dmb	ish
    76f4:	e855 3f00 	ldrex	r3, [r5]
    76f8:	2b00      	cmp	r3, #0
    76fa:	d103      	bne.n	7704 <uart_nrfx_poll_out+0x24>
    76fc:	e845 7200 	strex	r2, r7, [r5]
    7700:	2a00      	cmp	r2, #0
    7702:	d1f7      	bne.n	76f4 <uart_nrfx_poll_out+0x14>
    7704:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    7708:	d00b      	beq.n	7722 <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    770a:	2021      	movs	r0, #33	; 0x21
    770c:	2100      	movs	r1, #0
    770e:	3c01      	subs	r4, #1
    7710:	f001 f996 	bl	8a40 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    7714:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7718:	d1ea      	bne.n	76f0 <uart_nrfx_poll_out+0x10>
}
    771a:	b003      	add	sp, #12
    771c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
    771e:	2301      	movs	r3, #1
    7720:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7722:	4c0e      	ldr	r4, [pc, #56]	; (775c <uart_nrfx_poll_out+0x7c>)
    7724:	2200      	movs	r2, #0
    7726:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    7728:	6822      	ldr	r2, [r4, #0]
    772a:	9201      	str	r2, [sp, #4]
    (void)dummy;
    772c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    772e:	4a0c      	ldr	r2, [pc, #48]	; (7760 <uart_nrfx_poll_out+0x80>)
    7730:	2101      	movs	r1, #1
    7732:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    7734:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    7738:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    773c:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    773e:	b923      	cbnz	r3, 774a <uart_nrfx_poll_out+0x6a>
    7740:	2001      	movs	r0, #1
    7742:	f003 fa94 	bl	ac6e <nrfx_busy_wait>
    7746:	3e01      	subs	r6, #1
    7748:	d1f8      	bne.n	773c <uart_nrfx_poll_out+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    774a:	4b06      	ldr	r3, [pc, #24]	; (7764 <uart_nrfx_poll_out+0x84>)
    774c:	2201      	movs	r2, #1
    774e:	601a      	str	r2, [r3, #0]
	*lock = 0;
    7750:	2300      	movs	r3, #0
    7752:	602b      	str	r3, [r5, #0]
    7754:	e7e1      	b.n	771a <uart_nrfx_poll_out+0x3a>
    7756:	bf00      	nop
    7758:	20001200 	.word	0x20001200
    775c:	4000211c 	.word	0x4000211c
    7760:	40002008 	.word	0x40002008
    7764:	4000200c 	.word	0x4000200c

00007768 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
    7768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    776c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
    776e:	4c16      	ldr	r4, [pc, #88]	; (77c8 <uart_nrfx_init+0x60>)
    7770:	2240      	movs	r2, #64	; 0x40
    7772:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    7776:	2103      	movs	r1, #3
    7778:	2200      	movs	r2, #0
    777a:	2508      	movs	r5, #8
    777c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    7780:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    7784:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    7788:	2506      	movs	r5, #6
    778a:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    778e:	2520      	movs	r5, #32
    7790:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    7794:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    7798:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    779c:	2305      	movs	r3, #5
    779e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    77a2:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    77a4:	68c1      	ldr	r1, [r0, #12]
    77a6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    77aa:	f7ff febf 	bl	752c <uart_nrfx_configure>
	if (err) {
    77ae:	b948      	cbnz	r0, 77c4 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    77b0:	2304      	movs	r3, #4
    77b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77b6:	4b05      	ldr	r3, [pc, #20]	; (77cc <uart_nrfx_init+0x64>)
    77b8:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	9301      	str	r3, [sp, #4]
    (void)dummy;
    77be:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77c0:	2301      	movs	r3, #1
    77c2:	6023      	str	r3, [r4, #0]
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    77c4:	b003      	add	sp, #12
    77c6:	bd30      	pop	{r4, r5, pc}
    77c8:	40002000 	.word	0x40002000
    77cc:	40002108 	.word	0x40002108

000077d0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    77d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    77d2:	794b      	ldrb	r3, [r1, #5]
    77d4:	2b01      	cmp	r3, #1
    77d6:	d02b      	beq.n	7830 <uarte_nrfx_configure+0x60>
    77d8:	2b03      	cmp	r3, #3
    77da:	d126      	bne.n	782a <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    77dc:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    77de:	798b      	ldrb	r3, [r1, #6]
    77e0:	2b03      	cmp	r3, #3
    77e2:	d122      	bne.n	782a <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    77e4:	79cd      	ldrb	r5, [r1, #7]
    77e6:	b125      	cbz	r5, 77f2 <uarte_nrfx_configure+0x22>
    77e8:	2d01      	cmp	r5, #1
    77ea:	d11e      	bne.n	782a <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    77ec:	6843      	ldr	r3, [r0, #4]
    77ee:	791b      	ldrb	r3, [r3, #4]
    77f0:	b1db      	cbz	r3, 782a <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    77f2:	790a      	ldrb	r2, [r1, #4]
    77f4:	2a01      	cmp	r2, #1
    77f6:	d01d      	beq.n	7834 <uarte_nrfx_configure+0x64>
    77f8:	2a02      	cmp	r2, #2
    77fa:	d01f      	beq.n	783c <uarte_nrfx_configure+0x6c>
    77fc:	b9aa      	cbnz	r2, 782a <uarte_nrfx_configure+0x5a>
    77fe:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7800:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    7802:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    7804:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    7808:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    780a:	d06d      	beq.n	78e8 <uarte_nrfx_configure+0x118>
    780c:	d833      	bhi.n	7876 <uarte_nrfx_configure+0xa6>
    780e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7812:	d06c      	beq.n	78ee <uarte_nrfx_configure+0x11e>
    7814:	d81c      	bhi.n	7850 <uarte_nrfx_configure+0x80>
    7816:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    781a:	d06a      	beq.n	78f2 <uarte_nrfx_configure+0x122>
    781c:	d810      	bhi.n	7840 <uarte_nrfx_configure+0x70>
    781e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7822:	d069      	beq.n	78f8 <uarte_nrfx_configure+0x128>
    7824:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7828:	d069      	beq.n	78fe <uarte_nrfx_configure+0x12e>
    782a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    782e:	e05a      	b.n	78e6 <uarte_nrfx_configure+0x116>
	switch (cfg->stop_bits) {
    7830:	2700      	movs	r7, #0
    7832:	e7d4      	b.n	77de <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    7834:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7838:	220e      	movs	r2, #14
    783a:	e7e1      	b.n	7800 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    783c:	2400      	movs	r4, #0
    783e:	e7fb      	b.n	7838 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    7840:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    7844:	d05e      	beq.n	7904 <uarte_nrfx_configure+0x134>
    7846:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    784a:	d1ee      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    784c:	4b38      	ldr	r3, [pc, #224]	; (7930 <uarte_nrfx_configure+0x160>)
    784e:	e03e      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    7850:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    7854:	d059      	beq.n	790a <uarte_nrfx_configure+0x13a>
    7856:	d807      	bhi.n	7868 <uarte_nrfx_configure+0x98>
    7858:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    785c:	d057      	beq.n	790e <uarte_nrfx_configure+0x13e>
    785e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    7862:	d1e2      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7864:	4b33      	ldr	r3, [pc, #204]	; (7934 <uarte_nrfx_configure+0x164>)
    7866:	e032      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    7868:	f647 2c12 	movw	ip, #31250	; 0x7a12
    786c:	4563      	cmp	r3, ip
    786e:	d1dc      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7870:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7874:	e02b      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    7876:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    787a:	d04a      	beq.n	7912 <uarte_nrfx_configure+0x142>
    787c:	d813      	bhi.n	78a6 <uarte_nrfx_configure+0xd6>
    787e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    7882:	d049      	beq.n	7918 <uarte_nrfx_configure+0x148>
    7884:	d809      	bhi.n	789a <uarte_nrfx_configure+0xca>
    7886:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    788a:	4563      	cmp	r3, ip
    788c:	d046      	beq.n	791c <uarte_nrfx_configure+0x14c>
    788e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7892:	d1ca      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7894:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7898:	e019      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    789a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    789e:	d1c4      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    78a0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    78a4:	e013      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    78a6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    78aa:	d03a      	beq.n	7922 <uarte_nrfx_configure+0x152>
    78ac:	d809      	bhi.n	78c2 <uarte_nrfx_configure+0xf2>
    78ae:	f8df c098 	ldr.w	ip, [pc, #152]	; 7948 <uarte_nrfx_configure+0x178>
    78b2:	4563      	cmp	r3, ip
    78b4:	d038      	beq.n	7928 <uarte_nrfx_configure+0x158>
    78b6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    78ba:	d1b6      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    78bc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    78c0:	e005      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    78c2:	f8df c088 	ldr.w	ip, [pc, #136]	; 794c <uarte_nrfx_configure+0x17c>
    78c6:	4563      	cmp	r3, ip
    78c8:	d1af      	bne.n	782a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    78ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    78ce:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    78d2:	68c3      	ldr	r3, [r0, #12]
    78d4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    78d6:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    78d8:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    78da:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    78dc:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    78e0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    78e4:	2000      	movs	r0, #0
}
    78e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    78e8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    78ec:	e7ef      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    78ee:	4b12      	ldr	r3, [pc, #72]	; (7938 <uarte_nrfx_configure+0x168>)
    78f0:	e7ed      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    78f2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    78f6:	e7ea      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    78f8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    78fc:	e7e7      	b.n	78ce <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    78fe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    7902:	e7e4      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7904:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7908:	e7e1      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    790a:	4b0c      	ldr	r3, [pc, #48]	; (793c <uarte_nrfx_configure+0x16c>)
    790c:	e7df      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    790e:	4b0c      	ldr	r3, [pc, #48]	; (7940 <uarte_nrfx_configure+0x170>)
    7910:	e7dd      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7912:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7916:	e7da      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7918:	4b0a      	ldr	r3, [pc, #40]	; (7944 <uarte_nrfx_configure+0x174>)
    791a:	e7d8      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    791c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7920:	e7d5      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7922:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7926:	e7d2      	b.n	78ce <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7928:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    792c:	e7cf      	b.n	78ce <uarte_nrfx_configure+0xfe>
    792e:	bf00      	nop
    7930:	0013b000 	.word	0x0013b000
    7934:	004ea000 	.word	0x004ea000
    7938:	00275000 	.word	0x00275000
    793c:	0075c000 	.word	0x0075c000
    7940:	003af000 	.word	0x003af000
    7944:	013a9000 	.word	0x013a9000
    7948:	0003d090 	.word	0x0003d090
    794c:	000f4240 	.word	0x000f4240

00007950 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7950:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return config->uarte_regs;
    7952:	6842      	ldr	r2, [r0, #4]
    p_reg->OUTSET = set_mask;
    7954:	4b13      	ldr	r3, [pc, #76]	; (79a4 <uarte_1_init+0x54>)
    7956:	6814      	ldr	r4, [r2, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    7958:	68c5      	ldr	r5, [r0, #12]
    795a:	2204      	movs	r2, #4
    795c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    7960:	2203      	movs	r2, #3
    7962:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
    7966:	2200      	movs	r2, #0
    7968:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
    796c:	2322      	movs	r3, #34	; 0x22
    796e:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    7972:	2321      	movs	r3, #33	; 0x21
    7974:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    7978:	4629      	mov	r1, r5
    797a:	f7ff ff29 	bl	77d0 <uarte_nrfx_configure>
	if (err) {
    797e:	b978      	cbnz	r0, 79a0 <uarte_1_init+0x50>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7980:	2308      	movs	r3, #8
    7982:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7986:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    798a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    798e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    7990:	9b01      	ldr	r3, [sp, #4]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    7992:	350c      	adds	r5, #12
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    7994:	2301      	movs	r3, #1
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7996:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    799a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    799e:	6023      	str	r3, [r4, #0]
UART_NRF_UARTE_DEVICE(1);
    79a0:	b003      	add	sp, #12
    79a2:	bd30      	pop	{r4, r5, pc}
    79a4:	50000300 	.word	0x50000300

000079a8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
    79a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79aa:	4603      	mov	r3, r0
	u32_t last  = rngp->last;
    79ac:	7884      	ldrb	r4, [r0, #2]
	u32_t mask  = rngp->mask;
    79ae:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
    79b0:	f04f 0520 	mov.w	r5, #32
    79b4:	f3ef 8011 	mrs	r0, BASEPRI
    79b8:	f385 8811 	msr	BASEPRI, r5
    79bc:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    79c0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    79c2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    79c6:	1ba4      	subs	r4, r4, r6
    79c8:	403c      	ands	r4, r7
	if (available < len) {
    79ca:	42a2      	cmp	r2, r4
		len = available;
    79cc:	bf88      	it	hi
    79ce:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    79d0:	eb06 0c02 	add.w	ip, r6, r2
    79d4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
    79d8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
    79da:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
    79de:	f380 8811 	msr	BASEPRI, r0
    79e2:	f3bf 8f6f 	isb	sy
    79e6:	440a      	add	r2, r1
	u8_t *dst   = buf;
    79e8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
    79ea:	4282      	cmp	r2, r0
    79ec:	d119      	bne.n	7a22 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    79ee:	4576      	cmp	r6, lr
    79f0:	d10d      	bne.n	7a0e <rng_pool_get+0x66>
	__asm__ volatile(
    79f2:	f04f 0520 	mov.w	r5, #32
    79f6:	f3ef 8211 	mrs	r2, BASEPRI
    79fa:	f385 8811 	msr	BASEPRI, r5
    79fe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    7a02:	781d      	ldrb	r5, [r3, #0]
    7a04:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
    7a06:	f382 8811 	msr	BASEPRI, r2
    7a0a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    7a0e:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
    7a10:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
    7a12:	b288      	uxth	r0, r1
	available = available - len;
    7a14:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
    7a16:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    7a18:	bf22      	ittt	cs
    7a1a:	4b06      	ldrcs	r3, [pc, #24]	; (7a34 <rng_pool_get+0x8c>)
    7a1c:	2201      	movcs	r2, #1
    7a1e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    7a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    7a22:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
    7a26:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    7a28:	f89c c005 	ldrb.w	ip, [ip, #5]
    7a2c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
    7a30:	403d      	ands	r5, r7
    7a32:	e7da      	b.n	79ea <rng_pool_get+0x42>
    7a34:	4000d000 	.word	0x4000d000

00007a38 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
    7a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
    7a3c:	4f13      	ldr	r7, [pc, #76]	; (7a8c <entropy_nrf5_get_entropy+0x54>)
    7a3e:	460d      	mov	r5, r1
    7a40:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    7a42:	f107 0845 	add.w	r8, r7, #69	; 0x45
    7a46:	f107 0918 	add.w	r9, r7, #24
	while (len) {
    7a4a:	b914      	cbnz	r4, 7a52 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
    7a4c:	4620      	mov	r0, r4
    7a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a5a:	4638      	mov	r0, r7
    7a5c:	f001 f83c 	bl	8ad8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    7a60:	4622      	mov	r2, r4
    7a62:	4629      	mov	r1, r5
    7a64:	4640      	mov	r0, r8
    7a66:	f7ff ff9f 	bl	79a8 <rng_pool_get>
    7a6a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    7a6c:	4638      	mov	r0, r7
    7a6e:	f001 f80d 	bl	8a8c <z_impl_k_sem_give>
		if (bytes == 0U) {
    7a72:	b93e      	cbnz	r6, 7a84 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    7a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a7c:	4648      	mov	r0, r9
    7a7e:	f001 f82b 	bl	8ad8 <z_impl_k_sem_take>
			continue;
    7a82:	e7e2      	b.n	7a4a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
    7a84:	1ba4      	subs	r4, r4, r6
    7a86:	b2a4      	uxth	r4, r4
		buf += bytes;
    7a88:	4435      	add	r5, r6
    7a8a:	e7de      	b.n	7a4a <entropy_nrf5_get_entropy+0x12>
    7a8c:	20001204 	.word	0x20001204

00007a90 <random_byte_get>:
{
    7a90:	b082      	sub	sp, #8
	__asm__ volatile(
    7a92:	f04f 0320 	mov.w	r3, #32
    7a96:	f3ef 8211 	mrs	r2, BASEPRI
    7a9a:	f383 8811 	msr	BASEPRI, r3
    7a9e:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7aa2:	4b0a      	ldr	r3, [pc, #40]	; (7acc <random_byte_get+0x3c>)
    7aa4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    7aa6:	b171      	cbz	r1, 7ac6 <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    7aa8:	4909      	ldr	r1, [pc, #36]	; (7ad0 <random_byte_get+0x40>)
    7aaa:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    7aae:	2100      	movs	r1, #0
    7ab0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7ab2:	681b      	ldr	r3, [r3, #0]
    7ab4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    7ab6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
    7ab8:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    7aba:	f382 8811 	msr	BASEPRI, r2
    7abe:	f3bf 8f6f 	isb	sy
}
    7ac2:	b002      	add	sp, #8
    7ac4:	4770      	bx	lr
	int retval = -EAGAIN;
    7ac6:	f06f 000a 	mvn.w	r0, #10
    7aca:	e7f6      	b.n	7aba <random_byte_get+0x2a>
    7acc:	4000d100 	.word	0x4000d100
    7ad0:	4000d000 	.word	0x4000d000

00007ad4 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    7ad4:	43db      	mvns	r3, r3
{
    7ad6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    7ada:	f013 0501 	ands.w	r5, r3, #1
{
    7ade:	460e      	mov	r6, r1
    7ae0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    7ae2:	d005      	beq.n	7af0 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    7ae4:	4820      	ldr	r0, [pc, #128]	; (7b68 <entropy_nrf5_get_entropy_isr+0x94>)
    7ae6:	f7ff ff5f 	bl	79a8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    7aea:	b002      	add	sp, #8
    7aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    7af0:	2a00      	cmp	r2, #0
    7af2:	d032      	beq.n	7b5a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    7af4:	f04f 0320 	mov.w	r3, #32
    7af8:	f3ef 8711 	mrs	r7, BASEPRI
    7afc:	f383 8811 	msr	BASEPRI, r3
    7b00:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    7b04:	200d      	movs	r0, #13
    7b06:	f7fa f805 	bl	1b14 <arch_irq_is_enabled>
    7b0a:	4680      	mov	r8, r0
		irq_disable(IRQN);
    7b0c:	200d      	movs	r0, #13
    7b0e:	f7f9 ffed 	bl	1aec <arch_irq_disable>
	__asm__ volatile(
    7b12:	f387 8811 	msr	BASEPRI, r7
    7b16:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    7b1a:	4f14      	ldr	r7, [pc, #80]	; (7b6c <entropy_nrf5_get_entropy_isr+0x98>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b1c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 7b74 <entropy_nrf5_get_entropy_isr+0xa0>
    7b20:	603d      	str	r5, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7b22:	683a      	ldr	r2, [r7, #0]
    7b24:	9201      	str	r2, [sp, #4]
    (void)dummy;
    7b26:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    7b28:	4a11      	ldr	r2, [pc, #68]	; (7b70 <entropy_nrf5_get_entropy_isr+0x9c>)
    7b2a:	2101      	movs	r1, #1
    7b2c:	6011      	str	r1, [r2, #0]
}
    7b2e:	4625      	mov	r5, r4
    7b30:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7b34:	683b      	ldr	r3, [r7, #0]
			while (!nrf_rng_event_check(NRF_RNG,
    7b36:	b193      	cbz	r3, 7b5e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    7b38:	f7ff ffaa 	bl	7a90 <random_byte_get>
			if (byte < 0) {
    7b3c:	2800      	cmp	r0, #0
    7b3e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    7b42:	dbf7      	blt.n	7b34 <entropy_nrf5_get_entropy_isr+0x60>
    7b44:	3d01      	subs	r5, #1
    7b46:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
    7b48:	5570      	strb	r0, [r6, r5]
		} while (len);
    7b4a:	2d00      	cmp	r5, #0
    7b4c:	d1f2      	bne.n	7b34 <entropy_nrf5_get_entropy_isr+0x60>
		if (irq_enabled) {
    7b4e:	f1b8 0f00 	cmp.w	r8, #0
    7b52:	d002      	beq.n	7b5a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    7b54:	200d      	movs	r0, #13
    7b56:	f7f9 ffb9 	bl	1acc <arch_irq_enable>
	return cnt;
    7b5a:	4620      	mov	r0, r4
    7b5c:	e7c5      	b.n	7aea <entropy_nrf5_get_entropy_isr+0x16>
				__WFE();
    7b5e:	bf20      	wfe
				__SEV();
    7b60:	bf40      	sev
				__WFE();
    7b62:	bf20      	wfe
    7b64:	e7e6      	b.n	7b34 <entropy_nrf5_get_entropy_isr+0x60>
    7b66:	bf00      	nop
    7b68:	20001234 	.word	0x20001234
    7b6c:	4000d100 	.word	0x4000d100
    7b70:	4000d000 	.word	0x4000d000
    7b74:	e000e100 	.word	0xe000e100

00007b78 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    7b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    7b7a:	4c1a      	ldr	r4, [pc, #104]	; (7be4 <entropy_nrf5_init+0x6c>)
    7b7c:	2201      	movs	r2, #1
    7b7e:	4611      	mov	r1, r2
    7b80:	4620      	mov	r0, r4
    7b82:	f003 fb03 	bl	b18c <z_impl_k_sem_init>
    7b86:	2201      	movs	r2, #1
    7b88:	2100      	movs	r1, #0
    7b8a:	f104 0018 	add.w	r0, r4, #24
    7b8e:	f003 fafd 	bl	b18c <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    7b92:	f240 4307 	movw	r3, #1031	; 0x407
    7b96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    7b9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7b9e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    7ba0:	230c      	movs	r3, #12
    7ba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    7ba6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    7ba8:	4b0f      	ldr	r3, [pc, #60]	; (7be8 <entropy_nrf5_init+0x70>)
    7baa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    7bae:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    7bb2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    7bb6:	f042 0201 	orr.w	r2, r2, #1
    7bba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    7bbe:	4a0b      	ldr	r2, [pc, #44]	; (7bec <entropy_nrf5_init+0x74>)
    7bc0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7bc2:	6812      	ldr	r2, [r2, #0]
    7bc4:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
    7bc6:	2101      	movs	r1, #1
    (void)dummy;
    7bc8:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
    7bca:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    7bce:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    7bd0:	6019      	str	r1, [r3, #0]
    7bd2:	200d      	movs	r0, #13
    7bd4:	f7f9 ffac 	bl	1b30 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    7bd8:	200d      	movs	r0, #13
    7bda:	f7f9 ff77 	bl	1acc <arch_irq_enable>

	return 0;
}
    7bde:	4628      	mov	r0, r5
    7be0:	b003      	add	sp, #12
    7be2:	bd30      	pop	{r4, r5, pc}
    7be4:	20001204 	.word	0x20001204
    7be8:	4000d000 	.word	0x4000d000
    7bec:	4000d100 	.word	0x4000d100

00007bf0 <isr>:
{
    7bf0:	b510      	push	{r4, lr}
	byte = random_byte_get();
    7bf2:	f7ff ff4d 	bl	7a90 <random_byte_get>
	if (byte < 0) {
    7bf6:	2800      	cmp	r0, #0
    7bf8:	db20      	blt.n	7c3c <isr+0x4c>
	u8_t last  = rngp->last;
    7bfa:	4b17      	ldr	r3, [pc, #92]	; (7c58 <isr+0x68>)
    7bfc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    7c00:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
    7c04:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    7c08:	1a51      	subs	r1, r2, r1
    7c0a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    7c0e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    7c10:	d10d      	bne.n	7c2e <isr+0x3e>
	u8_t last  = rngp->last;
    7c12:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    7c16:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
    7c1a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    7c1e:	1a51      	subs	r1, r2, r1
    7c20:	ea34 0101 	bics.w	r1, r4, r1
    7c24:	d10b      	bne.n	7c3e <isr+0x4e>
    7c26:	4b0d      	ldr	r3, [pc, #52]	; (7c5c <isr+0x6c>)
    7c28:	2201      	movs	r2, #1
    7c2a:	601a      	str	r2, [r3, #0]
}
    7c2c:	e00e      	b.n	7c4c <isr+0x5c>
	rngp->buffer[last] = byte;
    7c2e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    7c30:	3201      	adds	r2, #1
    7c32:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    7c34:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    7c38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
    7c3c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    7c3e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    7c40:	3201      	adds	r2, #1
    7c42:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    7c44:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    7c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    7c4c:	4804      	ldr	r0, [pc, #16]	; (7c60 <isr+0x70>)
}
    7c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c52:	f000 bf1b 	b.w	8a8c <z_impl_k_sem_give>
    7c56:	bf00      	nop
    7c58:	20001204 	.word	0x20001204
    7c5c:	4000d004 	.word	0x4000d004
    7c60:	2000121c 	.word	0x2000121c

00007c64 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7c64:	b508      	push	{r3, lr}
	z_impl_log_panic();
    7c66:	f7f9 f993 	bl	f90 <z_impl_log_panic>
    7c6a:	4b06      	ldr	r3, [pc, #24]	; (7c84 <k_sys_fatal_error_handler+0x20>)
    7c6c:	4906      	ldr	r1, [pc, #24]	; (7c88 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    7c6e:	4807      	ldr	r0, [pc, #28]	; (7c8c <k_sys_fatal_error_handler+0x28>)
    7c70:	1ac9      	subs	r1, r1, r3
    7c72:	08c9      	lsrs	r1, r1, #3
    7c74:	0189      	lsls	r1, r1, #6
    7c76:	f041 0101 	orr.w	r1, r1, #1
    7c7a:	f001 fd55 	bl	9728 <log_0>
	sys_arch_reboot(0);
    7c7e:	2000      	movs	r0, #0
    7c80:	f7fa fb90 	bl	23a4 <sys_arch_reboot>

	CODE_UNREACHABLE;
    7c84:	0000b750 	.word	0x0000b750
    7c88:	0000b7d8 	.word	0x0000b7d8
    7c8c:	0000d198 	.word	0x0000d198

00007c90 <SystemInit>:
    return false;
}

static bool errata_36(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    7c90:	4b4c      	ldr	r3, [pc, #304]	; (7dc4 <SystemInit+0x134>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	2b0d      	cmp	r3, #13
    7c96:	d157      	bne.n	7d48 <SystemInit+0xb8>
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
        NRF_CLOCK->EVENTS_DONE = 0;
    7c98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    }   

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        NRF_CLOCK->EVENTS_DONE = 0;
    7ca0:	2300      	movs	r3, #0
    7ca2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    7ca6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    7caa:	f8c1 3538 	str.w	r3, [r1, #1336]	; 0x538
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7cae:	4b46      	ldr	r3, [pc, #280]	; (7dc8 <SystemInit+0x138>)
    7cb0:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
    7cb4:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7cb8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    7cbc:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7cc0:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
    7cc4:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7cc8:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
    7ccc:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7cd0:	f8d2 0414 	ldr.w	r0, [r2, #1044]	; 0x414
    7cd4:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7cd8:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
    7cdc:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7ce0:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
    7ce4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7ce8:	f8d2 0420 	ldr.w	r0, [r2, #1056]	; 0x420
    7cec:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7cf0:	f8d2 0424 	ldr.w	r0, [r2, #1060]	; 0x424
    7cf4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7cf8:	f8d2 0428 	ldr.w	r0, [r2, #1064]	; 0x428
    7cfc:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    7d00:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
    7d04:	f8c3 0550 	str.w	r0, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    7d08:	f8d2 0430 	ldr.w	r0, [r2, #1072]	; 0x430
    7d0c:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    7d10:	f8d2 0434 	ldr.w	r0, [r2, #1076]	; 0x434
    7d14:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    7d18:	f8d2 0438 	ldr.w	r0, [r2, #1080]	; 0x438
    7d1c:	f8c3 0564 	str.w	r0, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    7d20:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
    7d24:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    7d28:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
    7d2c:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    7d30:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    7d34:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7d38:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    7d3c:	07db      	lsls	r3, r3, #31
            NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
    7d3e:	bf44      	itt	mi
    7d40:	f06f 0301 	mvnmi.w	r3, #1
    7d44:	f8c1 3400 	strmi.w	r3, [r1, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7d48:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7d4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7d50:	2a00      	cmp	r2, #0
    7d52:	db03      	blt.n	7d5c <SystemInit+0xcc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7d54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7d58:	2b00      	cmp	r3, #0
    7d5a:	da2f      	bge.n	7dbc <SystemInit+0x12c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    7d5c:	4b1b      	ldr	r3, [pc, #108]	; (7dcc <SystemInit+0x13c>)
    7d5e:	2201      	movs	r2, #1
    7d60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7d64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7d68:	2a00      	cmp	r2, #0
    7d6a:	d0fb      	beq.n	7d64 <SystemInit+0xd4>
            NRF_UICR->PSELRESET[0] = 18;
    7d6c:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    7d70:	2112      	movs	r1, #18
    7d72:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7d76:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7d7a:	2a00      	cmp	r2, #0
    7d7c:	d0fb      	beq.n	7d76 <SystemInit+0xe6>
            NRF_UICR->PSELRESET[1] = 18;
    7d7e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7d82:	2212      	movs	r2, #18
    7d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7d88:	4b10      	ldr	r3, [pc, #64]	; (7dcc <SystemInit+0x13c>)
    7d8a:	461a      	mov	r2, r3
    7d8c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    7d90:	2900      	cmp	r1, #0
    7d92:	d0fb      	beq.n	7d8c <SystemInit+0xfc>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    7d94:	2100      	movs	r1, #0
    7d96:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7d9a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d0fb      	beq.n	7d9a <SystemInit+0x10a>
    7da2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7da6:	490a      	ldr	r1, [pc, #40]	; (7dd0 <SystemInit+0x140>)
    7da8:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <SystemInit+0x144>)
    7daa:	68ca      	ldr	r2, [r1, #12]
    7dac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7db0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7db2:	60cb      	str	r3, [r1, #12]
    7db4:	f3bf 8f4f 	dsb	sy
    __NOP();
    7db8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7dba:	e7fd      	b.n	7db8 <SystemInit+0x128>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7dbc:	4b06      	ldr	r3, [pc, #24]	; (7dd8 <SystemInit+0x148>)
    7dbe:	4a07      	ldr	r2, [pc, #28]	; (7ddc <SystemInit+0x14c>)
    7dc0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    7dc2:	4770      	bx	lr
    7dc4:	10000130 	.word	0x10000130
    7dc8:	4000c000 	.word	0x4000c000
    7dcc:	4001e000 	.word	0x4001e000
    7dd0:	e000ed00 	.word	0xe000ed00
    7dd4:	05fa0004 	.word	0x05fa0004
    7dd8:	20000330 	.word	0x20000330
    7ddc:	03d09000 	.word	0x03d09000

00007de0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7de2:	4b09      	ldr	r3, [pc, #36]	; (7e08 <z_sys_init_run_level+0x28>)
    7de4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7de8:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    7dea:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7dec:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7df0:	42a6      	cmp	r6, r4
    7df2:	d800      	bhi.n	7df6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    7df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    7df6:	e9d4 3500 	ldrd	r3, r5, [r4]
    7dfa:	4628      	mov	r0, r5
    7dfc:	4798      	blx	r3
		if (retval != 0) {
    7dfe:	b108      	cbz	r0, 7e04 <z_sys_init_run_level+0x24>
			if (dev) {
    7e00:	b105      	cbz	r5, 7e04 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    7e02:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7e04:	3408      	adds	r4, #8
    7e06:	e7f3      	b.n	7df0 <z_sys_init_run_level+0x10>
    7e08:	0000ba78 	.word	0x0000ba78

00007e0c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    7e0c:	4b0f      	ldr	r3, [pc, #60]	; (7e4c <z_impl_device_get_binding+0x40>)
{
    7e0e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    7e10:	4c0f      	ldr	r4, [pc, #60]	; (7e50 <z_impl_device_get_binding+0x44>)
{
    7e12:	4605      	mov	r5, r0
    7e14:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    7e16:	429c      	cmp	r4, r3
    7e18:	d104      	bne.n	7e24 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    7e1a:	4c0d      	ldr	r4, [pc, #52]	; (7e50 <z_impl_device_get_binding+0x44>)
    7e1c:	42b4      	cmp	r4, r6
    7e1e:	d108      	bne.n	7e32 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    7e20:	2400      	movs	r4, #0
    7e22:	e010      	b.n	7e46 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    7e24:	68a2      	ldr	r2, [r4, #8]
    7e26:	b112      	cbz	r2, 7e2e <z_impl_device_get_binding+0x22>
    7e28:	6822      	ldr	r2, [r4, #0]
    7e2a:	42aa      	cmp	r2, r5
    7e2c:	d00b      	beq.n	7e46 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    7e2e:	3410      	adds	r4, #16
    7e30:	e7f1      	b.n	7e16 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    7e32:	68a3      	ldr	r3, [r4, #8]
    7e34:	b90b      	cbnz	r3, 7e3a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7e36:	3410      	adds	r4, #16
    7e38:	e7f0      	b.n	7e1c <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    7e3a:	6821      	ldr	r1, [r4, #0]
    7e3c:	4628      	mov	r0, r5
    7e3e:	f002 f85d 	bl	9efc <strcmp>
		if ((dev->driver_api != NULL) &&
    7e42:	2800      	cmp	r0, #0
    7e44:	d1f7      	bne.n	7e36 <z_impl_device_get_binding+0x2a>
}
    7e46:	4620      	mov	r0, r4
    7e48:	bd70      	pop	{r4, r5, r6, pc}
    7e4a:	bf00      	nop
    7e4c:	200003b4 	.word	0x200003b4
    7e50:	20000344 	.word	0x20000344

00007e54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7e54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7e58:	4605      	mov	r5, r0
    7e5a:	460f      	mov	r7, r1
	__asm__ volatile(
    7e5c:	f04f 0320 	mov.w	r3, #32
    7e60:	f3ef 8811 	mrs	r8, BASEPRI
    7e64:	f383 8811 	msr	BASEPRI, r3
    7e68:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    7e6c:	f000 fe08 	bl	8a80 <z_impl_k_current_get>
    7e70:	4c21      	ldr	r4, [pc, #132]	; (7ef8 <z_fatal_error+0xa4>)
    7e72:	4b22      	ldr	r3, [pc, #136]	; (7efc <z_fatal_error+0xa8>)
    7e74:	1ae4      	subs	r4, r4, r3
    7e76:	2d04      	cmp	r5, #4
    7e78:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    7e7c:	bf96      	itet	ls
    7e7e:	4a20      	ldrls	r2, [pc, #128]	; (7f00 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7e80:	4a20      	ldrhi	r2, [pc, #128]	; (7f04 <z_fatal_error+0xb0>)
    7e82:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    7e86:	01a4      	lsls	r4, r4, #6
    7e88:	f044 0301 	orr.w	r3, r4, #1
    7e8c:	4606      	mov	r6, r0
    7e8e:	f8ad 3000 	strh.w	r3, [sp]
    7e92:	481d      	ldr	r0, [pc, #116]	; (7f08 <z_fatal_error+0xb4>)
    7e94:	2300      	movs	r3, #0
    7e96:	4629      	mov	r1, r5
    7e98:	f001 fc80 	bl	979c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7e9c:	b147      	cbz	r7, 7eb0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7e9e:	69fb      	ldr	r3, [r7, #28]
    7ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7ea4:	b123      	cbz	r3, 7eb0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    7ea6:	4819      	ldr	r0, [pc, #100]	; (7f0c <z_fatal_error+0xb8>)
    7ea8:	f044 0101 	orr.w	r1, r4, #1
    7eac:	f001 fc3c 	bl	9728 <log_0>
	const char *thread_name = k_thread_name_get(thread);
    7eb0:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7eb2:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
    7eb6:	f003 f984 	bl	b1c2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    7eba:	b1d0      	cbz	r0, 7ef2 <z_fatal_error+0x9e>
    7ebc:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    7ebe:	4b14      	ldr	r3, [pc, #80]	; (7f10 <z_fatal_error+0xbc>)
    7ec0:	2a00      	cmp	r2, #0
    7ec2:	bf08      	it	eq
    7ec4:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    7ec6:	f7f8 fee1 	bl	c8c <log_strdup>
    7eca:	4623      	mov	r3, r4
    7ecc:	4602      	mov	r2, r0
    7ece:	4631      	mov	r1, r6
    7ed0:	4810      	ldr	r0, [pc, #64]	; (7f14 <z_fatal_error+0xc0>)
    7ed2:	f001 fc4a 	bl	976a <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    7ed6:	4639      	mov	r1, r7
    7ed8:	4628      	mov	r0, r5
    7eda:	f7ff fec3 	bl	7c64 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7ede:	f388 8811 	msr	BASEPRI, r8
    7ee2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7ee6:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    7ee8:	b002      	add	sp, #8
    7eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7eee:	f7fa b94d 	b.w	218c <z_impl_k_thread_abort>
		thread_name = "unknown";
    7ef2:	4807      	ldr	r0, [pc, #28]	; (7f10 <z_fatal_error+0xbc>)
    7ef4:	e7e7      	b.n	7ec6 <z_fatal_error+0x72>
    7ef6:	bf00      	nop
    7ef8:	0000b7f8 	.word	0x0000b7f8
    7efc:	0000b750 	.word	0x0000b750
    7f00:	0000ba90 	.word	0x0000ba90
    7f04:	0000d1b5 	.word	0x0000d1b5
    7f08:	0000d1c3 	.word	0x0000d1c3
    7f0c:	0000d1eb 	.word	0x0000d1eb
    7f10:	0000c2bd 	.word	0x0000c2bd
    7f14:	0000d20c 	.word	0x0000d20c

00007f18 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    7f18:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    7f1a:	4d0b      	ldr	r5, [pc, #44]	; (7f48 <idle+0x30>)
	__asm__ volatile(
    7f1c:	f04f 0220 	mov.w	r2, #32
    7f20:	f3ef 8311 	mrs	r3, BASEPRI
    7f24:	f382 8811 	msr	BASEPRI, r2
    7f28:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    7f2c:	f003 f961 	bl	b1f2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    7f30:	2101      	movs	r1, #1
    7f32:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    7f34:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    7f36:	bfd8      	it	le
    7f38:	4608      	movle	r0, r1
    7f3a:	f003 f96a 	bl	b212 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    7f3e:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    7f40:	f7f9 fe58 	bl	1bf4 <arch_cpu_idle>
}
    7f44:	e7ea      	b.n	7f1c <idle+0x4>
    7f46:	bf00      	nop
    7f48:	20001340 	.word	0x20001340

00007f4c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7f4c:	4802      	ldr	r0, [pc, #8]	; (7f58 <z_bss_zero+0xc>)
    7f4e:	4a03      	ldr	r2, [pc, #12]	; (7f5c <z_bss_zero+0x10>)
    7f50:	2100      	movs	r1, #0
    7f52:	1a12      	subs	r2, r2, r0
    7f54:	f002 b819 	b.w	9f8a <memset>
    7f58:	200004a0 	.word	0x200004a0
    7f5c:	20001920 	.word	0x20001920

00007f60 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7f60:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    7f62:	4806      	ldr	r0, [pc, #24]	; (7f7c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    7f64:	4a06      	ldr	r2, [pc, #24]	; (7f80 <z_data_copy+0x20>)
    7f66:	4907      	ldr	r1, [pc, #28]	; (7f84 <z_data_copy+0x24>)
    7f68:	1a12      	subs	r2, r2, r0
    7f6a:	f001 ffe3 	bl	9f34 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    7f72:	4a05      	ldr	r2, [pc, #20]	; (7f88 <z_data_copy+0x28>)
    7f74:	4905      	ldr	r1, [pc, #20]	; (7f8c <z_data_copy+0x2c>)
    7f76:	4806      	ldr	r0, [pc, #24]	; (7f90 <z_data_copy+0x30>)
    7f78:	f001 bfdc 	b.w	9f34 <memcpy>
    7f7c:	20000000 	.word	0x20000000
    7f80:	2000049c 	.word	0x2000049c
    7f84:	0000d2b4 	.word	0x0000d2b4
    7f88:	00000000 	.word	0x00000000
    7f8c:	0000d2b4 	.word	0x0000d2b4
    7f90:	20000000 	.word	0x20000000

00007f94 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7f94:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    7f96:	4b0c      	ldr	r3, [pc, #48]	; (7fc8 <bg_thread_main+0x34>)
    7f98:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7f9a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7f9c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7f9e:	f7ff ff1f 	bl	7de0 <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
    7fa2:	4a0a      	ldr	r2, [pc, #40]	; (7fcc <bg_thread_main+0x38>)
    7fa4:	490a      	ldr	r1, [pc, #40]	; (7fd0 <bg_thread_main+0x3c>)
    7fa6:	480b      	ldr	r0, [pc, #44]	; (7fd4 <bg_thread_main+0x40>)
    7fa8:	f001 f8de 	bl	9168 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7fac:	2003      	movs	r0, #3
    7fae:	f7ff ff17 	bl	7de0 <z_sys_init_run_level>

	z_init_static_threads();
    7fb2:	f000 fe25 	bl	8c00 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    7fb6:	f7f8 fb33 	bl	620 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7fba:	4a07      	ldr	r2, [pc, #28]	; (7fd8 <bg_thread_main+0x44>)
    7fbc:	7b13      	ldrb	r3, [r2, #12]
    7fbe:	f023 0301 	bic.w	r3, r3, #1
    7fc2:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7fc4:	bd08      	pop	{r3, pc}
    7fc6:	bf00      	nop
    7fc8:	2000191c 	.word	0x2000191c
    7fcc:	0000bbed 	.word	0x0000bbed
    7fd0:	0000c9c7 	.word	0x0000c9c7
    7fd4:	0000d26e 	.word	0x0000d26e
    7fd8:	200012cc 	.word	0x200012cc

00007fdc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    7fdc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    7fe0:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    7fe2:	f7f8 fdab 	bl	b3c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    7fe6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7fea:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7fee:	4d34      	ldr	r5, [pc, #208]	; (80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>)
	_kernel.ready_q.cache = &z_main_thread;
    7ff0:	4e34      	ldr	r6, [pc, #208]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    7ff2:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
    7ff4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    7ff8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
	z_setup_new_thread(thread, stack,
    7ffc:	4f32      	ldr	r7, [pc, #200]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    7ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8002:	2400      	movs	r4, #0
    8004:	616b      	str	r3, [r5, #20]
    8006:	23e0      	movs	r3, #224	; 0xe0
    8008:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    800c:	77ec      	strb	r4, [r5, #31]
    800e:	762c      	strb	r4, [r5, #24]
    8010:	766c      	strb	r4, [r5, #25]
    8012:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8016:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    801a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    801c:	f7fa f894 	bl	2148 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8020:	f7f9 fde2 	bl	1be8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8028:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    802a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    802c:	4d27      	ldr	r5, [pc, #156]	; (80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    802e:	f240 1301 	movw	r3, #257	; 0x101
    8032:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    8036:	ab07      	add	r3, sp, #28
    8038:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    803a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    803c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    8040:	f7ff fece 	bl	7de0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8044:	2001      	movs	r0, #1
    8046:	f7ff fecb 	bl	7de0 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    804a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    804e:	f000 fc9d 	bl	898c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    8052:	4b1f      	ldr	r3, [pc, #124]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    8054:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    8056:	f44f 6280 	mov.w	r2, #1024	; 0x400
    805a:	4641      	mov	r1, r8
    805c:	9305      	str	r3, [sp, #20]
    805e:	4630      	mov	r0, r6
    8060:	4653      	mov	r3, sl
    8062:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    8066:	e9cd 4401 	strd	r4, r4, [sp, #4]
    806a:	9400      	str	r4, [sp, #0]
    806c:	f000 fd76 	bl	8b5c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8070:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    8072:	4630      	mov	r0, r6
    8074:	f023 0304 	bic.w	r3, r3, #4
    8078:	7373      	strb	r3, [r6, #13]
    807a:	f002 ffd4 	bl	b026 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    807e:	230f      	movs	r3, #15
    8080:	e9cd 4302 	strd	r4, r3, [sp, #8]
    8084:	4913      	ldr	r1, [pc, #76]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    8086:	4b14      	ldr	r3, [pc, #80]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
    8088:	f44f 72a0 	mov.w	r2, #320	; 0x140
    808c:	4638      	mov	r0, r7
    808e:	e9cd b404 	strd	fp, r4, [sp, #16]
    8092:	e9cd 4400 	strd	r4, r4, [sp]
    8096:	f000 fd61 	bl	8b5c <z_setup_new_thread>
    809a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    809c:	60ef      	str	r7, [r5, #12]
    809e:	f023 0304 	bic.w	r3, r3, #4
    80a2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    80a4:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    80a8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    80ac:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    80ae:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    80b2:	4653      	mov	r3, sl
    80b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    80b8:	4641      	mov	r1, r8
    80ba:	4630      	mov	r0, r6
    80bc:	f7f9 fd78 	bl	1bb0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    80c0:	e000ed00 	.word	0xe000ed00
    80c4:	200012cc 	.word	0x200012cc
    80c8:	20001258 	.word	0x20001258
    80cc:	20001340 	.word	0x20001340
    80d0:	0000d297 	.word	0x0000d297
    80d4:	20002860 	.word	0x20002860
    80d8:	00007f19 	.word	0x00007f19
    80dc:	200031a0 	.word	0x200031a0
    80e0:	00007f95 	.word	0x00007f95
    80e4:	20002460 	.word	0x20002460

000080e8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    80e8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    80ea:	4c06      	ldr	r4, [pc, #24]	; (8104 <statics_init+0x1c>)
    80ec:	4d06      	ldr	r5, [pc, #24]	; (8108 <statics_init+0x20>)
    80ee:	42ac      	cmp	r4, r5
    80f0:	d301      	bcc.n	80f6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    80f2:	2000      	movs	r0, #0
    80f4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    80f6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    80fa:	4620      	mov	r0, r4
    80fc:	f002 fdbb 	bl	ac76 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    8100:	3414      	adds	r4, #20
    8102:	e7f4      	b.n	80ee <statics_init+0x6>
    8104:	200003b4 	.word	0x200003b4
    8108:	200003b4 	.word	0x200003b4

0000810c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    810c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    810e:	4b0e      	ldr	r3, [pc, #56]	; (8148 <init_mem_slab_module+0x3c>)
    8110:	4c0e      	ldr	r4, [pc, #56]	; (814c <init_mem_slab_module+0x40>)
    8112:	42a3      	cmp	r3, r4
    8114:	d301      	bcc.n	811a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    8116:	2000      	movs	r0, #0
	return rc;
}
    8118:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    811a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    811e:	ea41 0200 	orr.w	r2, r1, r0
    8122:	f012 0203 	ands.w	r2, r2, #3
    8126:	d10b      	bne.n	8140 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    8128:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    812a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    812c:	42aa      	cmp	r2, r5
    812e:	d101      	bne.n	8134 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8130:	331c      	adds	r3, #28
    8132:	e7ee      	b.n	8112 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    8134:	695e      	ldr	r6, [r3, #20]
    8136:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8138:	3201      	adds	r2, #1
		slab->free_list = p;
    813a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    813c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    813e:	e7f5      	b.n	812c <init_mem_slab_module+0x20>
		return -EINVAL;
    8140:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8144:	e7e8      	b.n	8118 <init_mem_slab_module+0xc>
    8146:	bf00      	nop
    8148:	200003b4 	.word	0x200003b4
    814c:	200003b4 	.word	0x200003b4

00008150 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8150:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    8152:	460c      	mov	r4, r1
    8154:	4616      	mov	r6, r2
    8156:	461f      	mov	r7, r3
    8158:	f04f 0320 	mov.w	r3, #32
    815c:	f3ef 8111 	mrs	r1, BASEPRI
    8160:	f383 8811 	msr	BASEPRI, r3
    8164:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    8168:	6943      	ldr	r3, [r0, #20]
    816a:	b15b      	cbz	r3, 8184 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    816c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    816e:	681b      	ldr	r3, [r3, #0]
    8170:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8172:	6983      	ldr	r3, [r0, #24]
    8174:	3301      	adds	r3, #1
    8176:	6183      	str	r3, [r0, #24]
		result = 0;
    8178:	2000      	movs	r0, #0
	__asm__ volatile(
    817a:	f381 8811 	msr	BASEPRI, r1
    817e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    8182:	e011      	b.n	81a8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8184:	ea56 0207 	orrs.w	r2, r6, r7
    8188:	d103      	bne.n	8192 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    818a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    818c:	f06f 000b 	mvn.w	r0, #11
    8190:	e7f3      	b.n	817a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    8192:	4602      	mov	r2, r0
    8194:	e9cd 6700 	strd	r6, r7, [sp]
    8198:	4804      	ldr	r0, [pc, #16]	; (81ac <k_mem_slab_alloc+0x5c>)
    819a:	f000 fb9f 	bl	88dc <z_pend_curr>
		if (result == 0) {
    819e:	b918      	cbnz	r0, 81a8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    81a0:	4b03      	ldr	r3, [pc, #12]	; (81b0 <k_mem_slab_alloc+0x60>)
    81a2:	689b      	ldr	r3, [r3, #8]
    81a4:	695b      	ldr	r3, [r3, #20]
    81a6:	6023      	str	r3, [r4, #0]
}
    81a8:	b002      	add	sp, #8
    81aa:	bdd0      	pop	{r4, r6, r7, pc}
    81ac:	2000191d 	.word	0x2000191d
    81b0:	20001340 	.word	0x20001340

000081b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    81b4:	b570      	push	{r4, r5, r6, lr}
    81b6:	4604      	mov	r4, r0
    81b8:	460d      	mov	r5, r1
	__asm__ volatile(
    81ba:	f04f 0320 	mov.w	r3, #32
    81be:	f3ef 8611 	mrs	r6, BASEPRI
    81c2:	f383 8811 	msr	BASEPRI, r3
    81c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    81ca:	f002 ffa2 	bl	b112 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    81ce:	b158      	cbz	r0, 81e8 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    81d0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    81d2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    81d4:	2100      	movs	r1, #0
    81d6:	6701      	str	r1, [r0, #112]	; 0x70
		z_ready_thread(pending_thread);
    81d8:	f002 ff25 	bl	b026 <z_ready_thread>
		z_reschedule(&lock, key);
    81dc:	4631      	mov	r1, r6
    81de:	4809      	ldr	r0, [pc, #36]	; (8204 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    81e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    81e4:	f002 bed7 	b.w	af96 <z_reschedule>
		**(char ***)mem = slab->free_list;
    81e8:	682b      	ldr	r3, [r5, #0]
    81ea:	6962      	ldr	r2, [r4, #20]
    81ec:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    81ee:	682b      	ldr	r3, [r5, #0]
    81f0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    81f2:	69a3      	ldr	r3, [r4, #24]
    81f4:	3b01      	subs	r3, #1
    81f6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    81f8:	f386 8811 	msr	BASEPRI, r6
    81fc:	f3bf 8f6f 	isb	sy
}
    8200:	bd70      	pop	{r4, r5, r6, pc}
    8202:	bf00      	nop
    8204:	2000191d 	.word	0x2000191d

00008208 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8208:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    820c:	4604      	mov	r4, r0
    820e:	4616      	mov	r6, r2
    8210:	461f      	mov	r7, r3
	__asm__ volatile(
    8212:	f04f 0320 	mov.w	r3, #32
    8216:	f3ef 8811 	mrs	r8, BASEPRI
    821a:	f383 8811 	msr	BASEPRI, r3
    821e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8222:	68c3      	ldr	r3, [r0, #12]
    8224:	4a32      	ldr	r2, [pc, #200]	; (82f0 <z_impl_k_mutex_lock+0xe8>)
    8226:	b16b      	cbz	r3, 8244 <z_impl_k_mutex_lock+0x3c>
    8228:	6880      	ldr	r0, [r0, #8]
    822a:	6891      	ldr	r1, [r2, #8]
    822c:	4288      	cmp	r0, r1
    822e:	d019      	beq.n	8264 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8230:	ea56 0307 	orrs.w	r3, r6, r7
    8234:	d118      	bne.n	8268 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    8236:	f388 8811 	msr	BASEPRI, r8
    823a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    823e:	f06f 000f 	mvn.w	r0, #15
    8242:	e00c      	b.n	825e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    8244:	6891      	ldr	r1, [r2, #8]
    8246:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    824a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    824c:	3301      	adds	r3, #1
    824e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8250:	6893      	ldr	r3, [r2, #8]
    8252:	60a3      	str	r3, [r4, #8]
    8254:	f388 8811 	msr	BASEPRI, r8
    8258:	f3bf 8f6f 	isb	sy
		return 0;
    825c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    825e:	b002      	add	sp, #8
    8260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8264:	6921      	ldr	r1, [r4, #16]
    8266:	e7f0      	b.n	824a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8268:	f990 300e 	ldrsb.w	r3, [r0, #14]
    826c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8270:	4299      	cmp	r1, r3
    8272:	bfa8      	it	ge
    8274:	4619      	movge	r1, r3
    8276:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    827a:	428b      	cmp	r3, r1
    827c:	dd2c      	ble.n	82d8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    827e:	f000 fb41 	bl	8904 <z_set_prio>
    8282:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8284:	e9cd 6700 	strd	r6, r7, [sp]
    8288:	481a      	ldr	r0, [pc, #104]	; (82f4 <z_impl_k_mutex_lock+0xec>)
    828a:	4622      	mov	r2, r4
    828c:	4641      	mov	r1, r8
    828e:	f000 fb25 	bl	88dc <z_pend_curr>
	if (got_mutex == 0) {
    8292:	2800      	cmp	r0, #0
    8294:	d0e3      	beq.n	825e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    8296:	f04f 0320 	mov.w	r3, #32
    829a:	f3ef 8611 	mrs	r6, BASEPRI
    829e:	f383 8811 	msr	BASEPRI, r3
    82a2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    82a6:	6823      	ldr	r3, [r4, #0]
    82a8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82aa:	429c      	cmp	r4, r3
    82ac:	d007      	beq.n	82be <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    82ae:	b133      	cbz	r3, 82be <z_impl_k_mutex_lock+0xb6>
    82b0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    82b4:	4299      	cmp	r1, r3
    82b6:	bfa8      	it	ge
    82b8:	4619      	movge	r1, r3
    82ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    82be:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    82c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    82c4:	4299      	cmp	r1, r3
    82c6:	d109      	bne.n	82dc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    82c8:	b16d      	cbz	r5, 82e6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    82ca:	480a      	ldr	r0, [pc, #40]	; (82f4 <z_impl_k_mutex_lock+0xec>)
    82cc:	4631      	mov	r1, r6
    82ce:	f002 fe62 	bl	af96 <z_reschedule>
	return -EAGAIN;
    82d2:	f06f 000a 	mvn.w	r0, #10
    82d6:	e7c2      	b.n	825e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    82d8:	2500      	movs	r5, #0
    82da:	e7d3      	b.n	8284 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    82dc:	f000 fb12 	bl	8904 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    82e0:	2800      	cmp	r0, #0
    82e2:	d1f2      	bne.n	82ca <z_impl_k_mutex_lock+0xc2>
    82e4:	e7f0      	b.n	82c8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    82e6:	f386 8811 	msr	BASEPRI, r6
    82ea:	f3bf 8f6f 	isb	sy
    82ee:	e7f0      	b.n	82d2 <z_impl_k_mutex_lock+0xca>
    82f0:	20001340 	.word	0x20001340
    82f4:	2000191d 	.word	0x2000191d

000082f8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    82f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    82fa:	6883      	ldr	r3, [r0, #8]
{
    82fc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    82fe:	2b00      	cmp	r3, #0
    8300:	d036      	beq.n	8370 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8302:	4a1e      	ldr	r2, [pc, #120]	; (837c <z_impl_k_mutex_unlock+0x84>)
    8304:	6892      	ldr	r2, [r2, #8]
    8306:	4293      	cmp	r3, r2
    8308:	d135      	bne.n	8376 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    830a:	7bda      	ldrb	r2, [r3, #15]
    830c:	3a01      	subs	r2, #1
    830e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    8310:	68c3      	ldr	r3, [r0, #12]
    8312:	2b01      	cmp	r3, #1
    8314:	d005      	beq.n	8322 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8316:	3b01      	subs	r3, #1
    8318:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    831a:	f000 f8f7 	bl	850c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    831e:	2000      	movs	r0, #0
}
    8320:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8322:	f04f 0320 	mov.w	r3, #32
    8326:	f3ef 8511 	mrs	r5, BASEPRI
    832a:	f383 8811 	msr	BASEPRI, r3
    832e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8332:	6901      	ldr	r1, [r0, #16]
    8334:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    8336:	f990 300e 	ldrsb.w	r3, [r0, #14]
    833a:	4299      	cmp	r1, r3
    833c:	d001      	beq.n	8342 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    833e:	f000 fae1 	bl	8904 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8342:	4620      	mov	r0, r4
    8344:	f002 fee5 	bl	b112 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8348:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    834a:	b158      	cbz	r0, 8364 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    834c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8350:	6122      	str	r2, [r4, #16]
    8352:	2200      	movs	r2, #0
    8354:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    8356:	f002 fe66 	bl	b026 <z_ready_thread>
		z_reschedule(&lock, key);
    835a:	4809      	ldr	r0, [pc, #36]	; (8380 <z_impl_k_mutex_unlock+0x88>)
    835c:	4629      	mov	r1, r5
    835e:	f002 fe1a 	bl	af96 <z_reschedule>
    8362:	e7da      	b.n	831a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8364:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8366:	f385 8811 	msr	BASEPRI, r5
    836a:	f3bf 8f6f 	isb	sy
    836e:	e7d4      	b.n	831a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8370:	f06f 0015 	mvn.w	r0, #21
    8374:	e7d4      	b.n	8320 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    8376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    837a:	e7d1      	b.n	8320 <z_impl_k_mutex_unlock+0x28>
    837c:	20001340 	.word	0x20001340
    8380:	2000191d 	.word	0x2000191d

00008384 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8386:	4616      	mov	r6, r2
    8388:	461f      	mov	r7, r3
	__asm__ volatile(
    838a:	f04f 0320 	mov.w	r3, #32
    838e:	f3ef 8511 	mrs	r5, BASEPRI
    8392:	f383 8811 	msr	BASEPRI, r3
    8396:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    839a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    839c:	b19c      	cbz	r4, 83c6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    839e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    83a0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    83a2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    83a6:	4294      	cmp	r4, r2
	list->head = node;
    83a8:	6003      	str	r3, [r0, #0]
	list->tail = node;
    83aa:	bf08      	it	eq
    83ac:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    83ae:	2101      	movs	r1, #1
    83b0:	4620      	mov	r0, r4
    83b2:	f002 fd60 	bl	ae76 <z_queue_node_peek>
    83b6:	4604      	mov	r4, r0
	__asm__ volatile(
    83b8:	f385 8811 	msr	BASEPRI, r5
    83bc:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    83c0:	4620      	mov	r0, r4
    83c2:	b003      	add	sp, #12
    83c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    83c6:	ea56 0307 	orrs.w	r3, r6, r7
    83ca:	d0f5      	beq.n	83b8 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    83cc:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    83d0:	e9cd 6700 	strd	r6, r7, [sp]
    83d4:	4629      	mov	r1, r5
    83d6:	4610      	mov	r0, r2
    83d8:	f000 fa80 	bl	88dc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    83dc:	2800      	cmp	r0, #0
    83de:	d1ef      	bne.n	83c0 <z_impl_k_queue_get+0x3c>
    83e0:	4b01      	ldr	r3, [pc, #4]	; (83e8 <z_impl_k_queue_get+0x64>)
    83e2:	689b      	ldr	r3, [r3, #8]
    83e4:	695c      	ldr	r4, [r3, #20]
    83e6:	e7eb      	b.n	83c0 <z_impl_k_queue_get+0x3c>
    83e8:	20001340 	.word	0x20001340

000083ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    83ec:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    83ee:	4c08      	ldr	r4, [pc, #32]	; (8410 <z_reset_time_slice+0x24>)
    83f0:	6823      	ldr	r3, [r4, #0]
    83f2:	b15b      	cbz	r3, 840c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    83f4:	f7f9 fa62 	bl	18bc <z_clock_elapsed>
    83f8:	4603      	mov	r3, r0
    83fa:	6820      	ldr	r0, [r4, #0]
    83fc:	4a05      	ldr	r2, [pc, #20]	; (8414 <z_reset_time_slice+0x28>)
    83fe:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    8400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    8404:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    8406:	2100      	movs	r1, #0
    8408:	f002 bf03 	b.w	b212 <z_set_timeout_expiry>
}
    840c:	bd10      	pop	{r4, pc}
    840e:	bf00      	nop
    8410:	20001378 	.word	0x20001378
    8414:	20001340 	.word	0x20001340

00008418 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    8418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    841a:	4605      	mov	r5, r0
    841c:	460c      	mov	r4, r1
	__asm__ volatile(
    841e:	f04f 0320 	mov.w	r3, #32
    8422:	f3ef 8611 	mrs	r6, BASEPRI
    8426:	f383 8811 	msr	BASEPRI, r3
    842a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    842e:	4b0d      	ldr	r3, [pc, #52]	; (8464 <k_sched_time_slice_set+0x4c>)
    8430:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    8432:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    8436:	f240 30e7 	movw	r0, #999	; 0x3e7
    843a:	2100      	movs	r1, #0
    843c:	611a      	str	r2, [r3, #16]
    843e:	fbe7 0105 	umlal	r0, r1, r7, r5
    8442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8446:	2300      	movs	r3, #0
    8448:	f7f7 fe5a 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    844c:	4b06      	ldr	r3, [pc, #24]	; (8468 <k_sched_time_slice_set+0x50>)
    844e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    8450:	4b06      	ldr	r3, [pc, #24]	; (846c <k_sched_time_slice_set+0x54>)
    8452:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    8454:	f7ff ffca 	bl	83ec <z_reset_time_slice>
	__asm__ volatile(
    8458:	f386 8811 	msr	BASEPRI, r6
    845c:	f3bf 8f6f 	isb	sy
	}
}
    8460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8462:	bf00      	nop
    8464:	20001340 	.word	0x20001340
    8468:	20001378 	.word	0x20001378
    846c:	20001374 	.word	0x20001374

00008470 <k_sched_lock>:
	__asm__ volatile(
    8470:	f04f 0320 	mov.w	r3, #32
    8474:	f3ef 8111 	mrs	r1, BASEPRI
    8478:	f383 8811 	msr	BASEPRI, r3
    847c:	f3bf 8f6f 	isb	sy
    8480:	4b04      	ldr	r3, [pc, #16]	; (8494 <k_sched_lock+0x24>)
    8482:	689a      	ldr	r2, [r3, #8]
    8484:	7bd3      	ldrb	r3, [r2, #15]
    8486:	3b01      	subs	r3, #1
    8488:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    848a:	f381 8811 	msr	BASEPRI, r1
    848e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    8492:	4770      	bx	lr
    8494:	20001340 	.word	0x20001340

00008498 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    8498:	4b09      	ldr	r3, [pc, #36]	; (84c0 <z_priq_dumb_remove+0x28>)
    849a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    849e:	4282      	cmp	r2, r0
    84a0:	d105      	bne.n	84ae <z_priq_dumb_remove+0x16>
    84a2:	689b      	ldr	r3, [r3, #8]
    84a4:	428b      	cmp	r3, r1
    84a6:	d102      	bne.n	84ae <z_priq_dumb_remove+0x16>
    84a8:	7b4b      	ldrb	r3, [r1, #13]
    84aa:	06db      	lsls	r3, r3, #27
    84ac:	d106      	bne.n	84bc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    84ae:	e9d1 3200 	ldrd	r3, r2, [r1]
    84b2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    84b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    84b6:	2300      	movs	r3, #0
	node->prev = NULL;
    84b8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    84bc:	4770      	bx	lr
    84be:	bf00      	nop
    84c0:	20001340 	.word	0x20001340

000084c4 <update_cache>:
{
    84c4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    84c6:	4c10      	ldr	r4, [pc, #64]	; (8508 <update_cache+0x44>)
{
    84c8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    84ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
    84ce:	f002 fda0 	bl	b012 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    84d2:	68a3      	ldr	r3, [r4, #8]
    84d4:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    84d6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    84d8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    84da:	bf44      	itt	mi
    84dc:	f041 0108 	orrmi.w	r1, r1, #8
    84e0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    84e2:	b905      	cbnz	r5, 84e6 <update_cache+0x22>
    84e4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    84e6:	b94e      	cbnz	r6, 84fc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    84e8:	7b5a      	ldrb	r2, [r3, #13]
    84ea:	06d2      	lsls	r2, r2, #27
    84ec:	d106      	bne.n	84fc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    84ee:	69aa      	ldr	r2, [r5, #24]
    84f0:	b922      	cbnz	r2, 84fc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    84f2:	89da      	ldrh	r2, [r3, #14]
    84f4:	2a7f      	cmp	r2, #127	; 0x7f
    84f6:	d901      	bls.n	84fc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    84f8:	6263      	str	r3, [r4, #36]	; 0x24
}
    84fa:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    84fc:	42ab      	cmp	r3, r5
    84fe:	d001      	beq.n	8504 <update_cache+0x40>
			z_reset_time_slice();
    8500:	f7ff ff74 	bl	83ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8504:	6265      	str	r5, [r4, #36]	; 0x24
}
    8506:	e7f8      	b.n	84fa <update_cache+0x36>
    8508:	20001340 	.word	0x20001340

0000850c <k_sched_unlock>:
{
    850c:	b510      	push	{r4, lr}
	__asm__ volatile(
    850e:	f04f 0320 	mov.w	r3, #32
    8512:	f3ef 8411 	mrs	r4, BASEPRI
    8516:	f383 8811 	msr	BASEPRI, r3
    851a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    851e:	4b08      	ldr	r3, [pc, #32]	; (8540 <k_sched_unlock+0x34>)
    8520:	689a      	ldr	r2, [r3, #8]
    8522:	7bd3      	ldrb	r3, [r2, #15]
    8524:	3301      	adds	r3, #1
    8526:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8528:	2000      	movs	r0, #0
    852a:	f7ff ffcb 	bl	84c4 <update_cache>
	__asm__ volatile(
    852e:	f384 8811 	msr	BASEPRI, r4
    8532:	f3bf 8f6f 	isb	sy
}
    8536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    853a:	f002 bd43 	b.w	afc4 <z_reschedule_unlocked>
    853e:	bf00      	nop
    8540:	20001340 	.word	0x20001340

00008544 <ready_thread>:
{
    8544:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    8546:	7b43      	ldrb	r3, [r0, #13]
    8548:	06db      	lsls	r3, r3, #27
    854a:	d12a      	bne.n	85a2 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    854c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    854e:	bb43      	cbnz	r3, 85a2 <ready_thread+0x5e>
	return list->head == list;
    8550:	4a15      	ldr	r2, [pc, #84]	; (85a8 <ready_thread+0x64>)
    8552:	4611      	mov	r1, r2
    8554:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8558:	428c      	cmp	r4, r1
    855a:	bf18      	it	ne
    855c:	4623      	movne	r3, r4
    855e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8560:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    8562:	bf38      	it	cc
    8564:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8566:	b1b3      	cbz	r3, 8596 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    8568:	f990 600e 	ldrsb.w	r6, [r0, #14]
    856c:	f993 500e 	ldrsb.w	r5, [r3, #14]
    8570:	42ae      	cmp	r6, r5
    8572:	db03      	blt.n	857c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    8574:	42a3      	cmp	r3, r4
    8576:	d00e      	beq.n	8596 <ready_thread+0x52>
    8578:	681b      	ldr	r3, [r3, #0]
    857a:	e7f4      	b.n	8566 <ready_thread+0x22>
	node->prev = successor->prev;
    857c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    857e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    8582:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8584:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    8586:	7b43      	ldrb	r3, [r0, #13]
    8588:	f063 037f 	orn	r3, r3, #127	; 0x7f
    858c:	7343      	strb	r3, [r0, #13]
}
    858e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8590:	2000      	movs	r0, #0
    8592:	f7ff bf97 	b.w	84c4 <update_cache>
	node->prev = list->tail;
    8596:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    859a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    859c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    859e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    85a0:	e7f1      	b.n	8586 <ready_thread+0x42>
}
    85a2:	bc70      	pop	{r4, r5, r6}
    85a4:	4770      	bx	lr
    85a6:	bf00      	nop
    85a8:	20001340 	.word	0x20001340

000085ac <z_sched_start>:
{
    85ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    85ae:	f04f 0220 	mov.w	r2, #32
    85b2:	f3ef 8411 	mrs	r4, BASEPRI
    85b6:	f382 8811 	msr	BASEPRI, r2
    85ba:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    85be:	7b42      	ldrb	r2, [r0, #13]
    85c0:	0751      	lsls	r1, r2, #29
    85c2:	d404      	bmi.n	85ce <z_sched_start+0x22>
	__asm__ volatile(
    85c4:	f384 8811 	msr	BASEPRI, r4
    85c8:	f3bf 8f6f 	isb	sy
}
    85cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    85ce:	f022 0204 	bic.w	r2, r2, #4
    85d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    85d4:	f7ff ffb6 	bl	8544 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    85d8:	4621      	mov	r1, r4
    85da:	4802      	ldr	r0, [pc, #8]	; (85e4 <z_sched_start+0x38>)
}
    85dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    85e0:	f002 bcd9 	b.w	af96 <z_reschedule>
    85e4:	2000191d 	.word	0x2000191d

000085e8 <z_move_thread_to_end_of_prio_q>:
{
    85e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85ea:	4601      	mov	r1, r0
	__asm__ volatile(
    85ec:	f04f 0320 	mov.w	r3, #32
    85f0:	f3ef 8411 	mrs	r4, BASEPRI
    85f4:	f383 8811 	msr	BASEPRI, r3
    85f8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    85fc:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8600:	2b00      	cmp	r3, #0
    8602:	da02      	bge.n	860a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    8604:	4819      	ldr	r0, [pc, #100]	; (866c <z_move_thread_to_end_of_prio_q+0x84>)
    8606:	f7ff ff47 	bl	8498 <z_priq_dumb_remove>
	return list->head == list;
    860a:	4a19      	ldr	r2, [pc, #100]	; (8670 <z_move_thread_to_end_of_prio_q+0x88>)
    860c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    860e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    8610:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8614:	4283      	cmp	r3, r0
    8616:	bf08      	it	eq
    8618:	2300      	moveq	r3, #0
    861a:	2b00      	cmp	r3, #0
    861c:	bf38      	it	cc
    861e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8620:	b1eb      	cbz	r3, 865e <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    8622:	f991 700e 	ldrsb.w	r7, [r1, #14]
    8626:	f993 600e 	ldrsb.w	r6, [r3, #14]
    862a:	42b7      	cmp	r7, r6
    862c:	db03      	blt.n	8636 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    862e:	429d      	cmp	r5, r3
    8630:	d015      	beq.n	865e <z_move_thread_to_end_of_prio_q+0x76>
    8632:	681b      	ldr	r3, [r3, #0]
    8634:	e7f4      	b.n	8620 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    8636:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    8638:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    863c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    863e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    8640:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    8642:	6890      	ldr	r0, [r2, #8]
    8644:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8648:	734b      	strb	r3, [r1, #13]
    864a:	1a43      	subs	r3, r0, r1
    864c:	4258      	negs	r0, r3
    864e:	4158      	adcs	r0, r3
    8650:	f7ff ff38 	bl	84c4 <update_cache>
	__asm__ volatile(
    8654:	f384 8811 	msr	BASEPRI, r4
    8658:	f3bf 8f6f 	isb	sy
}
    865c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    865e:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    8662:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8664:	6019      	str	r1, [r3, #0]
	list->tail = node;
    8666:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    8668:	e7ea      	b.n	8640 <z_move_thread_to_end_of_prio_q+0x58>
    866a:	bf00      	nop
    866c:	20001368 	.word	0x20001368
    8670:	20001340 	.word	0x20001340

00008674 <z_time_slice>:
{
    8674:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    8676:	4a15      	ldr	r2, [pc, #84]	; (86cc <z_time_slice+0x58>)
    8678:	4b15      	ldr	r3, [pc, #84]	; (86d0 <z_time_slice+0x5c>)
    867a:	6814      	ldr	r4, [r2, #0]
{
    867c:	4601      	mov	r1, r0
	if (pending_current == _current) {
    867e:	6898      	ldr	r0, [r3, #8]
    8680:	42a0      	cmp	r0, r4
    8682:	461c      	mov	r4, r3
    8684:	d103      	bne.n	868e <z_time_slice+0x1a>
}
    8686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    868a:	f7ff beaf 	b.w	83ec <z_reset_time_slice>
	pending_current = NULL;
    868e:	2500      	movs	r5, #0
    8690:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8692:	4a10      	ldr	r2, [pc, #64]	; (86d4 <z_time_slice+0x60>)
    8694:	6812      	ldr	r2, [r2, #0]
    8696:	b1b2      	cbz	r2, 86c6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    8698:	89c2      	ldrh	r2, [r0, #14]
    869a:	2a7f      	cmp	r2, #127	; 0x7f
    869c:	d813      	bhi.n	86c6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    869e:	4a0e      	ldr	r2, [pc, #56]	; (86d8 <z_time_slice+0x64>)
    86a0:	f990 500e 	ldrsb.w	r5, [r0, #14]
    86a4:	6812      	ldr	r2, [r2, #0]
    86a6:	4295      	cmp	r5, r2
    86a8:	db0d      	blt.n	86c6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    86aa:	4a0c      	ldr	r2, [pc, #48]	; (86dc <z_time_slice+0x68>)
    86ac:	4290      	cmp	r0, r2
    86ae:	d00a      	beq.n	86c6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    86b0:	6982      	ldr	r2, [r0, #24]
    86b2:	b942      	cbnz	r2, 86c6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    86b4:	691a      	ldr	r2, [r3, #16]
    86b6:	428a      	cmp	r2, r1
    86b8:	dc02      	bgt.n	86c0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    86ba:	f7ff ff95 	bl	85e8 <z_move_thread_to_end_of_prio_q>
    86be:	e7e2      	b.n	8686 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    86c0:	1a52      	subs	r2, r2, r1
    86c2:	611a      	str	r2, [r3, #16]
}
    86c4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    86c6:	2300      	movs	r3, #0
    86c8:	6123      	str	r3, [r4, #16]
    86ca:	e7fb      	b.n	86c4 <z_time_slice+0x50>
    86cc:	20001370 	.word	0x20001370
    86d0:	20001340 	.word	0x20001340
    86d4:	20001378 	.word	0x20001378
    86d8:	20001374 	.word	0x20001374
    86dc:	20001258 	.word	0x20001258

000086e0 <z_impl_k_thread_suspend>:
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    86e4:	3018      	adds	r0, #24
    86e6:	f002 fd6e 	bl	b1c6 <z_abort_timeout>
	__asm__ volatile(
    86ea:	f04f 0320 	mov.w	r3, #32
    86ee:	f3ef 8611 	mrs	r6, BASEPRI
    86f2:	f383 8811 	msr	BASEPRI, r3
    86f6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    86fa:	f994 300d 	ldrsb.w	r3, [r4, #13]
    86fe:	2b00      	cmp	r3, #0
    8700:	da07      	bge.n	8712 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    8702:	480f      	ldr	r0, [pc, #60]	; (8740 <z_impl_k_thread_suspend+0x60>)
    8704:	4621      	mov	r1, r4
    8706:	f7ff fec7 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    870a:	7b63      	ldrb	r3, [r4, #13]
    870c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8710:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    8712:	4d0c      	ldr	r5, [pc, #48]	; (8744 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8714:	7b63      	ldrb	r3, [r4, #13]
    8716:	68a8      	ldr	r0, [r5, #8]
    8718:	f043 0310 	orr.w	r3, r3, #16
    871c:	7363      	strb	r3, [r4, #13]
    871e:	1b03      	subs	r3, r0, r4
    8720:	4258      	negs	r0, r3
    8722:	4158      	adcs	r0, r3
    8724:	f7ff fece 	bl	84c4 <update_cache>
	__asm__ volatile(
    8728:	f386 8811 	msr	BASEPRI, r6
    872c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8730:	68ab      	ldr	r3, [r5, #8]
    8732:	42a3      	cmp	r3, r4
    8734:	d103      	bne.n	873e <z_impl_k_thread_suspend+0x5e>
}
    8736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    873a:	f002 bc43 	b.w	afc4 <z_reschedule_unlocked>
}
    873e:	bd70      	pop	{r4, r5, r6, pc}
    8740:	20001368 	.word	0x20001368
    8744:	20001340 	.word	0x20001340

00008748 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    8748:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    874e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    8750:	b103      	cbz	r3, 8754 <z_thread_single_abort+0xc>
		thread->fn_abort();
    8752:	4798      	blx	r3
    8754:	f104 0018 	add.w	r0, r4, #24
    8758:	f002 fd35 	bl	b1c6 <z_abort_timeout>
	__asm__ volatile(
    875c:	f04f 0320 	mov.w	r3, #32
    8760:	f3ef 8611 	mrs	r6, BASEPRI
    8764:	f383 8811 	msr	BASEPRI, r3
    8768:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    876c:	7b63      	ldrb	r3, [r4, #13]
    876e:	06d8      	lsls	r0, r3, #27
    8770:	d123      	bne.n	87ba <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    8772:	69a2      	ldr	r2, [r4, #24]
    8774:	bb0a      	cbnz	r2, 87ba <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    8776:	0619      	lsls	r1, r3, #24
    8778:	d507      	bpl.n	878a <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    877a:	481f      	ldr	r0, [pc, #124]	; (87f8 <z_thread_single_abort+0xb0>)
    877c:	4621      	mov	r1, r4
    877e:	f7ff fe8b 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    8782:	7b63      	ldrb	r3, [r4, #13]
    8784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8788:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    878a:	4b1c      	ldr	r3, [pc, #112]	; (87fc <z_thread_single_abort+0xb4>)
    878c:	6898      	ldr	r0, [r3, #8]
    878e:	1b02      	subs	r2, r0, r4
    8790:	4250      	negs	r0, r2
    8792:	4150      	adcs	r0, r2
    8794:	f7ff fe96 	bl	84c4 <update_cache>
		thread->base.thread_state |= mask;
    8798:	7b63      	ldrb	r3, [r4, #13]
    879a:	f043 0308 	orr.w	r3, r3, #8
    879e:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    87a0:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
    87a4:	2700      	movs	r7, #0
	return list->head == list;
    87a6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87a8:	4545      	cmp	r5, r8
    87aa:	d000      	beq.n	87ae <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    87ac:	b995      	cbnz	r5, 87d4 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    87ae:	f386 8811 	msr	BASEPRI, r6
    87b2:	f3bf 8f6f 	isb	sy
}
    87b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    87ba:	079b      	lsls	r3, r3, #30
    87bc:	d5ec      	bpl.n	8798 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    87be:	68a0      	ldr	r0, [r4, #8]
    87c0:	4621      	mov	r1, r4
    87c2:	f7ff fe69 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    87c6:	7b63      	ldrb	r3, [r4, #13]
    87c8:	f023 0302 	bic.w	r3, r3, #2
    87cc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    87ce:	2300      	movs	r3, #0
    87d0:	60a3      	str	r3, [r4, #8]
    87d2:	e7e1      	b.n	8798 <z_thread_single_abort+0x50>
    87d4:	f105 0018 	add.w	r0, r5, #24
    87d8:	f002 fcf5 	bl	b1c6 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    87dc:	68a8      	ldr	r0, [r5, #8]
    87de:	4629      	mov	r1, r5
    87e0:	f7ff fe5a 	bl	8498 <z_priq_dumb_remove>
    87e4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    87e6:	60af      	str	r7, [r5, #8]
    87e8:	f023 0302 	bic.w	r3, r3, #2
    87ec:	736b      	strb	r3, [r5, #13]
    87ee:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    87f0:	4628      	mov	r0, r5
    87f2:	f7ff fea7 	bl	8544 <ready_thread>
    87f6:	e7d6      	b.n	87a6 <z_thread_single_abort+0x5e>
    87f8:	20001368 	.word	0x20001368
    87fc:	20001340 	.word	0x20001340

00008800 <unready_thread>:
{
    8800:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    8802:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8806:	2b00      	cmp	r3, #0
{
    8808:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    880a:	da06      	bge.n	881a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    880c:	4807      	ldr	r0, [pc, #28]	; (882c <unready_thread+0x2c>)
    880e:	f7ff fe43 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    8812:	7b4b      	ldrb	r3, [r1, #13]
    8814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8818:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    881a:	4b05      	ldr	r3, [pc, #20]	; (8830 <unready_thread+0x30>)
    881c:	6898      	ldr	r0, [r3, #8]
    881e:	1a43      	subs	r3, r0, r1
    8820:	4258      	negs	r0, r3
    8822:	4158      	adcs	r0, r3
}
    8824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8828:	f7ff be4c 	b.w	84c4 <update_cache>
    882c:	20001368 	.word	0x20001368
    8830:	20001340 	.word	0x20001340

00008834 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    8834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8836:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    8838:	f002 fd05 	bl	b246 <z_tick_get_32>
    883c:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    883e:	f04f 0320 	mov.w	r3, #32
    8842:	f3ef 8711 	mrs	r7, BASEPRI
    8846:	f383 8811 	msr	BASEPRI, r3
    884a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    884e:	4e0d      	ldr	r6, [pc, #52]	; (8884 <z_tick_sleep.part.0+0x50>)
    8850:	4b0d      	ldr	r3, [pc, #52]	; (8888 <z_tick_sleep.part.0+0x54>)
    8852:	68b0      	ldr	r0, [r6, #8]
    8854:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    8856:	f002 fc21 	bl	b09c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    885a:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    885c:	490b      	ldr	r1, [pc, #44]	; (888c <z_tick_sleep.part.0+0x58>)
    885e:	462a      	mov	r2, r5
    8860:	17eb      	asrs	r3, r5, #31
    8862:	3018      	adds	r0, #24
    8864:	f000 fa8e 	bl	8d84 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8868:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    886a:	7b53      	ldrb	r3, [r2, #13]
    886c:	f043 0310 	orr.w	r3, r3, #16
    8870:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
    8872:	4638      	mov	r0, r7
    8874:	f7f9 f8dc 	bl	1a30 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    8878:	f002 fce5 	bl	b246 <z_tick_get_32>
    887c:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    887e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    8882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8884:	20001340 	.word	0x20001340
    8888:	20001370 	.word	0x20001370
    888c:	0000b047 	.word	0x0000b047

00008890 <pend>:
{
    8890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8894:	4606      	mov	r6, r0
    8896:	4614      	mov	r4, r2
    8898:	461d      	mov	r5, r3
    889a:	f04f 0320 	mov.w	r3, #32
    889e:	f3ef 8711 	mrs	r7, BASEPRI
    88a2:	f383 8811 	msr	BASEPRI, r3
    88a6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    88aa:	f002 fc07 	bl	b0bc <add_to_waitq_locked>
	__asm__ volatile(
    88ae:	f387 8811 	msr	BASEPRI, r7
    88b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    88b6:	1c6b      	adds	r3, r5, #1
    88b8:	bf08      	it	eq
    88ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    88be:	d008      	beq.n	88d2 <pend+0x42>
    88c0:	4622      	mov	r2, r4
    88c2:	462b      	mov	r3, r5
    88c4:	f106 0018 	add.w	r0, r6, #24
    88c8:	4903      	ldr	r1, [pc, #12]	; (88d8 <pend+0x48>)
}
    88ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    88ce:	f000 ba59 	b.w	8d84 <z_add_timeout>
    88d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88d6:	bf00      	nop
    88d8:	0000b047 	.word	0x0000b047

000088dc <z_pend_curr>:
{
    88dc:	b510      	push	{r4, lr}
	pending_current = _current;
    88de:	4b07      	ldr	r3, [pc, #28]	; (88fc <z_pend_curr+0x20>)
    88e0:	6898      	ldr	r0, [r3, #8]
    88e2:	4b07      	ldr	r3, [pc, #28]	; (8900 <z_pend_curr+0x24>)
{
    88e4:	460c      	mov	r4, r1
	pending_current = _current;
    88e6:	6018      	str	r0, [r3, #0]
{
    88e8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    88ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    88ee:	f7ff ffcf 	bl	8890 <pend>
    88f2:	4620      	mov	r0, r4
}
    88f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    88f8:	f7f9 b89a 	b.w	1a30 <arch_swap>
    88fc:	20001340 	.word	0x20001340
    8900:	20001370 	.word	0x20001370

00008904 <z_set_prio>:
{
    8904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8908:	4604      	mov	r4, r0
	__asm__ volatile(
    890a:	f04f 0320 	mov.w	r3, #32
    890e:	f3ef 8811 	mrs	r8, BASEPRI
    8912:	f383 8811 	msr	BASEPRI, r3
    8916:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    891a:	7b43      	ldrb	r3, [r0, #13]
    891c:	06db      	lsls	r3, r3, #27
    891e:	b24e      	sxtb	r6, r1
    8920:	d12e      	bne.n	8980 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    8922:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    8924:	bb65      	cbnz	r5, 8980 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    8926:	4f18      	ldr	r7, [pc, #96]	; (8988 <z_set_prio+0x84>)
    8928:	4621      	mov	r1, r4
    892a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    892e:	f7ff fdb3 	bl	8498 <z_priq_dumb_remove>
	return list->head == list;
    8932:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
    8936:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8938:	4283      	cmp	r3, r0
    893a:	bf18      	it	ne
    893c:	461d      	movne	r5, r3
    893e:	2d00      	cmp	r5, #0
    8940:	bf38      	it	cc
    8942:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8944:	b1b5      	cbz	r5, 8974 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    8946:	f995 100e 	ldrsb.w	r1, [r5, #14]
    894a:	42b1      	cmp	r1, r6
    894c:	dc03      	bgt.n	8956 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    894e:	42aa      	cmp	r2, r5
    8950:	d010      	beq.n	8974 <z_set_prio+0x70>
    8952:	682d      	ldr	r5, [r5, #0]
    8954:	e7f6      	b.n	8944 <z_set_prio+0x40>
	node->prev = successor->prev;
    8956:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    8958:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    895c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    895e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8960:	2001      	movs	r0, #1
    8962:	f7ff fdaf 	bl	84c4 <update_cache>
    8966:	2001      	movs	r0, #1
	__asm__ volatile(
    8968:	f388 8811 	msr	BASEPRI, r8
    896c:	f3bf 8f6f 	isb	sy
}
    8970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    8974:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    8978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    897a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    897c:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    897e:	e7ef      	b.n	8960 <z_set_prio+0x5c>
			thread->base.prio = prio;
    8980:	73a6      	strb	r6, [r4, #14]
    8982:	2000      	movs	r0, #0
    8984:	e7f0      	b.n	8968 <z_set_prio+0x64>
    8986:	bf00      	nop
    8988:	20001340 	.word	0x20001340

0000898c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    898c:	4b04      	ldr	r3, [pc, #16]	; (89a0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    898e:	2100      	movs	r1, #0
    8990:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    8994:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    8998:	4608      	mov	r0, r1
    899a:	f7ff bd3d 	b.w	8418 <k_sched_time_slice_set>
    899e:	bf00      	nop
    89a0:	20001340 	.word	0x20001340

000089a4 <z_impl_k_yield>:
{
    89a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    89a6:	4c24      	ldr	r4, [pc, #144]	; (8a38 <z_impl_k_yield+0x94>)
    89a8:	4b24      	ldr	r3, [pc, #144]	; (8a3c <z_impl_k_yield+0x98>)
    89aa:	68a2      	ldr	r2, [r4, #8]
    89ac:	429a      	cmp	r2, r3
    89ae:	d030      	beq.n	8a12 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    89b0:	f04f 0320 	mov.w	r3, #32
    89b4:	f3ef 8511 	mrs	r5, BASEPRI
    89b8:	f383 8811 	msr	BASEPRI, r3
    89bc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    89c0:	68a1      	ldr	r1, [r4, #8]
    89c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    89c6:	f7ff fd67 	bl	8498 <z_priq_dumb_remove>
	return list->head == list;
    89ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    89cc:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    89ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89d0:	4283      	cmp	r3, r0
    89d2:	bf08      	it	eq
    89d4:	2300      	moveq	r3, #0
    89d6:	2b00      	cmp	r3, #0
    89d8:	bf38      	it	cc
    89da:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89dc:	b32b      	cbz	r3, 8a2a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    89de:	f992 700e 	ldrsb.w	r7, [r2, #14]
    89e2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    89e6:	42b7      	cmp	r7, r6
    89e8:	db03      	blt.n	89f2 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    89ea:	428b      	cmp	r3, r1
    89ec:	d01d      	beq.n	8a2a <z_impl_k_yield+0x86>
    89ee:	681b      	ldr	r3, [r3, #0]
    89f0:	e7f4      	b.n	89dc <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    89f2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    89f4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    89f8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    89fa:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    89fc:	7b53      	ldrb	r3, [r2, #13]
    89fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a02:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    8a04:	2001      	movs	r0, #1
    8a06:	f7ff fd5d 	bl	84c4 <update_cache>
	__asm__ volatile(
    8a0a:	f385 8811 	msr	BASEPRI, r5
    8a0e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    8a12:	f04f 0320 	mov.w	r3, #32
    8a16:	f3ef 8011 	mrs	r0, BASEPRI
    8a1a:	f383 8811 	msr	BASEPRI, r3
    8a1e:	f3bf 8f6f 	isb	sy
}
    8a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a26:	f7f9 b803 	b.w	1a30 <arch_swap>
	node->prev = list->tail;
    8a2a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    8a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8a30:	601a      	str	r2, [r3, #0]
	list->tail = node;
    8a32:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    8a34:	e7e2      	b.n	89fc <z_impl_k_yield+0x58>
    8a36:	bf00      	nop
    8a38:	20001340 	.word	0x20001340
    8a3c:	20001258 	.word	0x20001258

00008a40 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8a40:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a42:	3301      	adds	r3, #1
    8a44:	bf08      	it	eq
    8a46:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8a4a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a4c:	d106      	bne.n	8a5c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8a4e:	4b0b      	ldr	r3, [pc, #44]	; (8a7c <z_impl_k_sleep+0x3c>)
    8a50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8a52:	f7ff fe45 	bl	86e0 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    8a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    8a5a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    8a5c:	4604      	mov	r4, r0
	if (ticks == 0) {
    8a5e:	b948      	cbnz	r0, 8a74 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    8a60:	f7ff ffa0 	bl	89a4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    8a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8a68:	fb84 3400 	smull	r3, r4, r4, r0
    8a6c:	0bd8      	lsrs	r0, r3, #15
    8a6e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    8a72:	e7f2      	b.n	8a5a <z_impl_k_sleep+0x1a>
    8a74:	f7ff fede 	bl	8834 <z_tick_sleep.part.0>
    8a78:	4604      	mov	r4, r0
    8a7a:	e7f3      	b.n	8a64 <z_impl_k_sleep+0x24>
    8a7c:	20001340 	.word	0x20001340

00008a80 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8a80:	4b01      	ldr	r3, [pc, #4]	; (8a88 <z_impl_k_current_get+0x8>)
    8a82:	6898      	ldr	r0, [r3, #8]
    8a84:	4770      	bx	lr
    8a86:	bf00      	nop
    8a88:	20001340 	.word	0x20001340

00008a8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8a8c:	b538      	push	{r3, r4, r5, lr}
    8a8e:	4604      	mov	r4, r0
    8a90:	f04f 0320 	mov.w	r3, #32
    8a94:	f3ef 8511 	mrs	r5, BASEPRI
    8a98:	f383 8811 	msr	BASEPRI, r3
    8a9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    8aa0:	f002 fb37 	bl	b112 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    8aa4:	b148      	cbz	r0, 8aba <z_impl_k_sem_give+0x2e>
    8aa6:	2200      	movs	r2, #0
    8aa8:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8aaa:	f002 fabc 	bl	b026 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    8aae:	4629      	mov	r1, r5
    8ab0:	4808      	ldr	r0, [pc, #32]	; (8ad4 <z_impl_k_sem_give+0x48>)
}
    8ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8ab6:	f002 ba6e 	b.w	af96 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8aba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8abe:	429a      	cmp	r2, r3
    8ac0:	bf18      	it	ne
    8ac2:	3301      	addne	r3, #1
    8ac4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    8ac6:	2102      	movs	r1, #2
    8ac8:	f104 0010 	add.w	r0, r4, #16
    8acc:	f002 fd10 	bl	b4f0 <z_handle_obj_poll_events>
}
    8ad0:	e7ed      	b.n	8aae <z_impl_k_sem_give+0x22>
    8ad2:	bf00      	nop
    8ad4:	2000191d 	.word	0x2000191d

00008ad8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8ada:	4614      	mov	r4, r2
    8adc:	461d      	mov	r5, r3
    8ade:	f04f 0320 	mov.w	r3, #32
    8ae2:	f3ef 8111 	mrs	r1, BASEPRI
    8ae6:	f383 8811 	msr	BASEPRI, r3
    8aea:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    8aee:	6883      	ldr	r3, [r0, #8]
    8af0:	b143      	cbz	r3, 8b04 <z_impl_k_sem_take+0x2c>
		sem->count--;
    8af2:	3b01      	subs	r3, #1
    8af4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    8af6:	f381 8811 	msr	BASEPRI, r1
    8afa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8afe:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    8b00:	b003      	add	sp, #12
    8b02:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8b04:	ea54 0305 	orrs.w	r3, r4, r5
    8b08:	d106      	bne.n	8b18 <z_impl_k_sem_take+0x40>
    8b0a:	f381 8811 	msr	BASEPRI, r1
    8b0e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8b12:	f06f 000f 	mvn.w	r0, #15
    8b16:	e7f3      	b.n	8b00 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8b18:	4602      	mov	r2, r0
    8b1a:	e9cd 4500 	strd	r4, r5, [sp]
    8b1e:	4802      	ldr	r0, [pc, #8]	; (8b28 <z_impl_k_sem_take+0x50>)
    8b20:	f7ff fedc 	bl	88dc <z_pend_curr>
	return ret;
    8b24:	e7ec      	b.n	8b00 <z_impl_k_sem_take+0x28>
    8b26:	bf00      	nop
    8b28:	2000191d 	.word	0x2000191d

00008b2c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    8b2c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    8b2e:	4c08      	ldr	r4, [pc, #32]	; (8b50 <k_sys_work_q_init+0x24>)
    8b30:	4908      	ldr	r1, [pc, #32]	; (8b54 <k_sys_work_q_init+0x28>)
    8b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8b3a:	4620      	mov	r0, r4
    8b3c:	f000 f8c2 	bl	8cc4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    8b40:	4905      	ldr	r1, [pc, #20]	; (8b58 <k_sys_work_q_init+0x2c>)
    8b42:	f104 0018 	add.w	r0, r4, #24
    8b46:	f002 fb39 	bl	b1bc <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    8b4a:	2000      	movs	r0, #0
    8b4c:	bd10      	pop	{r4, pc}
    8b4e:	bf00      	nop
    8b50:	2000137c 	.word	0x2000137c
    8b54:	200031a0 	.word	0x200031a0
    8b58:	0000d29f 	.word	0x0000d29f

00008b5c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    8b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b5e:	b087      	sub	sp, #28
    8b60:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
    8b64:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8b68:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    8b6c:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8b6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8b70:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    8b72:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
    8b76:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8b78:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
    8b7a:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8b7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
    8b7e:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
    8b80:	2500      	movs	r5, #0
	node->prev = NULL;
    8b82:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
    8b86:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
    8b88:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8b8a:	9600      	str	r6, [sp, #0]
{
    8b8c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8b8e:	f7f8 fff5 	bl	1b7c <arch_new_thread>
	if (!_current) {
    8b92:	4b04      	ldr	r3, [pc, #16]	; (8ba4 <z_setup_new_thread+0x48>)
    8b94:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    8b96:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    8b9a:	b103      	cbz	r3, 8b9e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    8b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    8b9e:	66a3      	str	r3, [r4, #104]	; 0x68
}
    8ba0:	b007      	add	sp, #28
    8ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ba4:	20001340 	.word	0x20001340

00008ba8 <z_impl_k_thread_create>:
{
    8ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8baa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bac:	2500      	movs	r5, #0
    8bae:	9505      	str	r5, [sp, #20]
    8bb0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8bb2:	9504      	str	r5, [sp, #16]
    8bb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8bb6:	9503      	str	r5, [sp, #12]
    8bb8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8bba:	9502      	str	r5, [sp, #8]
{
    8bbc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8bc2:	9501      	str	r5, [sp, #4]
    8bc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8bc6:	9500      	str	r5, [sp, #0]
{
    8bc8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bca:	f7ff ffc7 	bl	8b5c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8bce:	1c7b      	adds	r3, r7, #1
    8bd0:	bf08      	it	eq
    8bd2:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8bd6:	d005      	beq.n	8be4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8bd8:	ea56 0307 	orrs.w	r3, r6, r7
    8bdc:	d105      	bne.n	8bea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    8bde:	4620      	mov	r0, r4
    8be0:	f7ff fce4 	bl	85ac <z_sched_start>
}
    8be4:	4620      	mov	r0, r4
    8be6:	b007      	add	sp, #28
    8be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    8bea:	4904      	ldr	r1, [pc, #16]	; (8bfc <z_impl_k_thread_create+0x54>)
    8bec:	4632      	mov	r2, r6
    8bee:	463b      	mov	r3, r7
    8bf0:	f104 0018 	add.w	r0, r4, #24
    8bf4:	f000 f8c6 	bl	8d84 <z_add_timeout>
    8bf8:	e7f4      	b.n	8be4 <z_impl_k_thread_create+0x3c>
    8bfa:	bf00      	nop
    8bfc:	0000b047 	.word	0x0000b047

00008c00 <z_init_static_threads>:
{
    8c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    8c04:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8cbc <z_init_static_threads+0xbc>
    8c08:	4d2b      	ldr	r5, [pc, #172]	; (8cb8 <z_init_static_threads+0xb8>)
{
    8c0a:	b087      	sub	sp, #28
    8c0c:	46c8      	mov	r8, r9
	_FOREACH_STATIC_THREAD(thread_data) {
    8c0e:	454d      	cmp	r5, r9
    8c10:	f105 0430 	add.w	r4, r5, #48	; 0x30
    8c14:	d30d      	bcc.n	8c32 <z_init_static_threads+0x32>
	k_sched_lock();
    8c16:	f7ff fc2b 	bl	8470 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8c1a:	4c27      	ldr	r4, [pc, #156]	; (8cb8 <z_init_static_threads+0xb8>)
    8c1c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8cc0 <z_init_static_threads+0xc0>
			return (u32_t)((t * to_hz + off) / from_hz);
    8c20:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    8c24:	4544      	cmp	r4, r8
    8c26:	d321      	bcc.n	8c6c <z_init_static_threads+0x6c>
}
    8c28:	b007      	add	sp, #28
    8c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    8c2e:	f7ff bc6d 	b.w	850c <k_sched_unlock>
		z_setup_new_thread(
    8c32:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8c36:	9305      	str	r3, [sp, #20]
    8c38:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8c3c:	9304      	str	r3, [sp, #16]
    8c3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8c42:	9303      	str	r3, [sp, #12]
    8c44:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8c48:	9302      	str	r3, [sp, #8]
    8c4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8c4e:	9301      	str	r3, [sp, #4]
    8c50:	f854 3c20 	ldr.w	r3, [r4, #-32]
    8c54:	9300      	str	r3, [sp, #0]
    8c56:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    8c5a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    8c5e:	f7ff ff7d 	bl	8b5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8c62:	f854 3c30 	ldr.w	r3, [r4, #-48]
    8c66:	655d      	str	r5, [r3, #84]	; 0x54
    8c68:	4625      	mov	r5, r4
    8c6a:	e7d0      	b.n	8c0e <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8c6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8c6e:	1c4b      	adds	r3, r1, #1
    8c70:	d017      	beq.n	8ca2 <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
    8c72:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    8c76:	f240 3be7 	movw	fp, #999	; 0x3e7
    8c7a:	f04f 0c00 	mov.w	ip, #0
    8c7e:	fbc9 bc01 	smlal	fp, ip, r9, r1
    8c82:	2300      	movs	r3, #0
    8c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c88:	4658      	mov	r0, fp
    8c8a:	4661      	mov	r1, ip
    8c8c:	f7f7 fa38 	bl	100 <__aeabi_uldivmod>
    8c90:	2700      	movs	r7, #0
    8c92:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c94:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    8c98:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c9a:	d104      	bne.n	8ca6 <z_init_static_threads+0xa6>
	z_sched_start(thread);
    8c9c:	4628      	mov	r0, r5
    8c9e:	f7ff fc85 	bl	85ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8ca2:	3430      	adds	r4, #48	; 0x30
    8ca4:	e7be      	b.n	8c24 <z_init_static_threads+0x24>
    8ca6:	4602      	mov	r2, r0
    8ca8:	463b      	mov	r3, r7
    8caa:	4651      	mov	r1, sl
    8cac:	f105 0018 	add.w	r0, r5, #24
    8cb0:	f000 f868 	bl	8d84 <z_add_timeout>
    8cb4:	e7f5      	b.n	8ca2 <z_init_static_threads+0xa2>
    8cb6:	bf00      	nop
    8cb8:	200003b4 	.word	0x200003b4
    8cbc:	200003b4 	.word	0x200003b4
    8cc0:	0000b047 	.word	0x0000b047

00008cc4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    8cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cc8:	4604      	mov	r4, r0
    8cca:	b088      	sub	sp, #32
    8ccc:	460d      	mov	r5, r1
    8cce:	4616      	mov	r6, r2
    8cd0:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
    8cd2:	f002 f8dc 	bl	ae8e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    8cd6:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8cda:	2200      	movs	r2, #0
    8cdc:	2300      	movs	r3, #0
    8cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8ce2:	e9cd 7203 	strd	r7, r2, [sp, #12]
    8ce6:	e9cd 2201 	strd	r2, r2, [sp, #4]
    8cea:	4b07      	ldr	r3, [pc, #28]	; (8d08 <k_work_q_start+0x44>)
    8cec:	9400      	str	r4, [sp, #0]
    8cee:	4632      	mov	r2, r6
    8cf0:	4629      	mov	r1, r5
    8cf2:	4640      	mov	r0, r8
    8cf4:	f7ff ff58 	bl	8ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8cf8:	4904      	ldr	r1, [pc, #16]	; (8d0c <k_work_q_start+0x48>)
    8cfa:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    8cfc:	b008      	add	sp, #32
    8cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8d02:	f002 ba5b 	b.w	b1bc <z_impl_k_thread_name_set>
    8d06:	bf00      	nop
    8d08:	000091b1 	.word	0x000091b1
    8d0c:	0000d2a8 	.word	0x0000d2a8

00008d10 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    8d10:	4b03      	ldr	r3, [pc, #12]	; (8d20 <elapsed+0x10>)
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	b90b      	cbnz	r3, 8d1a <elapsed+0xa>
    8d16:	f7f8 bdd1 	b.w	18bc <z_clock_elapsed>
}
    8d1a:	2000      	movs	r0, #0
    8d1c:	4770      	bx	lr
    8d1e:	bf00      	nop
    8d20:	20001408 	.word	0x20001408

00008d24 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d24:	6803      	ldr	r3, [r0, #0]
    8d26:	b140      	cbz	r0, 8d3a <remove_timeout+0x16>
    8d28:	4a07      	ldr	r2, [pc, #28]	; (8d48 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    8d2a:	6852      	ldr	r2, [r2, #4]
    8d2c:	4290      	cmp	r0, r2
    8d2e:	d004      	beq.n	8d3a <remove_timeout+0x16>
	if (next(t) != NULL) {
    8d30:	b11b      	cbz	r3, 8d3a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    8d32:	689a      	ldr	r2, [r3, #8]
    8d34:	6881      	ldr	r1, [r0, #8]
    8d36:	440a      	add	r2, r1
    8d38:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    8d3a:	6842      	ldr	r2, [r0, #4]
    8d3c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    8d3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d40:	2300      	movs	r3, #0
	node->prev = NULL;
    8d42:	e9c0 3300 	strd	r3, r3, [r0]
}
    8d46:	4770      	bx	lr
    8d48:	20000334 	.word	0x20000334

00008d4c <next_timeout>:
	return list->head == list;
    8d4c:	4b0b      	ldr	r3, [pc, #44]	; (8d7c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    8d4e:	b510      	push	{r4, lr}
    8d50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d52:	429c      	cmp	r4, r3
    8d54:	bf08      	it	eq
    8d56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    8d58:	f7ff ffda 	bl	8d10 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    8d5c:	b154      	cbz	r4, 8d74 <next_timeout+0x28>
    8d5e:	68a3      	ldr	r3, [r4, #8]
    8d60:	1a18      	subs	r0, r3, r0
    8d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8d66:	4b06      	ldr	r3, [pc, #24]	; (8d80 <next_timeout+0x34>)
    8d68:	691b      	ldr	r3, [r3, #16]
    8d6a:	b113      	cbz	r3, 8d72 <next_timeout+0x26>
    8d6c:	4298      	cmp	r0, r3
    8d6e:	bfa8      	it	ge
    8d70:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8d72:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    8d74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8d78:	e7f5      	b.n	8d66 <next_timeout+0x1a>
    8d7a:	bf00      	nop
    8d7c:	20000334 	.word	0x20000334
    8d80:	20001340 	.word	0x20001340

00008d84 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    8d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d88:	9101      	str	r1, [sp, #4]
    8d8a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d8c:	1c4b      	adds	r3, r1, #1
    8d8e:	bf08      	it	eq
    8d90:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8d94:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d96:	d061      	beq.n	8e5c <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    8d98:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    8d9a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    8d9e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    8da2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    8da6:	ebb3 0804 	subs.w	r8, r3, r4
    8daa:	eb6b 0905 	sbc.w	r9, fp, r5
    8dae:	f1b8 0f00 	cmp.w	r8, #0
    8db2:	f179 0300 	sbcs.w	r3, r9, #0
    8db6:	db0f      	blt.n	8dd8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    8db8:	f7ff ffaa 	bl	8d10 <elapsed>
    8dbc:	4a2c      	ldr	r2, [pc, #176]	; (8e70 <z_add_timeout+0xec>)
    8dbe:	e9d2 1c00 	ldrd	r1, ip, [r2]
    8dc2:	f06f 0301 	mvn.w	r3, #1
    8dc6:	1a5b      	subs	r3, r3, r1
    8dc8:	eb6b 020c 	sbc.w	r2, fp, ip
    8dcc:	1b1e      	subs	r6, r3, r4
    8dce:	eb62 0705 	sbc.w	r7, r2, r5
    8dd2:	1a34      	subs	r4, r6, r0
    8dd4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8dd8:	9b01      	ldr	r3, [sp, #4]
    8dda:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    8dde:	f04f 0320 	mov.w	r3, #32
    8de2:	f3ef 8611 	mrs	r6, BASEPRI
    8de6:	f383 8811 	msr	BASEPRI, r3
    8dea:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    8dee:	f7ff ff8f 	bl	8d10 <elapsed>
	ticks = MAX(1, ticks);
    8df2:	2c01      	cmp	r4, #1
    8df4:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    8df8:	4b1e      	ldr	r3, [pc, #120]	; (8e74 <z_add_timeout+0xf0>)
    8dfa:	681a      	ldr	r2, [r3, #0]
    8dfc:	bfb8      	it	lt
    8dfe:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
    8e00:	4404      	add	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e02:	429a      	cmp	r2, r3
    8e04:	f8ca 4008 	str.w	r4, [sl, #8]
    8e08:	d001      	beq.n	8e0e <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8e0a:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    8e0c:	b952      	cbnz	r2, 8e24 <z_add_timeout+0xa0>
	node->prev = list->tail;
    8e0e:	685a      	ldr	r2, [r3, #4]
    8e10:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    8e14:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    8e16:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    8e1a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    8e1e:	f8c3 a004 	str.w	sl, [r3, #4]
}
    8e22:	e00d      	b.n	8e40 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    8e24:	6890      	ldr	r0, [r2, #8]
    8e26:	f8da 1008 	ldr.w	r1, [sl, #8]
    8e2a:	4288      	cmp	r0, r1
    8e2c:	dd19      	ble.n	8e62 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    8e2e:	1a41      	subs	r1, r0, r1
    8e30:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    8e32:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8e34:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    8e38:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    8e3c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    8e40:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e42:	429a      	cmp	r2, r3
    8e44:	d006      	beq.n	8e54 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8e46:	4592      	cmp	sl, r2
    8e48:	d104      	bne.n	8e54 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    8e4a:	f7ff ff7f 	bl	8d4c <next_timeout>
    8e4e:	2100      	movs	r1, #0
    8e50:	f7f8 fcd6 	bl	1800 <z_clock_set_timeout>
	__asm__ volatile(
    8e54:	f386 8811 	msr	BASEPRI, r6
    8e58:	f3bf 8f6f 	isb	sy
		}
	}
}
    8e5c:	b003      	add	sp, #12
    8e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    8e62:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    8e64:	4294      	cmp	r4, r2
    8e66:	f8ca 1008 	str.w	r1, [sl, #8]
    8e6a:	d0d0      	beq.n	8e0e <z_add_timeout+0x8a>
    8e6c:	6812      	ldr	r2, [r2, #0]
    8e6e:	e7cd      	b.n	8e0c <z_add_timeout+0x88>
    8e70:	200004d0 	.word	0x200004d0
    8e74:	20000334 	.word	0x20000334

00008e78 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    8e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e7c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8e7e:	f7ff fbf9 	bl	8674 <z_time_slice>
	__asm__ volatile(
    8e82:	f04f 0320 	mov.w	r3, #32
    8e86:	f3ef 8411 	mrs	r4, BASEPRI
    8e8a:	f383 8811 	msr	BASEPRI, r3
    8e8e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8e92:	4d20      	ldr	r5, [pc, #128]	; (8f14 <z_clock_announce+0x9c>)
    8e94:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8f18 <z_clock_announce+0xa0>
	return list->head == list;
    8e98:	f8df a080 	ldr.w	sl, [pc, #128]	; 8f1c <z_clock_announce+0xa4>
    8e9c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8e9e:	46c1      	mov	r9, r8
    8ea0:	f8da 0000 	ldr.w	r0, [sl]
    8ea4:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ea6:	4550      	cmp	r0, sl
    8ea8:	e9d8 6700 	ldrd	r6, r7, [r8]
    8eac:	d005      	beq.n	8eba <z_clock_announce+0x42>
    8eae:	b120      	cbz	r0, 8eba <z_clock_announce+0x42>
    8eb0:	6883      	ldr	r3, [r0, #8]
    8eb2:	4293      	cmp	r3, r2
    8eb4:	dd13      	ble.n	8ede <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8eb6:	1a9b      	subs	r3, r3, r2
    8eb8:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    8eba:	18b6      	adds	r6, r6, r2
    8ebc:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    8ec0:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    8ec4:	2600      	movs	r6, #0
    8ec6:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    8ec8:	f7ff ff40 	bl	8d4c <next_timeout>
    8ecc:	4631      	mov	r1, r6
    8ece:	f7f8 fc97 	bl	1800 <z_clock_set_timeout>
	__asm__ volatile(
    8ed2:	f384 8811 	msr	BASEPRI, r4
    8ed6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    8ede:	18f6      	adds	r6, r6, r3
    8ee0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    8ee4:	1ad3      	subs	r3, r2, r3
    8ee6:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    8ee8:	2300      	movs	r3, #0
    8eea:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    8eec:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    8ef0:	f7ff ff18 	bl	8d24 <remove_timeout>
    8ef4:	f384 8811 	msr	BASEPRI, r4
    8ef8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8efc:	68c3      	ldr	r3, [r0, #12]
    8efe:	4798      	blx	r3
	__asm__ volatile(
    8f00:	f04f 0320 	mov.w	r3, #32
    8f04:	f3ef 8411 	mrs	r4, BASEPRI
    8f08:	f383 8811 	msr	BASEPRI, r3
    8f0c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8f10:	e7c6      	b.n	8ea0 <z_clock_announce+0x28>
    8f12:	bf00      	nop
    8f14:	20001408 	.word	0x20001408
    8f18:	200004d0 	.word	0x200004d0
    8f1c:	20000334 	.word	0x20000334

00008f20 <z_tick_get>:

s64_t z_tick_get(void)
{
    8f20:	b510      	push	{r4, lr}
    8f22:	f04f 0320 	mov.w	r3, #32
    8f26:	f3ef 8411 	mrs	r4, BASEPRI
    8f2a:	f383 8811 	msr	BASEPRI, r3
    8f2e:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    8f32:	f7f8 fcc3 	bl	18bc <z_clock_elapsed>
    8f36:	4b06      	ldr	r3, [pc, #24]	; (8f50 <z_tick_get+0x30>)
    8f38:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f3c:	1812      	adds	r2, r2, r0
    8f3e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    8f42:	f384 8811 	msr	BASEPRI, r4
    8f46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8f4a:	4610      	mov	r0, r2
    8f4c:	4619      	mov	r1, r3
    8f4e:	bd10      	pop	{r4, pc}
    8f50:	200004d0 	.word	0x200004d0

00008f54 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8f56:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    8f5a:	1c56      	adds	r6, r2, #1
    8f5c:	f143 0700 	adc.w	r7, r3, #0
    8f60:	2f00      	cmp	r7, #0
    8f62:	bf08      	it	eq
    8f64:	2e02      	cmpeq	r6, #2
{
    8f66:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8f68:	d302      	bcc.n	8f70 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8f6a:	490c      	ldr	r1, [pc, #48]	; (8f9c <z_timer_expiration_handler+0x48>)
    8f6c:	f7ff ff0a 	bl	8d84 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8f72:	3301      	adds	r3, #1
    8f74:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8f76:	69a3      	ldr	r3, [r4, #24]
    8f78:	b10b      	cbz	r3, 8f7e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    8f7a:	4620      	mov	r0, r4
    8f7c:	4798      	blx	r3
	return list->head == list;
    8f7e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f82:	42a5      	cmp	r5, r4
    8f84:	d008      	beq.n	8f98 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    8f86:	b13d      	cbz	r5, 8f98 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    8f88:	4628      	mov	r0, r5
    8f8a:	f001 ffeb 	bl	af64 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    8f8e:	4628      	mov	r0, r5
    8f90:	f002 f849 	bl	b026 <z_ready_thread>
    8f94:	2300      	movs	r3, #0
    8f96:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
    8f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f9a:	bf00      	nop
    8f9c:	00008f55 	.word	0x00008f55

00008fa0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8fa0:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    8fa4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    8fa8:	ea54 0105 	orrs.w	r1, r4, r5
{
    8fac:	4680      	mov	r8, r0
    8fae:	4616      	mov	r6, r2
    8fb0:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    8fb2:	d016      	beq.n	8fe2 <z_impl_k_timer_start+0x42>
    8fb4:	f06f 0101 	mvn.w	r1, #1
    8fb8:	ebb1 0a04 	subs.w	sl, r1, r4
    8fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8fc0:	eb61 0b05 	sbc.w	fp, r1, r5
    8fc4:	f1ba 0f00 	cmp.w	sl, #0
    8fc8:	f17b 0100 	sbcs.w	r1, fp, #0
    8fcc:	da09      	bge.n	8fe2 <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    8fce:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    8fd2:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    8fd6:	2c01      	cmp	r4, #1
    8fd8:	f175 0100 	sbcs.w	r1, r5, #0
    8fdc:	bfbc      	itt	lt
    8fde:	2401      	movlt	r4, #1
    8fe0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8fe2:	f06f 0101 	mvn.w	r1, #1
    8fe6:	1a89      	subs	r1, r1, r2
    8fe8:	9100      	str	r1, [sp, #0]
    8fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8fee:	eb61 0103 	sbc.w	r1, r1, r3
    8ff2:	9101      	str	r1, [sp, #4]
    8ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
    8ff8:	2800      	cmp	r0, #0
    8ffa:	f171 0100 	sbcs.w	r1, r1, #0
    8ffe:	da09      	bge.n	9014 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9000:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
    9004:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
    9008:	2e00      	cmp	r6, #0
    900a:	f177 0300 	sbcs.w	r3, r7, #0
    900e:	bfbc      	itt	lt
    9010:	2600      	movlt	r6, #0
    9012:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    9014:	4640      	mov	r0, r8
    9016:	f002 f8d6 	bl	b1c6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    901a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    901c:	4906      	ldr	r1, [pc, #24]	; (9038 <z_impl_k_timer_start+0x98>)
	timer->status = 0U;
    901e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9022:	4632      	mov	r2, r6
    9024:	463b      	mov	r3, r7
    9026:	4640      	mov	r0, r8
	timer->period = period;
    9028:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    902c:	b002      	add	sp, #8
    902e:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9032:	f7ff bea7 	b.w	8d84 <z_add_timeout>
    9036:	bf00      	nop
    9038:	00008f55 	.word	0x00008f55

0000903c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    903c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9040:	b089      	sub	sp, #36	; 0x24
    9042:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
    9044:	2301      	movs	r3, #1
    9046:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
    904a:	4b29      	ldr	r3, [pc, #164]	; (90f0 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
    904c:	689b      	ldr	r3, [r3, #8]
    904e:	9306      	str	r3, [sp, #24]
    9050:	4b28      	ldr	r3, [pc, #160]	; (90f4 <z_impl_k_poll+0xb8>)
    9052:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
    9054:	ea52 0307 	orrs.w	r3, r2, r7
{
    9058:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
    905a:	bf0c      	ite	eq
    905c:	2301      	moveq	r3, #1
    905e:	2300      	movne	r3, #0
    9060:	aa05      	add	r2, sp, #20
{
    9062:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
    9064:	f002 f9e3 	bl	b42e <register_events>
    9068:	4680      	mov	r8, r0
	__asm__ volatile(
    906a:	f04f 0320 	mov.w	r3, #32
    906e:	f3ef 8911 	mrs	r9, BASEPRI
    9072:	f383 8811 	msr	BASEPRI, r3
    9076:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
    907a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    907e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9082:	b963      	cbnz	r3, 909e <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
    9084:	4601      	mov	r1, r0
    9086:	464a      	mov	r2, r9
    9088:	4628      	mov	r0, r5
    908a:	f002 f937 	bl	b2fc <clear_event_registrations>
	__asm__ volatile(
    908e:	f389 8811 	msr	BASEPRI, r9
    9092:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
    9096:	4620      	mov	r0, r4
    9098:	b009      	add	sp, #36	; 0x24
    909a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
    909e:	2300      	movs	r3, #0
    90a0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    90a4:	ea56 0307 	orrs.w	r3, r6, r7
    90a8:	d106      	bne.n	90b8 <z_impl_k_poll+0x7c>
    90aa:	f389 8811 	msr	BASEPRI, r9
    90ae:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    90b2:	f06f 040a 	mvn.w	r4, #10
    90b6:	e7ee      	b.n	9096 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    90b8:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    90ba:	e9cd 6700 	strd	r6, r7, [sp]
    90be:	4649      	mov	r1, r9
    90c0:	480d      	ldr	r0, [pc, #52]	; (90f8 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
    90c2:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    90c6:	f7ff fc09 	bl	88dc <z_pend_curr>
    90ca:	4604      	mov	r4, r0
	__asm__ volatile(
    90cc:	f04f 0320 	mov.w	r3, #32
    90d0:	f3ef 8611 	mrs	r6, BASEPRI
    90d4:	f383 8811 	msr	BASEPRI, r3
    90d8:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    90dc:	4632      	mov	r2, r6
    90de:	4641      	mov	r1, r8
    90e0:	4628      	mov	r0, r5
    90e2:	f002 f90b 	bl	b2fc <clear_event_registrations>
	__asm__ volatile(
    90e6:	f386 8811 	msr	BASEPRI, r6
    90ea:	f3bf 8f6f 	isb	sy
	return swap_rc;
    90ee:	e7d2      	b.n	9096 <z_impl_k_poll+0x5a>
    90f0:	20001340 	.word	0x20001340
    90f4:	0000b389 	.word	0x0000b389
    90f8:	2000191d 	.word	0x2000191d

000090fc <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
    90fc:	b510      	push	{r4, lr}
    90fe:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
    9100:	f002 f854 	bl	b1ac <k_is_in_isr>
    9104:	b940      	cbnz	r0, 9118 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
    9106:	4b05      	ldr	r3, [pc, #20]	; (911c <z_thread_malloc+0x20>)
    9108:	689b      	ldr	r3, [r3, #8]
    910a:	6e98      	ldr	r0, [r3, #104]	; 0x68
	}

	if (pool) {
    910c:	b120      	cbz	r0, 9118 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
    910e:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
    9110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
    9114:	f002 b9fa 	b.w	b50c <k_mem_pool_malloc>
}
    9118:	2000      	movs	r0, #0
    911a:	bd10      	pop	{r4, pc}
    911c:	20001340 	.word	0x20001340

00009120 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    9120:	4770      	bx	lr

00009122 <arch_printk_char_out>:
}
    9122:	2000      	movs	r0, #0
    9124:	4770      	bx	lr

00009126 <print_err>:
{
    9126:	b570      	push	{r4, r5, r6, lr}
    9128:	4604      	mov	r4, r0
    912a:	460d      	mov	r5, r1
	out('E', ctx);
    912c:	2045      	movs	r0, #69	; 0x45
    912e:	47a0      	blx	r4
	out('R', ctx);
    9130:	4629      	mov	r1, r5
    9132:	2052      	movs	r0, #82	; 0x52
    9134:	47a0      	blx	r4
	out('R', ctx);
    9136:	4629      	mov	r1, r5
    9138:	4623      	mov	r3, r4
    913a:	2052      	movs	r0, #82	; 0x52
}
    913c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    9140:	4718      	bx	r3

00009142 <str_out>:
{
    9142:	b530      	push	{r4, r5, lr}
    9144:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9146:	680c      	ldr	r4, [r1, #0]
    9148:	1c55      	adds	r5, r2, #1
    914a:	b114      	cbz	r4, 9152 <str_out+0x10>
    914c:	684b      	ldr	r3, [r1, #4]
    914e:	4293      	cmp	r3, r2
    9150:	dc01      	bgt.n	9156 <str_out+0x14>
		ctx->count++;
    9152:	608d      	str	r5, [r1, #8]
}
    9154:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    9156:	3b01      	subs	r3, #1
    9158:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    915a:	bf08      	it	eq
    915c:	2200      	moveq	r2, #0
    915e:	608d      	str	r5, [r1, #8]
    9160:	bf0c      	ite	eq
    9162:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    9164:	54a0      	strbne	r0, [r4, r2]
    9166:	e7f5      	b.n	9154 <str_out+0x12>

00009168 <printk>:
{
    9168:	b40f      	push	{r0, r1, r2, r3}
    916a:	b507      	push	{r0, r1, r2, lr}
    916c:	a904      	add	r1, sp, #16
    916e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9172:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    9174:	f7f7 fc8c 	bl	a90 <vprintk>
}
    9178:	b003      	add	sp, #12
    917a:	f85d eb04 	ldr.w	lr, [sp], #4
    917e:	b004      	add	sp, #16
    9180:	4770      	bx	lr

00009182 <snprintk>:
{
    9182:	b40c      	push	{r2, r3}
    9184:	b507      	push	{r0, r1, r2, lr}
    9186:	ab04      	add	r3, sp, #16
    9188:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    918c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    918e:	f7f7 fc8d 	bl	aac <vsnprintk>
}
    9192:	b003      	add	sp, #12
    9194:	f85d eb04 	ldr.w	lr, [sp], #4
    9198:	b002      	add	sp, #8
    919a:	4770      	bx	lr

0000919c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    919c:	4604      	mov	r4, r0
    919e:	b508      	push	{r3, lr}
    91a0:	4608      	mov	r0, r1
    91a2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    91a4:	461a      	mov	r2, r3
    91a6:	47a0      	blx	r4
	return z_impl_k_current_get();
    91a8:	f7ff fc6a 	bl	8a80 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    91ac:	f7f8 ffee 	bl	218c <z_impl_k_thread_abort>

000091b0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    91b0:	b510      	push	{r4, lr}
    91b2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
    91b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    91b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    91bc:	4620      	mov	r0, r4
    91be:	f7ff f8e1 	bl	8384 <z_impl_k_queue_get>
    91c2:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
    91c4:	2800      	cmp	r0, #0
    91c6:	d0f5      	beq.n	91b4 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    91c8:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    91ca:	6842      	ldr	r2, [r0, #4]
    91cc:	f3bf 8f5b 	dmb	ish
    91d0:	e853 1f00 	ldrex	r1, [r3]
    91d4:	f021 0c01 	bic.w	ip, r1, #1
    91d8:	e843 ce00 	strex	lr, ip, [r3]
    91dc:	f1be 0f00 	cmp.w	lr, #0
    91e0:	d1f6      	bne.n	91d0 <z_work_q_main+0x20>
    91e2:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    91e6:	07cb      	lsls	r3, r1, #31
    91e8:	d500      	bpl.n	91ec <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    91ea:	4790      	blx	r2
	z_impl_k_yield();
    91ec:	f7ff fbda 	bl	89a4 <z_impl_k_yield>
    91f0:	e7e0      	b.n	91b4 <z_work_q_main+0x4>

000091f2 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    91f2:	6803      	ldr	r3, [r0, #0]
    91f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    91f8:	6883      	ldr	r3, [r0, #8]
    91fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    91fe:	bf2c      	ite	cs
    9200:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    9204:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    9208:	4770      	bx	lr

0000920a <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    920a:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    920c:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    920e:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    9210:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    9214:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    9218:	bf2c      	ite	cs
    921a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    921e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    9222:	bd10      	pop	{r4, pc}

00009224 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
    9224:	b538      	push	{r3, r4, r5, lr}
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    9226:	2200      	movs	r2, #0
{
    9228:	4605      	mov	r5, r0
    922a:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    922c:	f7ff ffe1 	bl	91f2 <chunk_field>
    9230:	68eb      	ldr	r3, [r5, #12]
    9232:	4018      	ands	r0, r3
	return c + size(h, c);
}
    9234:	4420      	add	r0, r4
    9236:	bd38      	pop	{r3, r4, r5, pc}

00009238 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
    9238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
    923c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    9240:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
    9242:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
{
    9246:	4604      	mov	r4, r0
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
    9248:	6853      	ldr	r3, [r2, #4]
    924a:	3b01      	subs	r3, #1
{
    924c:	460d      	mov	r5, r1
	b->list_size--;
    924e:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
    9250:	b953      	cbnz	r3, 9268 <free_list_remove+0x30>
		h->avail_buckets &= ~(1 << bidx);
    9252:	2201      	movs	r2, #1
    9254:	fa02 f101 	lsl.w	r1, r2, r1
    9258:	6942      	ldr	r2, [r0, #20]
    925a:	ea22 0201 	bic.w	r2, r2, r1
    925e:	6142      	str	r2, [r0, #20]
		b->next = 0;
    9260:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
    9264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    9268:	4631      	mov	r1, r6
    926a:	2202      	movs	r2, #2
    926c:	f7ff ffc1 	bl	91f2 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
    9270:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
    9272:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
    9274:	2203      	movs	r2, #3
    9276:	4620      	mov	r0, r4
    9278:	f7ff ffbb 	bl	91f2 <chunk_field>
		chunk_set(h, first, FREE_NEXT, second);
    927c:	4639      	mov	r1, r7
		b->next = second;
    927e:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
    9282:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
    9284:	4603      	mov	r3, r0
    9286:	2203      	movs	r2, #3
    9288:	4620      	mov	r0, r4
    928a:	f7ff ffbe 	bl	920a <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
    928e:	463b      	mov	r3, r7
    9290:	4631      	mov	r1, r6
    9292:	4620      	mov	r0, r4
    9294:	2202      	movs	r2, #2
}
    9296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
    929a:	f7ff bfb6 	b.w	920a <chunk_set>

0000929e <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    92a2:	2200      	movs	r2, #0
    92a4:	4604      	mov	r4, r0
    92a6:	460d      	mov	r5, r1
    92a8:	f7ff ffa3 	bl	91f2 <chunk_field>
    92ac:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    92ae:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    92b0:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    92b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    92b6:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    92ba:	bf34      	ite	cc
    92bc:	2000      	movcc	r0, #0
    92be:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    92c0:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    92c2:	f1c0 001f 	rsb	r0, r0, #31
    92c6:	1a80      	subs	r0, r0, r2
    92c8:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    92cc:	684a      	ldr	r2, [r1, #4]
    92ce:	1c56      	adds	r6, r2, #1
    92d0:	604e      	str	r6, [r1, #4]
    92d2:	b9a2      	cbnz	r2, 92fe <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    92d4:	2201      	movs	r2, #1
    92d6:	fa02 f100 	lsl.w	r1, r2, r0
    92da:	6962      	ldr	r2, [r4, #20]
    92dc:	430a      	orrs	r2, r1
    92de:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    92e0:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    92e2:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    92e6:	2202      	movs	r2, #2
    92e8:	462b      	mov	r3, r5
    92ea:	4620      	mov	r0, r4
    92ec:	f7ff ff8d 	bl	920a <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    92f0:	2203      	movs	r2, #3
    92f2:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    92f4:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    92f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    92fa:	f7ff bf86 	b.w	920a <chunk_set>
		chunkid_t second = h->buckets[b].next;
    92fe:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    9302:	2202      	movs	r2, #2
    9304:	4639      	mov	r1, r7
    9306:	4620      	mov	r0, r4
    9308:	f7ff ff73 	bl	91f2 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
    930c:	2202      	movs	r2, #2
    930e:	4603      	mov	r3, r0
    9310:	4606      	mov	r6, r0
    9312:	4629      	mov	r1, r5
    9314:	4620      	mov	r0, r4
    9316:	f7ff ff78 	bl	920a <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    931a:	463b      	mov	r3, r7
    931c:	2203      	movs	r2, #3
    931e:	4629      	mov	r1, r5
    9320:	4620      	mov	r0, r4
    9322:	f7ff ff72 	bl	920a <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    9326:	2203      	movs	r2, #3
    9328:	4631      	mov	r1, r6
    932a:	462b      	mov	r3, r5
    932c:	4620      	mov	r0, r4
    932e:	f7ff ff6c 	bl	920a <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    9332:	2202      	movs	r2, #2
    9334:	4639      	mov	r1, r7
    9336:	e7dd      	b.n	92f4 <free_list_add+0x56>

00009338 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
    9338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
    933c:	6843      	ldr	r3, [r0, #4]
    933e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
{
    9342:	4604      	mov	r4, r0
    9344:	4617      	mov	r7, r2

	free_list_remove(h, bidx, c);
    9346:	462a      	mov	r2, r5
    9348:	f7ff ff76 	bl	9238 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    934c:	2200      	movs	r2, #0
    934e:	4629      	mov	r1, r5
    9350:	4620      	mov	r0, r4
    9352:	f7ff ff4e 	bl	91f2 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
    9356:	68a3      	ldr	r3, [r4, #8]
    9358:	68e6      	ldr	r6, [r4, #12]
    935a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    935e:	ea06 0600 	and.w	r6, r6, r0
	size_t rem = size(h, c) - sz;
    9362:	eba6 0607 	sub.w	r6, r6, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
    9366:	bf2c      	ite	cs
    9368:	2302      	movcs	r3, #2
    936a:	2301      	movcc	r3, #1
    936c:	42b3      	cmp	r3, r6
    936e:	d82d      	bhi.n	93cc <split_alloc+0x94>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
    9370:	4629      	mov	r1, r5
    9372:	4620      	mov	r0, r4
    9374:	f7ff ff56 	bl	9224 <right_chunk>
		chunkid_t c2 = c + sz;
    9378:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
    937c:	463b      	mov	r3, r7
    937e:	2200      	movs	r2, #0
    9380:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
    9382:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
    9384:	4620      	mov	r0, r4
    9386:	f7ff ff40 	bl	920a <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
    938a:	4633      	mov	r3, r6
    938c:	2200      	movs	r2, #0
    938e:	4641      	mov	r1, r8
    9390:	4620      	mov	r0, r4
    9392:	f7ff ff3a 	bl	920a <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
    9396:	463b      	mov	r3, r7
    9398:	2201      	movs	r2, #1
    939a:	4641      	mov	r1, r8
    939c:	4620      	mov	r0, r4
    939e:	f7ff ff34 	bl	920a <chunk_set>
    93a2:	2200      	movs	r2, #0
    93a4:	4641      	mov	r1, r8
    93a6:	4620      	mov	r0, r4
    93a8:	f7ff ff23 	bl	91f2 <chunk_field>
    93ac:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
    93ae:	68a2      	ldr	r2, [r4, #8]
    93b0:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
    93b2:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
    93b4:	4293      	cmp	r3, r2
    93b6:	d005      	beq.n	93c4 <split_alloc+0x8c>
			chunk_set(h, c3, LEFT_SIZE, rem);
    93b8:	4633      	mov	r3, r6
    93ba:	2201      	movs	r2, #1
    93bc:	4649      	mov	r1, r9
    93be:	4620      	mov	r0, r4
    93c0:	f7ff ff23 	bl	920a <chunk_set>
		}
		free_list_add(h, c2);
    93c4:	4641      	mov	r1, r8
    93c6:	4620      	mov	r0, r4
    93c8:	f7ff ff69 	bl	929e <free_list_add>
    93cc:	4629      	mov	r1, r5
    93ce:	2200      	movs	r2, #0
    93d0:	4620      	mov	r0, r4
    93d2:	f7ff ff0e 	bl	91f2 <chunk_field>
    93d6:	68e2      	ldr	r2, [r4, #12]
    93d8:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
    93dc:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
    93de:	4313      	orrs	r3, r2
    93e0:	4629      	mov	r1, r5
    93e2:	4620      	mov	r0, r4
    93e4:	2200      	movs	r2, #0
    93e6:	f7ff ff10 	bl	920a <chunk_set>
	return big_heap(h) ? 8 : 4;
    93ea:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
    93ec:	6820      	ldr	r0, [r4, #0]
    93ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    93f2:	bf2c      	ite	cs
    93f4:	2308      	movcs	r3, #8
    93f6:	2304      	movcc	r3, #4
    93f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
    93fc:	4428      	add	r0, r5
    93fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009402 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    9402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
    9406:	2900      	cmp	r1, #0
    9408:	f000 80ac 	beq.w	9564 <sys_heap_free+0x162>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
    940c:	6804      	ldr	r4, [r0, #0]
    940e:	68a7      	ldr	r7, [r4, #8]
    9410:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    9414:	bf2c      	ite	cs
    9416:	2508      	movcs	r5, #8
    9418:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
    941a:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
    941c:	6821      	ldr	r1, [r4, #0]
    941e:	1a6d      	subs	r5, r5, r1
    9420:	bf48      	it	mi
    9422:	3507      	addmi	r5, #7
    9424:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    9426:	2200      	movs	r2, #0
    9428:	4629      	mov	r1, r5
    942a:	4620      	mov	r0, r4
    942c:	f7ff fee1 	bl	91f2 <chunk_field>
    9430:	68e6      	ldr	r6, [r4, #12]
    9432:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
    9436:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
    943a:	42bb      	cmp	r3, r7
    943c:	d036      	beq.n	94ac <sys_heap_free+0xaa>
    943e:	4629      	mov	r1, r5
    9440:	4620      	mov	r0, r4
    9442:	f7ff feef 	bl	9224 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
    9446:	2200      	movs	r2, #0
    9448:	4601      	mov	r1, r0
    944a:	4682      	mov	sl, r0
    944c:	4620      	mov	r0, r4
    944e:	f7ff fed0 	bl	91f2 <chunk_field>
    9452:	ea30 0906 	bics.w	r9, r0, r6
    9456:	d129      	bne.n	94ac <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    9458:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    945c:	bf34      	ite	cc
    945e:	2700      	movcc	r7, #0
    9460:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    9462:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
    9464:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    9466:	f1c7 071f 	rsb	r7, r7, #31
    946a:	fab6 f686 	clz	r6, r6

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
    946e:	4652      	mov	r2, sl
    9470:	1bb9      	subs	r1, r7, r6
    9472:	4620      	mov	r0, r4
    9474:	f7ff fee0 	bl	9238 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
    9478:	4643      	mov	r3, r8
    947a:	464a      	mov	r2, r9
    947c:	4629      	mov	r1, r5
    947e:	4620      	mov	r0, r4
    9480:	f7ff fec3 	bl	920a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    9484:	4629      	mov	r1, r5
    9486:	4620      	mov	r0, r4
    9488:	f7ff feb3 	bl	91f2 <chunk_field>
    948c:	68e3      	ldr	r3, [r4, #12]
    948e:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
    9490:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
    9492:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
    9494:	4283      	cmp	r3, r0
    9496:	d009      	beq.n	94ac <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
    9498:	4629      	mov	r1, r5
    949a:	4620      	mov	r0, r4
    949c:	f7ff fec2 	bl	9224 <right_chunk>
    94a0:	4643      	mov	r3, r8
    94a2:	4601      	mov	r1, r0
    94a4:	2201      	movs	r2, #1
    94a6:	4620      	mov	r0, r4
    94a8:	f7ff feaf 	bl	920a <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
    94ac:	6923      	ldr	r3, [r4, #16]
    94ae:	42ab      	cmp	r3, r5
    94b0:	d046      	beq.n	9540 <sys_heap_free+0x13e>
	return chunk_field(h, c, LEFT_SIZE);
    94b2:	2201      	movs	r2, #1
    94b4:	4629      	mov	r1, r5
    94b6:	4620      	mov	r0, r4
    94b8:	f7ff fe9b 	bl	91f2 <chunk_field>
	return c - left_size(h, c);
    94bc:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
    94be:	2200      	movs	r2, #0
    94c0:	4639      	mov	r1, r7
    94c2:	4620      	mov	r0, r4
    94c4:	f7ff fe95 	bl	91f2 <chunk_field>
    94c8:	f8d4 800c 	ldr.w	r8, [r4, #12]
    94cc:	ea30 0908 	bics.w	r9, r0, r8
    94d0:	4606      	mov	r6, r0
    94d2:	d135      	bne.n	9540 <sys_heap_free+0x13e>
    94d4:	464a      	mov	r2, r9
    94d6:	4629      	mov	r1, r5
    94d8:	4620      	mov	r0, r4
    94da:	f7ff fe8a 	bl	91f2 <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
    94de:	4629      	mov	r1, r5
    94e0:	4682      	mov	sl, r0
    94e2:	4620      	mov	r0, r4
    94e4:	f7ff fe9e 	bl	9224 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    94e8:	68a1      	ldr	r1, [r4, #8]
    94ea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    94ee:	bf34      	ite	cc
    94f0:	2100      	movcc	r1, #0
    94f2:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    94f4:	ea06 0608 	and.w	r6, r6, r8
    94f8:	ea08 080a 	and.w	r8, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
    94fc:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    94fe:	f1c1 011f 	rsb	r1, r1, #31
    9502:	fab6 f686 	clz	r6, r6

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
    9506:	463a      	mov	r2, r7
    9508:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
    950a:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
    950c:	4620      	mov	r0, r4
    950e:	f7ff fe93 	bl	9238 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
    9512:	4643      	mov	r3, r8
    9514:	464a      	mov	r2, r9
    9516:	4639      	mov	r1, r7
    9518:	4620      	mov	r0, r4
    951a:	f7ff fe76 	bl	920a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    951e:	4639      	mov	r1, r7
    9520:	4620      	mov	r0, r4
    9522:	f7ff fe66 	bl	91f2 <chunk_field>
    9526:	68e3      	ldr	r3, [r4, #12]
    9528:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
    952a:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
    952c:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
    952e:	4298      	cmp	r0, r3
    9530:	d005      	beq.n	953e <sys_heap_free+0x13c>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
    9532:	4643      	mov	r3, r8
    9534:	2201      	movs	r2, #1
    9536:	4629      	mov	r1, r5
    9538:	4620      	mov	r0, r4
    953a:	f7ff fe66 	bl	920a <chunk_set>
		}

		c = lc;
    953e:	463d      	mov	r5, r7
    9540:	4629      	mov	r1, r5
    9542:	2200      	movs	r2, #0
    9544:	4620      	mov	r0, r4
    9546:	f7ff fe54 	bl	91f2 <chunk_field>
    954a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
    954c:	4629      	mov	r1, r5
    954e:	4003      	ands	r3, r0
    9550:	2200      	movs	r2, #0
    9552:	4620      	mov	r0, r4
    9554:	f7ff fe59 	bl	920a <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
    9558:	4629      	mov	r1, r5
    955a:	4620      	mov	r0, r4
}
    955c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
    9560:	f7ff be9d 	b.w	929e <free_list_add>
}
    9564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009568 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    9568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
    956c:	6804      	ldr	r4, [r0, #0]
	return big_heap(h) ? 8 : 4;
    956e:	68a2      	ldr	r2, [r4, #8]
    9570:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9574:	bf2c      	ite	cs
    9576:	2308      	movcs	r3, #8
    9578:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    957a:	1dcd      	adds	r5, r1, #7
    957c:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    957e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    9582:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    9586:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    958a:	bf34      	ite	cc
    958c:	2300      	movcc	r3, #0
    958e:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    9590:	441e      	add	r6, r3
    9592:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
    9596:	2900      	cmp	r1, #0
    9598:	d03b      	beq.n	9612 <sys_heap_alloc+0xaa>
    959a:	fab2 f282 	clz	r2, r2
    959e:	f1c3 031f 	rsb	r3, r3, #31
    95a2:	1a9b      	subs	r3, r3, r2
    95a4:	4598      	cmp	r8, r3
    95a6:	dc34      	bgt.n	9612 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
    95a8:	6867      	ldr	r7, [r4, #4]
    95aa:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
    95ae:	f04f 0a00 	mov.w	sl, #0
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	2b03      	cmp	r3, #3
    95b6:	bf28      	it	cs
    95b8:	2303      	movcs	r3, #3
    95ba:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
    95bc:	45ca      	cmp	sl, r9
    95be:	db0d      	blt.n	95dc <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    95c0:	6963      	ldr	r3, [r4, #20]
    95c2:	f1c6 0620 	rsb	r6, r6, #32
    95c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    95ca:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
    95cc:	4019      	ands	r1, r3
    95ce:	d020      	beq.n	9612 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
    95d0:	fa91 f1a1 	rbit	r1, r1
    95d4:	462a      	mov	r2, r5
    95d6:	fab1 f181 	clz	r1, r1
    95da:	e00c      	b.n	95f6 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
    95dc:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    95e0:	2200      	movs	r2, #0
    95e2:	4659      	mov	r1, fp
    95e4:	4620      	mov	r0, r4
    95e6:	f7ff fe04 	bl	91f2 <chunk_field>
    95ea:	68e3      	ldr	r3, [r4, #12]
    95ec:	4018      	ands	r0, r3
    95ee:	42a8      	cmp	r0, r5
    95f0:	d306      	bcc.n	9600 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
    95f2:	462a      	mov	r2, r5
    95f4:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
    95f6:	4620      	mov	r0, r4
	}

	return NULL;
}
    95f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
    95fc:	f7ff be9c 	b.w	9338 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
    9600:	2203      	movs	r2, #3
    9602:	4659      	mov	r1, fp
    9604:	4620      	mov	r0, r4
    9606:	f7ff fdf4 	bl	91f2 <chunk_field>
	for (int i = 0; i < loops; i++) {
    960a:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
    960e:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
    9610:	e7d4      	b.n	95bc <sys_heap_alloc+0x54>
}
    9612:	2000      	movs	r0, #0
    9614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009618 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    9618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    961a:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    961c:	1dcc      	adds	r4, r1, #7
    961e:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    9622:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    9626:	1b1b      	subs	r3, r3, r4
    9628:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    962a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    962e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9632:	bf2c      	ite	cs
    9634:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    9638:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    963a:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
    963c:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    963e:	60e1      	str	r1, [r4, #12]
    9640:	bf94      	ite	ls
    9642:	2100      	movls	r1, #0
    9644:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    9646:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    964a:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    964e:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    9652:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    9654:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    9658:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
    965c:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    965e:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    9660:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    9662:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    9664:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    9666:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    9668:	4684      	mov	ip, r0
    966a:	68a2      	ldr	r2, [r4, #8]
    966c:	42ba      	cmp	r2, r7
    966e:	bf94      	ite	ls
    9670:	2200      	movls	r2, #0
    9672:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    9674:	f1c2 021f 	rsb	r2, r2, #31
    9678:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    967a:	4290      	cmp	r0, r2
    967c:	dd0a      	ble.n	9694 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    967e:	1a5b      	subs	r3, r3, r1
    9680:	4620      	mov	r0, r4
    9682:	2200      	movs	r2, #0
    9684:	f7ff fdc1 	bl	920a <chunk_set>
	free_list_add(h, h->chunk0);
    9688:	6921      	ldr	r1, [r4, #16]
    968a:	4620      	mov	r0, r4
}
    968c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    9690:	f7ff be05 	b.w	929e <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    9694:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    9698:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    969a:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    969e:	e7e4      	b.n	966a <sys_heap_init+0x52>

000096a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    96a0:	4770      	bx	lr

000096a2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    96a2:	2300      	movs	r3, #0
	list->head = NULL;
    96a4:	e9c0 3300 	strd	r3, r3, [r0]
}
    96a8:	4770      	bx	lr

000096aa <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    96aa:	6803      	ldr	r3, [r0, #0]
    96ac:	b923      	cbnz	r3, 96b8 <log_list_add_tail+0xe>
		list->head = msg;
    96ae:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    96b0:	2300      	movs	r3, #0
	list->tail = msg;
    96b2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    96b4:	600b      	str	r3, [r1, #0]
}
    96b6:	4770      	bx	lr
		list->tail->next = msg;
    96b8:	6843      	ldr	r3, [r0, #4]
    96ba:	6019      	str	r1, [r3, #0]
    96bc:	e7f8      	b.n	96b0 <log_list_add_tail+0x6>

000096be <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    96be:	6800      	ldr	r0, [r0, #0]
    96c0:	4770      	bx	lr

000096c2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    96c2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    96c4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    96c6:	b108      	cbz	r0, 96cc <log_list_head_get+0xa>
		list->head = list->head->next;
    96c8:	6802      	ldr	r2, [r0, #0]
    96ca:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    96cc:	4770      	bx	lr

000096ce <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    96ce:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    96d0:	f7f7 fcbe 	bl	1050 <log_msg_chunk_alloc>

	if (msg != NULL) {
    96d4:	b118      	cbz	r0, 96de <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    96d6:	2301      	movs	r3, #1
    96d8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    96da:	2300      	movs	r3, #0
    96dc:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    96de:	bd08      	pop	{r3, pc}

000096e0 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    96e0:	f7f8 b906 	b.w	18f0 <z_timer_cycle_get_32>

000096e4 <dummy_timestamp>:
    96e4:	2000      	movs	r0, #0
    96e6:	4770      	bx	lr

000096e8 <z_log_get_s_mask>:
{
    96e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    96ea:	4605      	mov	r5, r0
	u32_t mask = 0;
    96ec:	2000      	movs	r0, #0
	u32_t arg = 0;
    96ee:	4603      	mov	r3, r0
	bool arm = false;
    96f0:	4602      	mov	r2, r0
				mask |= BIT(arg);
    96f2:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    96f4:	f815 4b01 	ldrb.w	r4, [r5], #1
    96f8:	b10c      	cbz	r4, 96fe <z_log_get_s_mask+0x16>
    96fa:	428b      	cmp	r3, r1
    96fc:	d300      	bcc.n	9700 <z_log_get_s_mask+0x18>
}
    96fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    9700:	2c25      	cmp	r4, #37	; 0x25
    9702:	d102      	bne.n	970a <z_log_get_s_mask+0x22>
			arm = !arm;
    9704:	f082 0201 	eor.w	r2, r2, #1
    9708:	e7f4      	b.n	96f4 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    970a:	2a00      	cmp	r2, #0
    970c:	d0f2      	beq.n	96f4 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    970e:	f044 0620 	orr.w	r6, r4, #32
    9712:	3e61      	subs	r6, #97	; 0x61
    9714:	2e19      	cmp	r6, #25
    9716:	d8ed      	bhi.n	96f4 <z_log_get_s_mask+0xc>
			if (curr == 's') {
    9718:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    971a:	bf04      	itt	eq
    971c:	fa07 f203 	lsleq.w	r2, r7, r3
    9720:	4310      	orreq	r0, r2
			arg++;
    9722:	3301      	adds	r3, #1
			arm = false;
    9724:	2200      	movs	r2, #0
    9726:	e7e5      	b.n	96f4 <z_log_get_s_mask+0xc>

00009728 <log_0>:
{
    9728:	b538      	push	{r3, r4, r5, lr}
    972a:	4605      	mov	r5, r0
    972c:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    972e:	f7ff ffce 	bl	96ce <z_log_msg_std_alloc>

	if (msg != NULL) {
    9732:	b128      	cbz	r0, 9740 <log_0+0x18>
		msg->str = str;
    9734:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    9736:	4621      	mov	r1, r4
}
    9738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    973c:	f7f7 bba2 	b.w	e84 <msg_finalize>
}
    9740:	bd38      	pop	{r3, r4, r5, pc}

00009742 <log_1>:
{
    9742:	b570      	push	{r4, r5, r6, lr}
    9744:	4606      	mov	r6, r0
    9746:	460d      	mov	r5, r1
    9748:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    974a:	f7ff ffc0 	bl	96ce <z_log_msg_std_alloc>

	if (msg != NULL) {
    974e:	b158      	cbz	r0, 9768 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    9750:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    9752:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    9754:	2101      	movs	r1, #1
    9756:	f361 1207 	bfi	r2, r1, #4, #4
    975a:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    975c:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    975e:	4621      	mov	r1, r4
}
    9760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    9764:	f7f7 bb8e 	b.w	e84 <msg_finalize>
}
    9768:	bd70      	pop	{r4, r5, r6, pc}

0000976a <log_2>:
{
    976a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    976e:	4680      	mov	r8, r0
    9770:	460f      	mov	r7, r1
    9772:	4616      	mov	r6, r2
    9774:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    9776:	f7ff ffaa 	bl	96ce <z_log_msg_std_alloc>

	if (msg != NULL) {
    977a:	b168      	cbz	r0, 9798 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    977c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    977e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    9782:	2202      	movs	r2, #2
    9784:	f362 1307 	bfi	r3, r2, #4, #4
    9788:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    978a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    978e:	4629      	mov	r1, r5
}
    9790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    9794:	f7f7 bb76 	b.w	e84 <msg_finalize>
}
    9798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000979c <log_3>:
{
    979c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97a0:	4680      	mov	r8, r0
    97a2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    97a6:	460f      	mov	r7, r1
    97a8:	4616      	mov	r6, r2
    97aa:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    97ac:	f7ff ff8f 	bl	96ce <z_log_msg_std_alloc>

	if (msg != NULL) {
    97b0:	b170      	cbz	r0, 97d0 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    97b2:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    97b4:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    97b8:	2203      	movs	r2, #3
    97ba:	f362 1307 	bfi	r3, r2, #4, #4
    97be:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    97c0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    97c4:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    97c6:	4649      	mov	r1, r9
}
    97c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    97cc:	f7f7 bb5a 	b.w	e84 <msg_finalize>
}
    97d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000097d4 <log_n>:
{
    97d4:	b510      	push	{r4, lr}
    97d6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    97d8:	f000 f89f 	bl	991a <log_msg_create_n>
		if (msg == NULL) {
    97dc:	b120      	cbz	r0, 97e8 <log_n+0x14>
		msg_finalize(msg, src_level);
    97de:	4621      	mov	r1, r4
}
    97e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    97e4:	f7f7 bb4e 	b.w	e84 <msg_finalize>
}
    97e8:	bd10      	pop	{r4, pc}

000097ea <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    97ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97ee:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    97f0:	8903      	ldrh	r3, [r0, #8]
{
    97f2:	f89d 8020 	ldrb.w	r8, [sp, #32]
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    97f6:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
    97fa:	460e      	mov	r6, r1
    97fc:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
    97fe:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
    9802:	d303      	bcc.n	980c <log_msg_hexdump_data_op+0x22>
		*length = 0;
    9804:	2300      	movs	r3, #0
    9806:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    9808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    980c:	680b      	ldr	r3, [r1, #0]
    980e:	4423      	add	r3, r4
    9810:	4293      	cmp	r3, r2
		*length = available_len - offset;
    9812:	bf84      	itt	hi
    9814:	1b13      	subhi	r3, r2, r4
    9816:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    9818:	2a0c      	cmp	r2, #12
	req_len = *length;
    981a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    981e:	d929      	bls.n	9874 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    9820:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    9822:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
    9824:	d82c      	bhi.n	9880 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
    9826:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    9828:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    982a:	454a      	cmp	r2, r9
    982c:	bf28      	it	cs
    982e:	464a      	movcs	r2, r9
    9830:	4615      	mov	r5, r2
		if (put_op) {
    9832:	4420      	add	r0, r4
    9834:	f1b8 0f00 	cmp.w	r8, #0
    9838:	d01f      	beq.n	987a <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
    983a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    983c:	f000 fb7a 	bl	9f34 <memcpy>
		req_len -= cpy_len;
    9840:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    9844:	442e      	add	r6, r5
	while (req_len > 0) {
    9846:	f1b9 0f00 	cmp.w	r9, #0
    984a:	d0dd      	beq.n	9808 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    984c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    9850:	454d      	cmp	r5, r9
    9852:	bf28      	it	cs
    9854:	464d      	movcs	r5, r9
		if (put_op) {
    9856:	1d20      	adds	r0, r4, #4
    9858:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
    985a:	462a      	mov	r2, r5
		if (put_op) {
    985c:	f1b8 0f00 	cmp.w	r8, #0
    9860:	d014      	beq.n	988c <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
    9862:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    9864:	f000 fb66 	bl	9f34 <memcpy>
		req_len -= cpy_len;
    9868:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    986c:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
    986e:	442e      	add	r6, r5
		offset = 0;
    9870:	2400      	movs	r4, #0
    9872:	e7e8      	b.n	9846 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
    9874:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    9876:	2700      	movs	r7, #0
    9878:	e7d7      	b.n	982a <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    987a:	4601      	mov	r1, r0
    987c:	4630      	mov	r0, r6
    987e:	e7dd      	b.n	983c <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
    9880:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    9882:	2c1b      	cmp	r4, #27
    9884:	d9df      	bls.n	9846 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
    9886:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
    9888:	3c1c      	subs	r4, #28
    988a:	e7fa      	b.n	9882 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    988c:	4601      	mov	r1, r0
    988e:	4630      	mov	r0, r6
    9890:	e7e8      	b.n	9864 <log_msg_hexdump_data_op+0x7a>

00009892 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9892:	3004      	adds	r0, #4
    9894:	f3bf 8f5b 	dmb	ish
    9898:	e850 3f00 	ldrex	r3, [r0]
    989c:	3301      	adds	r3, #1
    989e:	e840 3200 	strex	r2, r3, [r0]
    98a2:	2a00      	cmp	r2, #0
    98a4:	d1f8      	bne.n	9898 <log_msg_get+0x6>
    98a6:	f3bf 8f5b 	dmb	ish
}
    98aa:	4770      	bx	lr

000098ac <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    98ac:	7a40      	ldrb	r0, [r0, #9]
}
    98ae:	0900      	lsrs	r0, r0, #4
    98b0:	4770      	bx	lr

000098b2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    98b2:	7a43      	ldrb	r3, [r0, #9]
    98b4:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    98b8:	ea4f 1213 	mov.w	r2, r3, lsr #4
    98bc:	d216      	bcs.n	98ec <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    98be:	2a03      	cmp	r2, #3
    98c0:	d803      	bhi.n	98ca <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    98c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    98c6:	6948      	ldr	r0, [r1, #20]
    98c8:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    98ca:	2901      	cmp	r1, #1
    98cc:	d803      	bhi.n	98d6 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    98ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    98d2:	6988      	ldr	r0, [r1, #24]
    98d4:	4770      	bx	lr
	cont = msg->payload.ext.next;
    98d6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    98d8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    98da:	2906      	cmp	r1, #6
    98dc:	d803      	bhi.n	98e6 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    98de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    98e2:	6848      	ldr	r0, [r1, #4]
    98e4:	4770      	bx	lr
		cont = cont->next;
    98e6:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    98e8:	3907      	subs	r1, #7
		cont = cont->next;
    98ea:	e7f6      	b.n	98da <log_msg_arg_get+0x28>
		return 0;
    98ec:	2000      	movs	r0, #0
}
    98ee:	4770      	bx	lr

000098f0 <log_msg_put>:
{
    98f0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    98f2:	1d02      	adds	r2, r0, #4
    98f4:	f3bf 8f5b 	dmb	ish
    98f8:	e852 1f00 	ldrex	r1, [r2]
    98fc:	3901      	subs	r1, #1
    98fe:	e842 1c00 	strex	ip, r1, [r2]
    9902:	f1bc 0f00 	cmp.w	ip, #0
    9906:	d1f7      	bne.n	98f8 <log_msg_put+0x8>
    9908:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    990c:	685b      	ldr	r3, [r3, #4]
    990e:	b90b      	cbnz	r3, 9914 <log_msg_put+0x24>
		msg_free(msg);
    9910:	f7f7 bbb2 	b.w	1078 <msg_free>
}
    9914:	4770      	bx	lr

00009916 <log_msg_str_get>:
}
    9916:	6900      	ldr	r0, [r0, #16]
    9918:	4770      	bx	lr

0000991a <log_msg_create_n>:
{
    991a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    991e:	4681      	mov	r9, r0
    9920:	4688      	mov	r8, r1
    9922:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    9924:	f7f7 fb94 	bl	1050 <log_msg_chunk_alloc>
	if (msg != NULL) {
    9928:	4604      	mov	r4, r0
    992a:	b330      	cbz	r0, 997a <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    992c:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    992e:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    9930:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    9932:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    9934:	8107      	strh	r7, [r0, #8]
    9936:	d909      	bls.n	994c <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    9938:	2202      	movs	r2, #2
    993a:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    993c:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
    9940:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    9944:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    9946:	f1ba 0f00 	cmp.w	sl, #0
    994a:	dc0e      	bgt.n	996a <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    994c:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    994e:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    9952:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    9956:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    9958:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    995a:	d818      	bhi.n	998e <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    995c:	00aa      	lsls	r2, r5, #2
    995e:	4641      	mov	r1, r8
    9960:	f104 0014 	add.w	r0, r4, #20
    9964:	f000 fae6 	bl	9f34 <memcpy>
	while (nargs != 0U) {
    9968:	e007      	b.n	997a <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    996a:	f7f7 fb71 	bl	1050 <log_msg_chunk_alloc>
		if (cont == NULL) {
    996e:	4606      	mov	r6, r0
    9970:	b930      	cbnz	r0, 9980 <log_msg_create_n+0x66>
			msg_free(msg);
    9972:	4620      	mov	r0, r4
    9974:	f7f7 fb80 	bl	1078 <msg_free>
			return NULL;
    9978:	4634      	mov	r4, r6
}
    997a:	4620      	mov	r0, r4
    997c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    9980:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    9984:	f1aa 0a07 	sub.w	sl, sl, #7
    9988:	6007      	str	r7, [r0, #0]
		next = &cont->next;
    998a:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    998c:	e7db      	b.n	9946 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    998e:	4641      	mov	r1, r8
    9990:	2208      	movs	r2, #8
    9992:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    9996:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    9998:	f000 facc 	bl	9f34 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    999c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    999e:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    99a2:	2d07      	cmp	r5, #7
    99a4:	462e      	mov	r6, r5
    99a6:	bf28      	it	cs
    99a8:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    99aa:	ea4f 0986 	mov.w	r9, r6, lsl #2
    99ae:	4641      	mov	r1, r8
    99b0:	1d38      	adds	r0, r7, #4
    99b2:	464a      	mov	r2, r9
    99b4:	f000 fabe 	bl	9f34 <memcpy>
	while (nargs != 0U) {
    99b8:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    99ba:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    99bc:	44c8      	add	r8, r9
	while (nargs != 0U) {
    99be:	d1f0      	bne.n	99a2 <log_msg_create_n+0x88>
    99c0:	e7db      	b.n	997a <log_msg_create_n+0x60>

000099c2 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    99c2:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    99c4:	2400      	movs	r4, #0
    99c6:	9400      	str	r4, [sp, #0]
    99c8:	f7ff ff0f 	bl	97ea <log_msg_hexdump_data_op>
}
    99cc:	b002      	add	sp, #8
    99ce:	bd10      	pop	{r4, pc}

000099d0 <buffer_write>:
{
    99d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99d2:	4606      	mov	r6, r0
    99d4:	460d      	mov	r5, r1
    99d6:	4614      	mov	r4, r2
    99d8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    99da:	4621      	mov	r1, r4
    99dc:	4628      	mov	r0, r5
    99de:	463a      	mov	r2, r7
    99e0:	47b0      	blx	r6
	} while (len != 0);
    99e2:	1a24      	subs	r4, r4, r0
		buf += processed;
    99e4:	4405      	add	r5, r0
	} while (len != 0);
    99e6:	d1f8      	bne.n	99da <buffer_write+0xa>
}
    99e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000099ea <std_print>:
{
    99ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99ee:	b08e      	sub	sp, #56	; 0x38
    99f0:	af0e      	add	r7, sp, #56	; 0x38
    99f2:	4680      	mov	r8, r0
    99f4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    99f6:	f7ff ff8e 	bl	9916 <log_msg_str_get>
    99fa:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    99fc:	4640      	mov	r0, r8
    99fe:	f7ff ff55 	bl	98ac <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    9a02:	0083      	lsls	r3, r0, #2
    9a04:	3307      	adds	r3, #7
    9a06:	f023 0307 	bic.w	r3, r3, #7
    9a0a:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
    9a0e:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    9a10:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    9a12:	f04f 0900 	mov.w	r9, #0
    9a16:	45d1      	cmp	r9, sl
    9a18:	d116      	bne.n	9a48 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    9a1a:	4640      	mov	r0, r8
    9a1c:	f7ff ff46 	bl	98ac <log_msg_nargs_get>
    9a20:	280f      	cmp	r0, #15
    9a22:	d81e      	bhi.n	9a62 <std_print+0x78>
    9a24:	e8df f010 	tbh	[pc, r0, lsl #1]
    9a28:	00200019 	.word	0x00200019
    9a2c:	002d0026 	.word	0x002d0026
    9a30:	00410036 	.word	0x00410036
    9a34:	005d004e 	.word	0x005d004e
    9a38:	0081006e 	.word	0x0081006e
    9a3c:	00ad0096 	.word	0x00ad0096
    9a40:	00e100c6 	.word	0x00e100c6
    9a44:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    9a48:	4649      	mov	r1, r9
    9a4a:	4640      	mov	r0, r8
    9a4c:	f7ff ff31 	bl	98b2 <log_msg_arg_get>
    9a50:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    9a54:	f109 0901 	add.w	r9, r9, #1
    9a58:	e7dd      	b.n	9a16 <std_print+0x2c>
		print_formatted(log_output, str);
    9a5a:	4631      	mov	r1, r6
    9a5c:	4628      	mov	r0, r5
    9a5e:	f7f7 fb49 	bl	10f4 <print_formatted>
}
    9a62:	46bd      	mov	sp, r7
    9a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    9a68:	6822      	ldr	r2, [r4, #0]
    9a6a:	4631      	mov	r1, r6
    9a6c:	4628      	mov	r0, r5
    9a6e:	f7f7 fb41 	bl	10f4 <print_formatted>
		break;
    9a72:	e7f6      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    9a74:	e9d4 2300 	ldrd	r2, r3, [r4]
    9a78:	4631      	mov	r1, r6
    9a7a:	4628      	mov	r0, r5
    9a7c:	f7f7 fb3a 	bl	10f4 <print_formatted>
		break;
    9a80:	e7ef      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    9a82:	68a3      	ldr	r3, [r4, #8]
    9a84:	9300      	str	r3, [sp, #0]
    9a86:	e9d4 2300 	ldrd	r2, r3, [r4]
    9a8a:	4631      	mov	r1, r6
    9a8c:	4628      	mov	r0, r5
    9a8e:	f7f7 fb31 	bl	10f4 <print_formatted>
		break;
    9a92:	e7e6      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9a94:	68e3      	ldr	r3, [r4, #12]
    9a96:	9301      	str	r3, [sp, #4]
    9a98:	68a3      	ldr	r3, [r4, #8]
    9a9a:	9300      	str	r3, [sp, #0]
    9a9c:	e9d4 2300 	ldrd	r2, r3, [r4]
    9aa0:	4631      	mov	r1, r6
    9aa2:	4628      	mov	r0, r5
    9aa4:	f7f7 fb26 	bl	10f4 <print_formatted>
		break;
    9aa8:	e7db      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9aaa:	6923      	ldr	r3, [r4, #16]
    9aac:	9302      	str	r3, [sp, #8]
    9aae:	68e3      	ldr	r3, [r4, #12]
    9ab0:	9301      	str	r3, [sp, #4]
    9ab2:	68a3      	ldr	r3, [r4, #8]
    9ab4:	9300      	str	r3, [sp, #0]
    9ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
    9aba:	4631      	mov	r1, r6
    9abc:	4628      	mov	r0, r5
    9abe:	f7f7 fb19 	bl	10f4 <print_formatted>
		break;
    9ac2:	e7ce      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9ac4:	6963      	ldr	r3, [r4, #20]
    9ac6:	9303      	str	r3, [sp, #12]
    9ac8:	6923      	ldr	r3, [r4, #16]
    9aca:	9302      	str	r3, [sp, #8]
    9acc:	68e3      	ldr	r3, [r4, #12]
    9ace:	9301      	str	r3, [sp, #4]
    9ad0:	68a3      	ldr	r3, [r4, #8]
    9ad2:	9300      	str	r3, [sp, #0]
    9ad4:	e9d4 2300 	ldrd	r2, r3, [r4]
    9ad8:	4631      	mov	r1, r6
    9ada:	4628      	mov	r0, r5
    9adc:	f7f7 fb0a 	bl	10f4 <print_formatted>
		break;
    9ae0:	e7bf      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9ae2:	69a3      	ldr	r3, [r4, #24]
    9ae4:	9304      	str	r3, [sp, #16]
    9ae6:	6963      	ldr	r3, [r4, #20]
    9ae8:	9303      	str	r3, [sp, #12]
    9aea:	6923      	ldr	r3, [r4, #16]
    9aec:	9302      	str	r3, [sp, #8]
    9aee:	68e3      	ldr	r3, [r4, #12]
    9af0:	9301      	str	r3, [sp, #4]
    9af2:	68a3      	ldr	r3, [r4, #8]
    9af4:	9300      	str	r3, [sp, #0]
    9af6:	e9d4 2300 	ldrd	r2, r3, [r4]
    9afa:	4631      	mov	r1, r6
    9afc:	4628      	mov	r0, r5
    9afe:	f7f7 faf9 	bl	10f4 <print_formatted>
		break;
    9b02:	e7ae      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9b04:	69e3      	ldr	r3, [r4, #28]
    9b06:	9305      	str	r3, [sp, #20]
    9b08:	69a3      	ldr	r3, [r4, #24]
    9b0a:	9304      	str	r3, [sp, #16]
    9b0c:	6963      	ldr	r3, [r4, #20]
    9b0e:	9303      	str	r3, [sp, #12]
    9b10:	6923      	ldr	r3, [r4, #16]
    9b12:	9302      	str	r3, [sp, #8]
    9b14:	68e3      	ldr	r3, [r4, #12]
    9b16:	9301      	str	r3, [sp, #4]
    9b18:	68a3      	ldr	r3, [r4, #8]
    9b1a:	9300      	str	r3, [sp, #0]
    9b1c:	e9d4 2300 	ldrd	r2, r3, [r4]
    9b20:	4631      	mov	r1, r6
    9b22:	4628      	mov	r0, r5
    9b24:	f7f7 fae6 	bl	10f4 <print_formatted>
		break;
    9b28:	e79b      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9b2a:	6a23      	ldr	r3, [r4, #32]
    9b2c:	9306      	str	r3, [sp, #24]
    9b2e:	69e3      	ldr	r3, [r4, #28]
    9b30:	9305      	str	r3, [sp, #20]
    9b32:	69a3      	ldr	r3, [r4, #24]
    9b34:	9304      	str	r3, [sp, #16]
    9b36:	6963      	ldr	r3, [r4, #20]
    9b38:	9303      	str	r3, [sp, #12]
    9b3a:	6923      	ldr	r3, [r4, #16]
    9b3c:	9302      	str	r3, [sp, #8]
    9b3e:	68e3      	ldr	r3, [r4, #12]
    9b40:	9301      	str	r3, [sp, #4]
    9b42:	68a3      	ldr	r3, [r4, #8]
    9b44:	9300      	str	r3, [sp, #0]
    9b46:	e9d4 2300 	ldrd	r2, r3, [r4]
    9b4a:	4631      	mov	r1, r6
    9b4c:	4628      	mov	r0, r5
    9b4e:	f7f7 fad1 	bl	10f4 <print_formatted>
		break;
    9b52:	e786      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b56:	9307      	str	r3, [sp, #28]
    9b58:	6a23      	ldr	r3, [r4, #32]
    9b5a:	9306      	str	r3, [sp, #24]
    9b5c:	69e3      	ldr	r3, [r4, #28]
    9b5e:	9305      	str	r3, [sp, #20]
    9b60:	69a3      	ldr	r3, [r4, #24]
    9b62:	9304      	str	r3, [sp, #16]
    9b64:	6963      	ldr	r3, [r4, #20]
    9b66:	9303      	str	r3, [sp, #12]
    9b68:	6923      	ldr	r3, [r4, #16]
    9b6a:	9302      	str	r3, [sp, #8]
    9b6c:	68e3      	ldr	r3, [r4, #12]
    9b6e:	9301      	str	r3, [sp, #4]
    9b70:	68a3      	ldr	r3, [r4, #8]
    9b72:	9300      	str	r3, [sp, #0]
    9b74:	e9d4 2300 	ldrd	r2, r3, [r4]
    9b78:	4631      	mov	r1, r6
    9b7a:	4628      	mov	r0, r5
    9b7c:	f7f7 faba 	bl	10f4 <print_formatted>
		break;
    9b80:	e76f      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9b84:	9308      	str	r3, [sp, #32]
    9b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b88:	9307      	str	r3, [sp, #28]
    9b8a:	6a23      	ldr	r3, [r4, #32]
    9b8c:	9306      	str	r3, [sp, #24]
    9b8e:	69e3      	ldr	r3, [r4, #28]
    9b90:	9305      	str	r3, [sp, #20]
    9b92:	69a3      	ldr	r3, [r4, #24]
    9b94:	9304      	str	r3, [sp, #16]
    9b96:	6963      	ldr	r3, [r4, #20]
    9b98:	9303      	str	r3, [sp, #12]
    9b9a:	6923      	ldr	r3, [r4, #16]
    9b9c:	9302      	str	r3, [sp, #8]
    9b9e:	68e3      	ldr	r3, [r4, #12]
    9ba0:	9301      	str	r3, [sp, #4]
    9ba2:	68a3      	ldr	r3, [r4, #8]
    9ba4:	9300      	str	r3, [sp, #0]
    9ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
    9baa:	4631      	mov	r1, r6
    9bac:	4628      	mov	r0, r5
    9bae:	f7f7 faa1 	bl	10f4 <print_formatted>
		break;
    9bb2:	e756      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9bb6:	9309      	str	r3, [sp, #36]	; 0x24
    9bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9bba:	9308      	str	r3, [sp, #32]
    9bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9bbe:	9307      	str	r3, [sp, #28]
    9bc0:	6a23      	ldr	r3, [r4, #32]
    9bc2:	9306      	str	r3, [sp, #24]
    9bc4:	69e3      	ldr	r3, [r4, #28]
    9bc6:	9305      	str	r3, [sp, #20]
    9bc8:	69a3      	ldr	r3, [r4, #24]
    9bca:	9304      	str	r3, [sp, #16]
    9bcc:	6963      	ldr	r3, [r4, #20]
    9bce:	9303      	str	r3, [sp, #12]
    9bd0:	6923      	ldr	r3, [r4, #16]
    9bd2:	9302      	str	r3, [sp, #8]
    9bd4:	68e3      	ldr	r3, [r4, #12]
    9bd6:	9301      	str	r3, [sp, #4]
    9bd8:	68a3      	ldr	r3, [r4, #8]
    9bda:	9300      	str	r3, [sp, #0]
    9bdc:	e9d4 2300 	ldrd	r2, r3, [r4]
    9be0:	4631      	mov	r1, r6
    9be2:	4628      	mov	r0, r5
    9be4:	f7f7 fa86 	bl	10f4 <print_formatted>
		break;
    9be8:	e73b      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9bea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9bec:	930a      	str	r3, [sp, #40]	; 0x28
    9bee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9bf0:	9309      	str	r3, [sp, #36]	; 0x24
    9bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9bf4:	9308      	str	r3, [sp, #32]
    9bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9bf8:	9307      	str	r3, [sp, #28]
    9bfa:	6a23      	ldr	r3, [r4, #32]
    9bfc:	9306      	str	r3, [sp, #24]
    9bfe:	69e3      	ldr	r3, [r4, #28]
    9c00:	9305      	str	r3, [sp, #20]
    9c02:	69a3      	ldr	r3, [r4, #24]
    9c04:	9304      	str	r3, [sp, #16]
    9c06:	6963      	ldr	r3, [r4, #20]
    9c08:	9303      	str	r3, [sp, #12]
    9c0a:	6923      	ldr	r3, [r4, #16]
    9c0c:	9302      	str	r3, [sp, #8]
    9c0e:	68e3      	ldr	r3, [r4, #12]
    9c10:	9301      	str	r3, [sp, #4]
    9c12:	68a3      	ldr	r3, [r4, #8]
    9c14:	9300      	str	r3, [sp, #0]
    9c16:	e9d4 2300 	ldrd	r2, r3, [r4]
    9c1a:	4631      	mov	r1, r6
    9c1c:	4628      	mov	r0, r5
    9c1e:	f7f7 fa69 	bl	10f4 <print_formatted>
		break;
    9c22:	e71e      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9c26:	930b      	str	r3, [sp, #44]	; 0x2c
    9c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9c2a:	930a      	str	r3, [sp, #40]	; 0x28
    9c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9c2e:	9309      	str	r3, [sp, #36]	; 0x24
    9c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c32:	9308      	str	r3, [sp, #32]
    9c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c36:	9307      	str	r3, [sp, #28]
    9c38:	6a23      	ldr	r3, [r4, #32]
    9c3a:	9306      	str	r3, [sp, #24]
    9c3c:	69e3      	ldr	r3, [r4, #28]
    9c3e:	9305      	str	r3, [sp, #20]
    9c40:	69a3      	ldr	r3, [r4, #24]
    9c42:	9304      	str	r3, [sp, #16]
    9c44:	6963      	ldr	r3, [r4, #20]
    9c46:	9303      	str	r3, [sp, #12]
    9c48:	6923      	ldr	r3, [r4, #16]
    9c4a:	9302      	str	r3, [sp, #8]
    9c4c:	68e3      	ldr	r3, [r4, #12]
    9c4e:	9301      	str	r3, [sp, #4]
    9c50:	68a3      	ldr	r3, [r4, #8]
    9c52:	9300      	str	r3, [sp, #0]
    9c54:	e9d4 2300 	ldrd	r2, r3, [r4]
    9c58:	4631      	mov	r1, r6
    9c5a:	4628      	mov	r0, r5
    9c5c:	f7f7 fa4a 	bl	10f4 <print_formatted>
		break;
    9c60:	e6ff      	b.n	9a62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    9c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9c64:	930c      	str	r3, [sp, #48]	; 0x30
    9c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9c68:	930b      	str	r3, [sp, #44]	; 0x2c
    9c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9c6c:	930a      	str	r3, [sp, #40]	; 0x28
    9c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9c70:	9309      	str	r3, [sp, #36]	; 0x24
    9c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c74:	9308      	str	r3, [sp, #32]
    9c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c78:	9307      	str	r3, [sp, #28]
    9c7a:	6a23      	ldr	r3, [r4, #32]
    9c7c:	9306      	str	r3, [sp, #24]
    9c7e:	69e3      	ldr	r3, [r4, #28]
    9c80:	9305      	str	r3, [sp, #20]
    9c82:	69a3      	ldr	r3, [r4, #24]
    9c84:	9304      	str	r3, [sp, #16]
    9c86:	6963      	ldr	r3, [r4, #20]
    9c88:	9303      	str	r3, [sp, #12]
    9c8a:	6923      	ldr	r3, [r4, #16]
    9c8c:	9302      	str	r3, [sp, #8]
    9c8e:	68e3      	ldr	r3, [r4, #12]
    9c90:	9301      	str	r3, [sp, #4]
    9c92:	68a3      	ldr	r3, [r4, #8]
    9c94:	9300      	str	r3, [sp, #0]
    9c96:	e9d4 2300 	ldrd	r2, r3, [r4]
    9c9a:	4631      	mov	r1, r6
    9c9c:	4628      	mov	r0, r5
    9c9e:	f7f7 fa29 	bl	10f4 <print_formatted>
}
    9ca2:	e6de      	b.n	9a62 <std_print+0x78>

00009ca4 <log_output_flush>:
		     log_output->control_block->offset,
    9ca4:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    9ca6:	6881      	ldr	r1, [r0, #8]
{
    9ca8:	b510      	push	{r4, lr}
    9caa:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    9cac:	e9d2 2300 	ldrd	r2, r3, [r2]
    9cb0:	6800      	ldr	r0, [r0, #0]
    9cb2:	f7ff fe8d 	bl	99d0 <buffer_write>
	log_output->control_block->offset = 0;
    9cb6:	6863      	ldr	r3, [r4, #4]
    9cb8:	2200      	movs	r2, #0
    9cba:	601a      	str	r2, [r3, #0]
}
    9cbc:	bd10      	pop	{r4, pc}

00009cbe <out_func>:
{
    9cbe:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    9cc0:	684b      	ldr	r3, [r1, #4]
    9cc2:	681a      	ldr	r2, [r3, #0]
    9cc4:	68cb      	ldr	r3, [r1, #12]
    9cc6:	429a      	cmp	r2, r3
{
    9cc8:	4605      	mov	r5, r0
    9cca:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    9ccc:	d102      	bne.n	9cd4 <out_func+0x16>
		log_output_flush(out_ctx);
    9cce:	4608      	mov	r0, r1
    9cd0:	f7ff ffe8 	bl	9ca4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9cd4:	6863      	ldr	r3, [r4, #4]
    9cd6:	f3bf 8f5b 	dmb	ish
    9cda:	e853 2f00 	ldrex	r2, [r3]
    9cde:	1c51      	adds	r1, r2, #1
    9ce0:	e843 1000 	strex	r0, r1, [r3]
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d1f8      	bne.n	9cda <out_func+0x1c>
    9ce8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
    9cec:	68a3      	ldr	r3, [r4, #8]
    9cee:	549d      	strb	r5, [r3, r2]
}
    9cf0:	2000      	movs	r0, #0
    9cf2:	bd38      	pop	{r3, r4, r5, pc}

00009cf4 <char_out>:
{
    9cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cf6:	460d      	mov	r5, r1
    9cf8:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    9cfa:	4604      	mov	r4, r0
    9cfc:	1847      	adds	r7, r0, r1
    9cfe:	42bc      	cmp	r4, r7
    9d00:	d101      	bne.n	9d06 <char_out+0x12>
}
    9d02:	4628      	mov	r0, r5
    9d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    9d06:	f814 1b01 	ldrb.w	r1, [r4], #1
    9d0a:	68b3      	ldr	r3, [r6, #8]
    9d0c:	4630      	mov	r0, r6
    9d0e:	685b      	ldr	r3, [r3, #4]
    9d10:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    9d12:	e7f4      	b.n	9cfe <char_out+0xa>

00009d14 <get_status>:
	data = get_sub_data(dev, type);
    9d14:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    9d16:	b2c9      	uxtb	r1, r1
	if (data->started) {
    9d18:	220c      	movs	r2, #12
    9d1a:	fb02 3101 	mla	r1, r2, r1, r3
    9d1e:	7a4b      	ldrb	r3, [r1, #9]
    9d20:	b923      	cbnz	r3, 9d2c <get_status+0x18>
	if (data->ref > 0) {
    9d22:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    9d24:	fab0 f080 	clz	r0, r0
    9d28:	0940      	lsrs	r0, r0, #5
    9d2a:	4770      	bx	lr
    9d2c:	2002      	movs	r0, #2
}
    9d2e:	4770      	bx	lr

00009d30 <clock_stop>:
{
    9d30:	b570      	push	{r4, r5, r6, lr}
    9d32:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    9d34:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    9d36:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    9d38:	f04f 0320 	mov.w	r3, #32
    9d3c:	f3ef 8611 	mrs	r6, BASEPRI
    9d40:	f383 8811 	msr	BASEPRI, r3
    9d44:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    9d48:	220c      	movs	r2, #12
    9d4a:	434a      	muls	r2, r1
    9d4c:	18ab      	adds	r3, r5, r2
    9d4e:	7a18      	ldrb	r0, [r3, #8]
    9d50:	b190      	cbz	r0, 9d78 <clock_stop+0x48>
	data->ref--;
    9d52:	3801      	subs	r0, #1
    9d54:	b2c0      	uxtb	r0, r0
    9d56:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    9d58:	b988      	cbnz	r0, 9d7e <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    9d5a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
    9d5e:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d60:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
    9d62:	6058      	str	r0, [r3, #4]
    9d64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9d68:	2101      	movs	r1, #1
    9d6a:	6011      	str	r1, [r2, #0]
		data->started = false;
    9d6c:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    9d6e:	f386 8811 	msr	BASEPRI, r6
    9d72:	f3bf 8f6f 	isb	sy
}
    9d76:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    9d78:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9d7c:	e7f7      	b.n	9d6e <clock_stop+0x3e>
	int err = 0;
    9d7e:	2000      	movs	r0, #0
    9d80:	e7f5      	b.n	9d6e <clock_stop+0x3e>

00009d82 <clock_async_start>:
{
    9d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    9d86:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    9d88:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    9d8c:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    9d8e:	b14a      	cbz	r2, 9da4 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    9d90:	230c      	movs	r3, #12
    9d92:	437b      	muls	r3, r7
    9d94:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    9d98:	429a      	cmp	r2, r3
    9d9a:	d052      	beq.n	9e42 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9d9c:	b113      	cbz	r3, 9da4 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9d9e:	681b      	ldr	r3, [r3, #0]
	} while (item);
    9da0:	2b00      	cmp	r3, #0
    9da2:	d1f9      	bne.n	9d98 <clock_async_start+0x16>
	__asm__ volatile(
    9da4:	f04f 0320 	mov.w	r3, #32
    9da8:	f3ef 8c11 	mrs	ip, BASEPRI
    9dac:	f383 8811 	msr	BASEPRI, r3
    9db0:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    9db4:	250c      	movs	r5, #12
    9db6:	437d      	muls	r5, r7
    9db8:	eb0e 0305 	add.w	r3, lr, r5
    9dbc:	7a1c      	ldrb	r4, [r3, #8]
    9dbe:	3401      	adds	r4, #1
    9dc0:	b2e4      	uxtb	r4, r4
    9dc2:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    9dc4:	f38c 8811 	msr	BASEPRI, ip
    9dc8:	f3bf 8f6f 	isb	sy
	if (data) {
    9dcc:	b35a      	cbz	r2, 9e26 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    9dce:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    9dd2:	f04f 0803 	mov.w	r8, #3
    9dd6:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    9dda:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    9dde:	f1bc 0f00 	cmp.w	ip, #0
    9de2:	d115      	bne.n	9e10 <clock_async_start+0x8e>
	__asm__ volatile(
    9de4:	f04f 0820 	mov.w	r8, #32
    9de8:	f3ef 8911 	mrs	r9, BASEPRI
    9dec:	f388 8811 	msr	BASEPRI, r8
    9df0:	f3bf 8f6f 	isb	sy
	parent->next = child;
    9df4:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    9df8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    9dfc:	f1b8 0f00 	cmp.w	r8, #0
    9e00:	d11b      	bne.n	9e3a <clock_async_start+0xb8>
	list->tail = node;
    9e02:	605a      	str	r2, [r3, #4]
	list->head = node;
    9e04:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    9e08:	f389 8811 	msr	BASEPRI, r9
    9e0c:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    9e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e14:	2503      	movs	r5, #3
    9e16:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    9e1a:	f1bc 0f00 	cmp.w	ip, #0
    9e1e:	d002      	beq.n	9e26 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    9e20:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    9e24:	4798      	blx	r3
	if (ref == 1) {
    9e26:	2c01      	cmp	r4, #1
    9e28:	d105      	bne.n	9e36 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    9e2a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e2e:	78b3      	ldrb	r3, [r6, #2]
    9e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9e34:	601c      	str	r4, [r3, #0]
	return 0;
    9e36:	2000      	movs	r0, #0
    9e38:	e005      	b.n	9e46 <clock_async_start+0xc4>
	parent->next = child;
    9e3a:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    9e3e:	605a      	str	r2, [r3, #4]
}
    9e40:	e7e2      	b.n	9e08 <clock_async_start+0x86>
		return -EBUSY;
    9e42:	f06f 000f 	mvn.w	r0, #15
}
    9e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009e4a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    9e4a:	2200      	movs	r2, #0
    9e4c:	f7ff bf99 	b.w	9d82 <clock_async_start>

00009e50 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9e50:	2200      	movs	r2, #0
{
    9e52:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9e54:	2101      	movs	r1, #1
{
    9e56:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9e58:	4610      	mov	r0, r2
    9e5a:	f7f7 fe69 	bl	1b30 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    9e5e:	2000      	movs	r0, #0
    9e60:	f7f7 fe34 	bl	1acc <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e68:	2201      	movs	r2, #1
    9e6a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    9e6e:	2203      	movs	r2, #3
    9e70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    9e74:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
    9e76:	2000      	movs	r0, #0
	list->tail = NULL;
    9e78:	e9c3 0000 	strd	r0, r0, [r3]
    9e7c:	68e3      	ldr	r3, [r4, #12]
    9e7e:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    9e82:	bd10      	pop	{r4, pc}

00009e84 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    9e84:	4770      	bx	lr

00009e86 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    9e86:	4770      	bx	lr

00009e88 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9e88:	f7f7 bd4c 	b.w	1924 <_DoInit>

00009e8c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    9e8c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9e8e:	f7ff fffb 	bl	9e88 <SEGGER_RTT_Init>

	return 0;
}
    9e92:	2000      	movs	r0, #0
    9e94:	bd08      	pop	{r3, pc}

00009e96 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9e96:	2100      	movs	r1, #0
    9e98:	2001      	movs	r0, #1
    9e9a:	f7f7 beb9 	b.w	1c10 <z_arm_fatal_error>

00009e9e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    9e9e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    9ea0:	6800      	ldr	r0, [r0, #0]
    9ea2:	f7f7 beb5 	b.w	1c10 <z_arm_fatal_error>

00009ea6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    9ea6:	b508      	push	{r3, lr}
	handler();
    9ea8:	f7f7 feea 	bl	1c80 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9eb0:	f7f8 b952 	b.w	2158 <z_arm_exc_exit>

00009eb4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    9eb4:	3901      	subs	r1, #1
    9eb6:	4603      	mov	r3, r0
    9eb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    9ebc:	b90a      	cbnz	r2, 9ec2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    9ebe:	701a      	strb	r2, [r3, #0]

	return dest;
}
    9ec0:	4770      	bx	lr
		*d = *s;
    9ec2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    9ec6:	e7f7      	b.n	9eb8 <strcpy+0x4>

00009ec8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    9ec8:	b570      	push	{r4, r5, r6, lr}
    9eca:	3901      	subs	r1, #1
    9ecc:	4605      	mov	r5, r0
    9ece:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    9ed0:	b142      	cbz	r2, 9ee4 <strncpy+0x1c>
    9ed2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    9ed6:	1e56      	subs	r6, r2, #1
    9ed8:	b92b      	cbnz	r3, 9ee6 <strncpy+0x1e>
    9eda:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    9edc:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    9ee0:	42a2      	cmp	r2, r4
    9ee2:	d1fb      	bne.n	9edc <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    9ee4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    9ee6:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    9eea:	4632      	mov	r2, r6
    9eec:	e7ef      	b.n	9ece <strncpy+0x6>

00009eee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9eee:	4603      	mov	r3, r0
	size_t n = 0;
    9ef0:	2000      	movs	r0, #0

	while (*s != '\0') {
    9ef2:	5c1a      	ldrb	r2, [r3, r0]
    9ef4:	b902      	cbnz	r2, 9ef8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9ef6:	4770      	bx	lr
		n++;
    9ef8:	3001      	adds	r0, #1
    9efa:	e7fa      	b.n	9ef2 <strlen+0x4>

00009efc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9efc:	1e43      	subs	r3, r0, #1
    9efe:	3901      	subs	r1, #1
    9f00:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9f04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9f08:	4282      	cmp	r2, r0
    9f0a:	d101      	bne.n	9f10 <strcmp+0x14>
    9f0c:	2a00      	cmp	r2, #0
    9f0e:	d1f7      	bne.n	9f00 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9f10:	1a10      	subs	r0, r2, r0
    9f12:	4770      	bx	lr

00009f14 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    9f14:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    9f16:	b15a      	cbz	r2, 9f30 <memcmp+0x1c>
    9f18:	3901      	subs	r1, #1
    9f1a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    9f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9f20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    9f24:	42a0      	cmp	r0, r4
    9f26:	d001      	beq.n	9f2c <memcmp+0x18>
    9f28:	429a      	cmp	r2, r3
    9f2a:	d0f7      	beq.n	9f1c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    9f2c:	1ad0      	subs	r0, r2, r3
}
    9f2e:	bd10      	pop	{r4, pc}
		return 0;
    9f30:	4610      	mov	r0, r2
    9f32:	e7fc      	b.n	9f2e <memcmp+0x1a>

00009f34 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    9f34:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    9f36:	ea81 0400 	eor.w	r4, r1, r0
    9f3a:	07a5      	lsls	r5, r4, #30
    9f3c:	4603      	mov	r3, r0
    9f3e:	d00b      	beq.n	9f58 <memcpy+0x24>
    9f40:	3b01      	subs	r3, #1
    9f42:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    9f44:	4291      	cmp	r1, r2
    9f46:	d11b      	bne.n	9f80 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    9f4a:	2a00      	cmp	r2, #0
    9f4c:	d0fc      	beq.n	9f48 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    9f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
    9f52:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    9f56:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    9f58:	079c      	lsls	r4, r3, #30
    9f5a:	d1f6      	bne.n	9f4a <memcpy+0x16>
    9f5c:	f022 0403 	bic.w	r4, r2, #3
    9f60:	1f1d      	subs	r5, r3, #4
    9f62:	0896      	lsrs	r6, r2, #2
    9f64:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    9f66:	42b9      	cmp	r1, r7
    9f68:	d105      	bne.n	9f76 <memcpy+0x42>
    9f6a:	f06f 0503 	mvn.w	r5, #3
    9f6e:	fb05 2206 	mla	r2, r5, r6, r2
    9f72:	4423      	add	r3, r4
    9f74:	e7e4      	b.n	9f40 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    9f76:	f851 cb04 	ldr.w	ip, [r1], #4
    9f7a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    9f7e:	e7f2      	b.n	9f66 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    9f80:	f811 4b01 	ldrb.w	r4, [r1], #1
    9f84:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9f88:	e7dc      	b.n	9f44 <memcpy+0x10>

00009f8a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    9f8a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9f8c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    9f8e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    9f90:	079c      	lsls	r4, r3, #30
    9f92:	d111      	bne.n	9fb8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    9f94:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    9f98:	f022 0603 	bic.w	r6, r2, #3
    9f9c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    9fa0:	441e      	add	r6, r3
    9fa2:	0894      	lsrs	r4, r2, #2
    9fa4:	42b3      	cmp	r3, r6
    9fa6:	d10d      	bne.n	9fc4 <memset+0x3a>
    9fa8:	f06f 0503 	mvn.w	r5, #3
    9fac:	fb05 2204 	mla	r2, r5, r4, r2
    9fb0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    9fb2:	4293      	cmp	r3, r2
    9fb4:	d109      	bne.n	9fca <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9fb6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    9fb8:	2a00      	cmp	r2, #0
    9fba:	d0fc      	beq.n	9fb6 <memset+0x2c>
		*(d_byte++) = c_byte;
    9fbc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9fc0:	3a01      	subs	r2, #1
    9fc2:	e7e5      	b.n	9f90 <memset+0x6>
		*(d_word++) = c_word;
    9fc4:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    9fc8:	e7ec      	b.n	9fa4 <memset+0x1a>
		*(d_byte++) = c_byte;
    9fca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9fce:	e7f0      	b.n	9fb2 <memset+0x28>

00009fd0 <_stdout_hook_default>:
}
    9fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9fd4:	4770      	bx	lr

00009fd6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    9fd6:	f7fd be5b 	b.w	7c90 <SystemInit>

00009fda <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fda:	f3bf 8f5b 	dmb	ish
    9fde:	6800      	ldr	r0, [r0, #0]
    9fe0:	f3bf 8f5b 	dmb	ish
}
    9fe4:	4770      	bx	lr

00009fe6 <bt_addr_le_copy>:
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9fe6:	2207      	movs	r2, #7
    9fe8:	f7ff bfa4 	b.w	9f34 <memcpy>

00009fec <atomic_and>:
{
    9fec:	4603      	mov	r3, r0
}
    9fee:	f3bf 8f5b 	dmb	ish
    9ff2:	e853 0f00 	ldrex	r0, [r3]
    9ff6:	ea00 0201 	and.w	r2, r0, r1
    9ffa:	e843 2c00 	strex	ip, r2, [r3]
    9ffe:	f1bc 0f00 	cmp.w	ip, #0
    a002:	d1f6      	bne.n	9ff2 <atomic_and+0x6>
    a004:	f3bf 8f5b 	dmb	ish
    a008:	4770      	bx	lr

0000a00a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
    a00a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
    a00c:	2301      	movs	r3, #1
    a00e:	f001 041f 	and.w	r4, r1, #31
    a012:	0949      	lsrs	r1, r1, #5
    a014:	40a3      	lsls	r3, r4

	if (val) {
    a016:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a01a:	b162      	cbz	r2, a036 <atomic_set_bit_to+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a01c:	f3bf 8f5b 	dmb	ish
    a020:	e850 2f00 	ldrex	r2, [r0]
    a024:	431a      	orrs	r2, r3
    a026:	e840 2100 	strex	r1, r2, [r0]
    a02a:	2900      	cmp	r1, #0
    a02c:	d1f8      	bne.n	a020 <atomic_set_bit_to+0x16>
    a02e:	f3bf 8f5b 	dmb	ish
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
    a032:	bc10      	pop	{r4}
    a034:	4770      	bx	lr
    a036:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a038:	43d9      	mvns	r1, r3
    a03a:	f7ff bfd7 	b.w	9fec <atomic_and>

0000a03e <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    a03e:	2301      	movs	r3, #1
{
    a040:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    a042:	2106      	movs	r1, #6
{
    a044:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    a046:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    a04a:	f000 fb06 	bl	a65a <bt_rand>
	if (err) {
    a04e:	b918      	cbnz	r0, a058 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    a050:	79a3      	ldrb	r3, [r4, #6]
    a052:	f063 033f 	orn	r3, r3, #63	; 0x3f
    a056:	71a3      	strb	r3, [r4, #6]
}
    a058:	bd10      	pop	{r4, pc}

0000a05a <bt_le_adv_start>:
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
    a05a:	f7f9 bbb1 	b.w	37c0 <bt_le_adv_start_legacy>

0000a05e <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    a060:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a062:	1dc3      	adds	r3, r0, #7
    a064:	f023 0303 	bic.w	r3, r3, #3
{
    a068:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a06a:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a06c:	3a01      	subs	r2, #1
    a06e:	b294      	uxth	r4, r2
{
    a070:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a072:	2204      	movs	r2, #4
    a074:	2100      	movs	r1, #0
    a076:	fb06 0004 	mla	r0, r6, r4, r0
    a07a:	f7ff ff86 	bl	9f8a <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    a07e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    a082:	3c01      	subs	r4, #1
    a084:	b2a4      	uxth	r4, r4
    a086:	42bc      	cmp	r4, r7
    a088:	d101      	bne.n	a08e <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    a08a:	b003      	add	sp, #12
    a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    a08e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    a092:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a094:	2204      	movs	r2, #4
    a096:	1b80      	subs	r0, r0, r6
    a098:	eb0d 0102 	add.w	r1, sp, r2
    a09c:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
    a09e:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a0a0:	f7ff ff48 	bl	9f34 <memcpy>
    a0a4:	e7ed      	b.n	a082 <mem_init+0x24>

0000a0a6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    a0a8:	6804      	ldr	r4, [r0, #0]
{
    a0aa:	4605      	mov	r5, r0
	if (*mem_head) {
    a0ac:	b18c      	cbz	r4, a0d2 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a0ae:	1de3      	adds	r3, r4, #7
    a0b0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a0b4:	2204      	movs	r2, #4
    a0b6:	4621      	mov	r1, r4
    a0b8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a0bc:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    a0be:	f7ff ff39 	bl	9f34 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a0c2:	9b01      	ldr	r3, [sp, #4]
    a0c4:	b123      	cbz	r3, a0d0 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    a0c6:	1dda      	adds	r2, r3, #7
    a0c8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    a0cc:	3e01      	subs	r6, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    a0ce:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a0d0:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
    a0d2:	4620      	mov	r0, r4
    a0d4:	b002      	add	sp, #8
    a0d6:	bd70      	pop	{r4, r5, r6, pc}

0000a0d8 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    a0d8:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a0da:	680c      	ldr	r4, [r1, #0]
{
    a0dc:	4606      	mov	r6, r0
    a0de:	460d      	mov	r5, r1
	if (*mem_head) {
    a0e0:	b11c      	cbz	r4, a0ea <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a0e2:	1de3      	adds	r3, r4, #7
    a0e4:	f023 0303 	bic.w	r3, r3, #3
    a0e8:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    a0ea:	2204      	movs	r2, #4
    a0ec:	4629      	mov	r1, r5
    a0ee:	4630      	mov	r0, r6
    a0f0:	f7ff ff20 	bl	9f34 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    a0f4:	1df2      	adds	r2, r6, #7
    a0f6:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    a0fa:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    a0fc:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    a0fe:	602e      	str	r6, [r5, #0]
}
    a100:	bd70      	pop	{r4, r5, r6, pc}

0000a102 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    a102:	b510      	push	{r4, lr}
	src += len;
    a104:	4411      	add	r1, r2
	while (len--) {
    a106:	3801      	subs	r0, #1
    a108:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a10c:	3a01      	subs	r2, #1
    a10e:	b292      	uxth	r2, r2
    a110:	429a      	cmp	r2, r3
    a112:	d100      	bne.n	a116 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    a114:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    a116:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    a11a:	f800 4f01 	strb.w	r4, [r0, #1]!
    a11e:	e7f5      	b.n	a10c <mem_rcopy+0xa>

0000a120 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    a120:	4401      	add	r1, r0
    a122:	4288      	cmp	r0, r1
    a124:	d101      	bne.n	a12a <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    a126:	2000      	movs	r0, #0
    a128:	4770      	bx	lr
		if (*src++) {
    a12a:	f810 3b01 	ldrb.w	r3, [r0], #1
    a12e:	2b00      	cmp	r3, #0
    a130:	d0f7      	beq.n	a122 <mem_nz+0x2>
			return 1;
    a132:	2001      	movs	r0, #1
}
    a134:	4770      	bx	lr

0000a136 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    a136:	6010      	str	r0, [r2, #0]
    a138:	6008      	str	r0, [r1, #0]

	return link;
}
    a13a:	4770      	bx	lr

0000a13c <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    a13c:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    a13e:	6814      	ldr	r4, [r2, #0]
    a140:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    a142:	6814      	ldr	r4, [r2, #0]
    a144:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
    a146:	6010      	str	r0, [r2, #0]

	return link;
}
    a148:	bd10      	pop	{r4, pc}

0000a14a <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    a14a:	4288      	cmp	r0, r1
    a14c:	d003      	beq.n	a156 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    a14e:	b11a      	cbz	r2, a158 <memq_peek+0xe>
		*mem = head->mem;
    a150:	6843      	ldr	r3, [r0, #4]
    a152:	6013      	str	r3, [r2, #0]
    a154:	4770      	bx	lr
		return NULL;
    a156:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    a158:	4770      	bx	lr

0000a15a <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    a15a:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    a15c:	4283      	cmp	r3, r0
    a15e:	d009      	beq.n	a174 <memq_dequeue+0x1a>
	if (mem) {
    a160:	b122      	cbz	r2, a16c <memq_dequeue+0x12>
		*mem = head->mem;
    a162:	6858      	ldr	r0, [r3, #4]
    a164:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    a166:	681a      	ldr	r2, [r3, #0]
    a168:	600a      	str	r2, [r1, #0]

	return old_head;
    a16a:	e001      	b.n	a170 <memq_dequeue+0x16>
	if (old_head == NULL) {
    a16c:	2b00      	cmp	r3, #0
    a16e:	d1fa      	bne.n	a166 <memq_dequeue+0xc>
}
    a170:	4618      	mov	r0, r3
    a172:	4770      	bx	lr
		return NULL; /* queue is empty */
    a174:	2300      	movs	r3, #0
    a176:	e7fb      	b.n	a170 <memq_dequeue+0x16>

0000a178 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    a178:	b510      	push	{r4, lr}
    a17a:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
    a17c:	2000      	movs	r0, #0

	while (octets_len--) {
    a17e:	3901      	subs	r1, #1
    a180:	b2c9      	uxtb	r1, r1
    a182:	29ff      	cmp	r1, #255	; 0xff
    a184:	d100      	bne.n	a188 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    a186:	bd10      	pop	{r4, pc}
		bite = *octets;
    a188:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    a18c:	2b00      	cmp	r3, #0
    a18e:	d0f6      	beq.n	a17e <util_ones_count_get+0x6>
			bite &= (bite - 1);
    a190:	b25b      	sxtb	r3, r3
    a192:	1e5c      	subs	r4, r3, #1
    a194:	4023      	ands	r3, r4
			one_count++;
    a196:	3001      	adds	r0, #1
			bite &= (bite - 1);
    a198:	b2db      	uxtb	r3, r3
			one_count++;
    a19a:	b2c0      	uxtb	r0, r0
    a19c:	e7f6      	b.n	a18c <util_ones_count_get+0x14>

0000a19e <ticks_to_expire_prep>:
{
    a19e:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a1a0:	1a55      	subs	r5, r2, r1
    a1a2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    a1a6:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a1a8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a1aa:	d109      	bne.n	a1c0 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a1ac:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    a1b0:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
    a1b2:	42a3      	cmp	r3, r4
    a1b4:	d90e      	bls.n	a1d4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    a1b6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    a1b8:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    a1ba:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a1bc:	6144      	str	r4, [r0, #20]
}
    a1be:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a1c0:	1a8a      	subs	r2, r1, r2
    a1c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    a1c6:	4293      	cmp	r3, r2
    a1c8:	d901      	bls.n	a1ce <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    a1ca:	1a9b      	subs	r3, r3, r2
    a1cc:	e7f1      	b.n	a1b2 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
    a1ce:	4414      	add	r4, r2
    a1d0:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
    a1d2:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
    a1d4:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
    a1d6:	2300      	movs	r3, #0
    a1d8:	e7ef      	b.n	a1ba <ticks_to_expire_prep+0x1c>

0000a1da <ticker_job_op_cb>:
{
    a1da:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a1dc:	2200      	movs	r2, #0
    a1de:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
    a1e2:	6299      	str	r1, [r3, #40]	; 0x28
{
    a1e4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    a1e6:	b10a      	cbz	r2, a1ec <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a1e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a1ea:	4710      	bx	r2
}
    a1ec:	4770      	bx	lr

0000a1ee <ticker_job_list_insert>:
{
    a1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1f2:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
    a1f4:	6803      	ldr	r3, [r0, #0]
    a1f6:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    a1f8:	f890 a009 	ldrb.w	sl, [r0, #9]
	users = &instance->users[0];
    a1fc:	6843      	ldr	r3, [r0, #4]
    a1fe:	9305      	str	r3, [sp, #20]
{
    a200:	4605      	mov	r5, r0
    a202:	4688      	mov	r8, r1
	while (count_user--) {
    a204:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    a208:	fa5f fa83 	uxtb.w	sl, r3
    a20c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    a210:	d102      	bne.n	a218 <ticker_job_list_insert+0x2a>
}
    a212:	b009      	add	sp, #36	; 0x24
    a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
    a218:	9b05      	ldr	r3, [sp, #20]
    a21a:	eb03 09ca 	add.w	r9, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
    a21e:	f8d9 3004 	ldr.w	r3, [r9, #4]
		user_ops_first = user->first;
    a222:	f899 6001 	ldrb.w	r6, [r9, #1]
		user_ops = (void *)&user->user_op[0];
    a226:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    a228:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a22c:	d06c      	beq.n	a308 <ticker_job_list_insert+0x11a>
				ticker = &node[id_insert];
    a22e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a232:	9a01      	ldr	r2, [sp, #4]
    a234:	0103      	lsls	r3, r0, #4
    a236:	46c3      	mov	fp, r8
				insert_head = ticker->next;
    a238:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
    a23c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
				user_op = NULL;
    a240:	2400      	movs	r4, #0
	ticker->next = TICKER_NULL;
    a242:	23ff      	movs	r3, #255	; 0xff
    a244:	7003      	strb	r3, [r0, #0]
	node = &instance->nodes[0];
    a246:	682f      	ldr	r7, [r5, #0]
	previous = TICKER_NULL;
    a248:	9303      	str	r3, [sp, #12]
	ticker_new = &node[id];
    a24a:	fa0f fc8b 	sxth.w	ip, fp
    a24e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    a252:	ea4f 120c 	mov.w	r2, ip, lsl #4
    a256:	eb07 1c0c 	add.w	ip, r7, ip, lsl #4
    a25a:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
    a25c:	f8dc 1008 	ldr.w	r1, [ip, #8]
	current = instance->ticker_id_head;
    a260:	7f6a      	ldrb	r2, [r5, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a262:	2aff      	cmp	r2, #255	; 0xff
    a264:	d00b      	beq.n	a27e <ticker_job_list_insert+0x90>
		(ticker_current = &node[current])->ticks_to_expire))) {
    a266:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    a26a:	ea4f 130e 	mov.w	r3, lr, lsl #4
    a26e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
    a272:	9307      	str	r3, [sp, #28]
		(ticks_to_expire_current =
    a274:	f8de 3008 	ldr.w	r3, [lr, #8]
    a278:	9302      	str	r3, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a27a:	4299      	cmp	r1, r3
    a27c:	d26e      	bcs.n	a35c <ticker_job_list_insert+0x16e>
	ticker_new->next = current;
    a27e:	9b06      	ldr	r3, [sp, #24]
	ticker_new->ticks_to_expire = ticks_to_expire;
    a280:	f8cc 1008 	str.w	r1, [ip, #8]
	ticker_new->next = current;
    a284:	54fa      	strb	r2, [r7, r3]
	if (previous == TICKER_NULL) {
    a286:	9b03      	ldr	r3, [sp, #12]
    a288:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
    a28a:	bf17      	itett	ne
    a28c:	f9bd 300c 	ldrshne.w	r3, [sp, #12]
		instance->ticker_id_head = id;
    a290:	f885 b01d 	strbeq.w	fp, [r5, #29]
		node[previous].next = id;
    a294:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
    a298:	011b      	lslne	r3, r3, #4
    a29a:	bf18      	it	ne
    a29c:	f807 b003 	strbne.w	fp, [r7, r3]
	if (current != TICKER_NULL) {
    a2a0:	2aff      	cmp	r2, #255	; 0xff
    a2a2:	d006      	beq.n	a2b2 <ticker_job_list_insert+0xc4>
		node[current].ticks_to_expire -= ticks_to_expire;
    a2a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a2a8:	eb07 1202 	add.w	r2, r7, r2, lsl #4
    a2ac:	6893      	ldr	r3, [r2, #8]
    a2ae:	1a59      	subs	r1, r3, r1
    a2b0:	6091      	str	r1, [r2, #8]
	ticker->req = ticker->ack + 1;
    a2b2:	7883      	ldrb	r3, [r0, #2]
    a2b4:	3301      	adds	r3, #1
    a2b6:	7043      	strb	r3, [r0, #1]
			if (user_op) {
    a2b8:	2c00      	cmp	r4, #0
    a2ba:	d0b5      	beq.n	a228 <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
    a2bc:	2100      	movs	r1, #0
    a2be:	4620      	mov	r0, r4
    a2c0:	f7ff ff8b 	bl	a1da <ticker_job_op_cb>
    a2c4:	e7b0      	b.n	a228 <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
    a2c6:	9a04      	ldr	r2, [sp, #16]
    a2c8:	2334      	movs	r3, #52	; 0x34
    a2ca:	fb16 f303 	smulbb	r3, r6, r3
    a2ce:	18d4      	adds	r4, r2, r3
				first = user_ops_first + 1;
    a2d0:	3601      	adds	r6, #1
				if (first == user->count_user_op) {
    a2d2:	f899 2000 	ldrb.w	r2, [r9]
				first = user_ops_first + 1;
    a2d6:	b2f6      	uxtb	r6, r6
					first = 0U;
    a2d8:	42b2      	cmp	r2, r6
    a2da:	bf08      	it	eq
    a2dc:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a2de:	9a04      	ldr	r2, [sp, #16]
    a2e0:	5cd3      	ldrb	r3, [r2, r3]
    a2e2:	2b04      	cmp	r3, #4
    a2e4:	d110      	bne.n	a308 <ticker_job_list_insert+0x11a>
				id_insert = user_op->id;
    a2e6:	f894 b001 	ldrb.w	fp, [r4, #1]
				ticker = &node[id_insert];
    a2ea:	9b01      	ldr	r3, [sp, #4]
    a2ec:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    a2f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
				if (((ticker->req -
    a2f4:	7847      	ldrb	r7, [r0, #1]
				      ticker->ack) & 0xff) != 0U) {
    a2f6:	7883      	ldrb	r3, [r0, #2]
				if (((ticker->req -
    a2f8:	1aff      	subs	r7, r7, r3
    a2fa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    a2fe:	d008      	beq.n	a312 <ticker_job_list_insert+0x124>
					ticker_job_op_cb(user_op,
    a300:	2101      	movs	r1, #1
    a302:	4620      	mov	r0, r4
    a304:	f7ff ff69 	bl	a1da <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    a308:	f899 3002 	ldrb.w	r3, [r9, #2]
    a30c:	42b3      	cmp	r3, r6
    a30e:	d1da      	bne.n	a2c6 <ticker_job_list_insert+0xd8>
    a310:	e778      	b.n	a204 <ticker_job_list_insert+0x16>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    a312:	8aa2      	ldrh	r2, [r4, #20]
				ticker_job_op_start(ticker, user_op,
    a314:	6969      	ldr	r1, [r5, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    a316:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a31a:	429a      	cmp	r2, r3
    a31c:	bf0c      	ite	eq
    a31e:	2301      	moveq	r3, #1
    a320:	2300      	movne	r3, #0
    a322:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    a326:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a328:	6283      	str	r3, [r0, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    a32a:	68e3      	ldr	r3, [r4, #12]
    a32c:	6043      	str	r3, [r0, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    a32e:	6923      	ldr	r3, [r4, #16]
    a330:	6203      	str	r3, [r0, #32]
	ticker->ticks_slot = start->ticks_slot;
    a332:	69a3      	ldr	r3, [r4, #24]
    a334:	6183      	str	r3, [r0, #24]
	ticker->timeout_func = start->fp_timeout_func;
    a336:	69e3      	ldr	r3, [r4, #28]
    a338:	60c3      	str	r3, [r0, #12]
	ticker->context = start->context;
    a33a:	6a23      	ldr	r3, [r4, #32]
    a33c:	6103      	str	r3, [r0, #16]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a33e:	bf08      	it	eq
    a340:	2200      	moveq	r2, #0
	ticker->ticks_to_expire = start->ticks_first;
    a342:	68a3      	ldr	r3, [r4, #8]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    a344:	8382      	strh	r2, [r0, #28]
	ticker->ticks_to_expire = start->ticks_first;
    a346:	6083      	str	r3, [r0, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    a348:	6862      	ldr	r2, [r4, #4]
	ticker->ticks_to_expire_minus = 0U;
    a34a:	6147      	str	r7, [r0, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    a34c:	f7ff ff27 	bl	a19e <ticks_to_expire_prep>
	ticker->force = 1U;
    a350:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    a354:	6247      	str	r7, [r0, #36]	; 0x24
	ticker->lazy_current = 0U;
    a356:	83c7      	strh	r7, [r0, #30]
	ticker->force = 1U;
    a358:	70c3      	strb	r3, [r0, #3]
}
    a35a:	e772      	b.n	a242 <ticker_job_list_insert+0x54>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    a35c:	9b02      	ldr	r3, [sp, #8]
    a35e:	1ac9      	subs	r1, r1, r3
    a360:	d105      	bne.n	a36e <ticker_job_list_insert+0x180>
    a362:	f8bc 301e 	ldrh.w	r3, [ip, #30]
    a366:	f8be e01e 	ldrh.w	lr, [lr, #30]
    a36a:	4573      	cmp	r3, lr
    a36c:	d803      	bhi.n	a376 <ticker_job_list_insert+0x188>
		current = ticker_current->next;
    a36e:	9b07      	ldr	r3, [sp, #28]
    a370:	9203      	str	r2, [sp, #12]
    a372:	5cfa      	ldrb	r2, [r7, r3]
    a374:	e775      	b.n	a262 <ticker_job_list_insert+0x74>
		(ticks_to_expire_current =
    a376:	9902      	ldr	r1, [sp, #8]
    a378:	e781      	b.n	a27e <ticker_job_list_insert+0x90>

0000a37a <ticker_worker>:
{
    a37a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    a37e:	7f87      	ldrb	r7, [r0, #30]
	instance->worker_trigger = 1U;
    a380:	2301      	movs	r3, #1
{
    a382:	b089      	sub	sp, #36	; 0x24
    a384:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
    a386:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    a388:	b91f      	cbnz	r7, a392 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
    a38a:	7f43      	ldrb	r3, [r0, #29]
    a38c:	2bff      	cmp	r3, #255	; 0xff
    a38e:	d103      	bne.n	a398 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
    a390:	77c7      	strb	r7, [r0, #31]
}
    a392:	b009      	add	sp, #36	; 0x24
    a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    a398:	f7fc f99a 	bl	66d0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a39c:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
    a39e:	f895 801d 	ldrb.w	r8, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a3a2:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    a3a4:	7f2b      	ldrb	r3, [r5, #28]
    a3a6:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a3a8:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    a3ac:	d027      	beq.n	a3fe <ticker_worker+0x84>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    a3ae:	69af      	ldr	r7, [r5, #24]
	u8_t slot_reserved = 0;
    a3b0:	455f      	cmp	r7, fp
    a3b2:	bf94      	ite	ls
    a3b4:	2300      	movls	r3, #0
    a3b6:	2301      	movhi	r3, #1
    a3b8:	9301      	str	r3, [sp, #4]
	node = &instance->nodes[0];
    a3ba:	f8d5 a000 	ldr.w	sl, [r5]
	ticks_expired = 0U;
    a3be:	f04f 0900 	mov.w	r9, #0
	while (ticker_id_head != TICKER_NULL) {
    a3c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a3c6:	d11c      	bne.n	a402 <ticker_worker+0x88>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    a3c8:	7aea      	ldrb	r2, [r5, #11]
    a3ca:	7aab      	ldrb	r3, [r5, #10]
    a3cc:	4293      	cmp	r3, r2
    a3ce:	d105      	bne.n	a3dc <ticker_worker+0x62>
	u8_t idx = *ticks_elapsed_index + 1;
    a3d0:	3301      	adds	r3, #1
    a3d2:	b2db      	uxtb	r3, r3
		idx = 0U;
    a3d4:	2b02      	cmp	r3, #2
    a3d6:	bf08      	it	eq
    a3d8:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    a3da:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a3dc:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a3de:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a3e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a3e4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a3e6:	f8c3 900c 	str.w	r9, [r3, #12]
	instance->worker_trigger = 0U;
    a3ea:	2300      	movs	r3, #0
    a3ec:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a3ee:	2104      	movs	r1, #4
    a3f0:	462b      	mov	r3, r5
    a3f2:	2003      	movs	r0, #3
    a3f4:	46a4      	mov	ip, r4
}
    a3f6:	b009      	add	sp, #36	; 0x24
    a3f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a3fc:	4760      	bx	ip
	u8_t slot_reserved = 0;
    a3fe:	9701      	str	r7, [sp, #4]
    a400:	e7db      	b.n	a3ba <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    a402:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    a406:	eb0a 1408 	add.w	r4, sl, r8, lsl #4
    a40a:	ea4f 1208 	mov.w	r2, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    a40e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a410:	459b      	cmp	fp, r3
    a412:	d3d9      	bcc.n	a3c8 <ticker_worker+0x4e>
		if (ticker->ticks_slot != 0U &&
    a414:	69a6      	ldr	r6, [r4, #24]
		ticker_id_head = ticker->next;
    a416:	f81a 8002 	ldrb.w	r8, [sl, r2]
		ticks_elapsed -= ticks_to_expire;
    a41a:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
    a41e:	4499      	add	r9, r3
		if (ticker->ticks_slot != 0U &&
    a420:	2e00      	cmp	r6, #0
    a422:	d034      	beq.n	a48e <ticker_worker+0x114>
    a424:	9b01      	ldr	r3, [sp, #4]
    a426:	2b00      	cmp	r3, #0
    a428:	f040 8089 	bne.w	a53e <ticker_worker+0x1c4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    a42c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    a430:	461f      	mov	r7, r3
    a432:	3380      	adds	r3, #128	; 0x80
    a434:	d02a      	beq.n	a48c <ticker_worker+0x112>
    a436:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a43a:	d027      	beq.n	a48c <ticker_worker+0x112>
		s32_t lazy_current = ticker->lazy_current;
    a43c:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    a43e:	8ba2      	ldrh	r2, [r4, #28]
    a440:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    a442:	bf28      	it	cs
    a444:	1a9b      	subcs	r3, r3, r2
		u32_t current_age = ticker->ticks_periodic +
    a446:	6862      	ldr	r2, [r4, #4]
    a448:	fb03 2202 	mla	r2, r3, r2, r2
    a44c:	9204      	str	r2, [sp, #16]
				(lazy_current - ticker->priority);
    a44e:	1bdb      	subs	r3, r3, r7
		u32_t acc_ticks_to_expire = 0U;
    a450:	2200      	movs	r2, #0
		u32_t current_age = ticker->ticks_periodic +
    a452:	46c6      	mov	lr, r8
		u32_t acc_ticks_to_expire = 0U;
    a454:	9202      	str	r2, [sp, #8]
				(lazy_current - ticker->priority);
    a456:	9307      	str	r3, [sp, #28]
			struct ticker_node *ticker_next = &nodes[id_head];
    a458:	fa0f fe8e 	sxth.w	lr, lr
    a45c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    a460:	ea4f 130e 	mov.w	r3, lr, lsl #4
    a464:	eb0a 1e0e 	add.w	lr, sl, lr, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    a468:	9a02      	ldr	r2, [sp, #8]
			struct ticker_node *ticker_next = &nodes[id_head];
    a46a:	9306      	str	r3, [sp, #24]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    a46c:	f8de 3008 	ldr.w	r3, [lr, #8]
    a470:	441a      	add	r2, r3
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    a472:	4296      	cmp	r6, r2
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    a474:	9202      	str	r2, [sp, #8]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    a476:	d309      	bcc.n	a48c <ticker_worker+0x112>
			if (ticker_next->ticks_slot == 0U) {
    a478:	f8de 2018 	ldr.w	r2, [lr, #24]
    a47c:	2a00      	cmp	r2, #0
    a47e:	d130      	bne.n	a4e2 <ticker_worker+0x168>
			id_head = ticker_next->next;
    a480:	9b06      	ldr	r3, [sp, #24]
    a482:	f81a e003 	ldrb.w	lr, [sl, r3]
		while (id_head != TICKER_NULL) {
    a486:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    a48a:	d1e5      	bne.n	a458 <ticker_worker+0xde>
		must_expire_skip = 0U;
    a48c:	2600      	movs	r6, #0
		if (ticker->ext_data) {
    a48e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a490:	b113      	cbz	r3, a498 <ticker_worker+0x11e>
			ticker->ext_data->ticks_drift = 0U;
    a492:	2200      	movs	r2, #0
    a494:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
    a496:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    a498:	78a2      	ldrb	r2, [r4, #2]
    a49a:	7863      	ldrb	r3, [r4, #1]
    a49c:	1a9b      	subs	r3, r3, r2
    a49e:	b2db      	uxtb	r3, r3
    a4a0:	2b01      	cmp	r3, #1
    a4a2:	d18e      	bne.n	a3c2 <ticker_worker+0x48>
		if (ticker->timeout_func) {
    a4a4:	68e3      	ldr	r3, [r4, #12]
		ticker->ack--;
    a4a6:	3a01      	subs	r2, #1
    a4a8:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    a4aa:	461f      	mov	r7, r3
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d088      	beq.n	a3c2 <ticker_worker+0x48>
					   ticks_expired -
    a4b0:	6960      	ldr	r0, [r4, #20]
    a4b2:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
    a4b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    a4b6:	eba9 0000 	sub.w	r0, r9, r0
    a4ba:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    a4bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    a4c0:	2e00      	cmp	r6, #0
    a4c2:	d160      	bne.n	a586 <ticker_worker+0x20c>
    a4c4:	8be2      	ldrh	r2, [r4, #30]
    a4c6:	6923      	ldr	r3, [r4, #16]
    a4c8:	47b8      	blx	r7
			if (must_expire_skip == 0U) {
    a4ca:	2e00      	cmp	r6, #0
    a4cc:	f47f af79 	bne.w	a3c2 <ticker_worker+0x48>
				if (ticker->ticks_slot != 0U) {
    a4d0:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
    a4d2:	83e6      	strh	r6, [r4, #30]
					slot_reserved = 1U;
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	9b01      	ldr	r3, [sp, #4]
				ticker->force = 0U;
    a4d8:	70e6      	strb	r6, [r4, #3]
					slot_reserved = 1U;
    a4da:	bf18      	it	ne
    a4dc:	2301      	movne	r3, #1
    a4de:	9301      	str	r3, [sp, #4]
    a4e0:	e76f      	b.n	a3c2 <ticker_worker+0x48>
			s32_t lazy_next = ticker_next->lazy_current;
    a4e2:	f8be 001e 	ldrh.w	r0, [lr, #30]
				ticker_next->lazy_periodic > lazy_next;
    a4e6:	f8be c01c 	ldrh.w	ip, [lr, #28]
				ticker_next->priority;
    a4ea:	f99e 102d 	ldrsb.w	r1, [lr, #45]	; 0x2d
    a4ee:	9103      	str	r1, [sp, #12]
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
    a4f0:	f8de 1004 	ldr.w	r1, [lr, #4]
			if (!lazy_next_periodic_skip) {
    a4f4:	4560      	cmp	r0, ip
			s32_t lazy_next = ticker_next->lazy_current;
    a4f6:	4602      	mov	r2, r0
				lazy_next -= ticker_next->lazy_periodic;
    a4f8:	bf28      	it	cs
    a4fa:	eba0 020c 	subcs.w	r2, r0, ip
					  0U :
    a4fe:	2900      	cmp	r1, #0
    a500:	d03c      	beq.n	a57c <ticker_worker+0x202>
    a502:	1acb      	subs	r3, r1, r3
    a504:	9305      	str	r3, [sp, #20]
			if (!lazy_next_periodic_skip &&
    a506:	4560      	cmp	r0, ip
			u8_t next_force = (ticker_next->force > ticker->force);
    a508:	f89e 3003 	ldrb.w	r3, [lr, #3]
    a50c:	f894 e003 	ldrb.w	lr, [r4, #3]
			if (!lazy_next_periodic_skip &&
    a510:	d3b6      	bcc.n	a480 <ticker_worker+0x106>
    a512:	4573      	cmp	r3, lr
    a514:	d813      	bhi.n	a53e <ticker_worker+0x1c4>
			    (next_force ||
    a516:	9b03      	ldr	r3, [sp, #12]
    a518:	3380      	adds	r3, #128	; 0x80
    a51a:	d010      	beq.n	a53e <ticker_worker+0x1c4>
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
    a51c:	9b05      	ldr	r3, [sp, #20]
    a51e:	fb01 3302 	mla	r3, r1, r2, r3
				(lazy_next - ticker_next->priority) >
    a522:	9903      	ldr	r1, [sp, #12]
    a524:	1a52      	subs	r2, r2, r1
			     next_is_critical ||
    a526:	9907      	ldr	r1, [sp, #28]
    a528:	428a      	cmp	r2, r1
    a52a:	dd02      	ble.n	a532 <ticker_worker+0x1b8>
			    (next_has_priority && !current_is_older) ||
    a52c:	9a04      	ldr	r2, [sp, #16]
    a52e:	429a      	cmp	r2, r3
    a530:	d905      	bls.n	a53e <ticker_worker+0x1c4>
    a532:	9903      	ldr	r1, [sp, #12]
    a534:	428f      	cmp	r7, r1
    a536:	d1a3      	bne.n	a480 <ticker_worker+0x106>
			    (equal_priority && next_is_older))) {
    a538:	9a04      	ldr	r2, [sp, #16]
    a53a:	429a      	cmp	r2, r3
    a53c:	d2a0      	bcs.n	a480 <ticker_worker+0x106>
			struct ticker_ext *ext_data = ticker->ext_data;
    a53e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    a540:	8be2      	ldrh	r2, [r4, #30]
    a542:	b143      	cbz	r3, a556 <ticker_worker+0x1dc>
    a544:	6819      	ldr	r1, [r3, #0]
    a546:	b1d9      	cbz	r1, a580 <ticker_worker+0x206>
			    ext_data->ticks_slot_window != 0U &&
    a548:	7a19      	ldrb	r1, [r3, #8]
    a54a:	b9c9      	cbnz	r1, a580 <ticker_worker+0x206>
			    TICKER_RESCHEDULE_STATE_NONE &&
    a54c:	8ba1      	ldrh	r1, [r4, #28]
    a54e:	4291      	cmp	r1, r2
    a550:	d816      	bhi.n	a580 <ticker_worker+0x206>
				ext_data->reschedule_state =
    a552:	2101      	movs	r1, #1
				ext_data->reschedule_state =
    a554:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
    a556:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
    a558:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    a55c:	b292      	uxth	r2, r2
    a55e:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    a560:	2900      	cmp	r1, #0
    a562:	f43f af2e 	beq.w	a3c2 <ticker_worker+0x48>
    a566:	8ba1      	ldrh	r1, [r4, #28]
    a568:	4291      	cmp	r1, r2
    a56a:	f4bf af2a 	bcs.w	a3c2 <ticker_worker+0x48>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    a56e:	b11b      	cbz	r3, a578 <ticker_worker+0x1fe>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    a570:	7a1b      	ldrb	r3, [r3, #8]
    a572:	2b01      	cmp	r3, #1
    a574:	f43f af25 	beq.w	a3c2 <ticker_worker+0x48>
			must_expire_skip = 1U;
    a578:	2601      	movs	r6, #1
    a57a:	e788      	b.n	a48e <ticker_worker+0x114>
					  0U :
    a57c:	9105      	str	r1, [sp, #20]
    a57e:	e7c2      	b.n	a506 <ticker_worker+0x18c>
				ext_data->reschedule_state =
    a580:	f04f 0100 	mov.w	r1, #0
    a584:	e7e6      	b.n	a554 <ticker_worker+0x1da>
			ticker->timeout_func(ticks_at_expire,
    a586:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a58a:	e79c      	b.n	a4c6 <ticker_worker+0x14c>

0000a58c <ticker_start>:
{
    a58c:	b510      	push	{r4, lr}
    a58e:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a590:	2400      	movs	r4, #0
    a592:	9409      	str	r4, [sp, #36]	; 0x24
    a594:	9c14      	ldr	r4, [sp, #80]	; 0x50
    a596:	9408      	str	r4, [sp, #32]
    a598:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a59a:	9407      	str	r4, [sp, #28]
    a59c:	9c12      	ldr	r4, [sp, #72]	; 0x48
    a59e:	9406      	str	r4, [sp, #24]
    a5a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
    a5a2:	9405      	str	r4, [sp, #20]
    a5a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    a5a6:	9404      	str	r4, [sp, #16]
    a5a8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    a5ac:	9403      	str	r4, [sp, #12]
    a5ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a5b0:	9402      	str	r4, [sp, #8]
    a5b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    a5b4:	9401      	str	r4, [sp, #4]
    a5b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a5b8:	9400      	str	r4, [sp, #0]
    a5ba:	f7f9 ff93 	bl	44e4 <ticker_start_ext>
}
    a5be:	b00a      	add	sp, #40	; 0x28
    a5c0:	bd10      	pop	{r4, pc}

0000a5c2 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    a5c2:	f7fc b885 	b.w	66d0 <cntr_cnt_get>

0000a5c6 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a5c6:	1a40      	subs	r0, r0, r1
}
    a5c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a5cc:	4770      	bx	lr

0000a5ce <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    a5ce:	2300      	movs	r3, #0
    a5d0:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    a5d2:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    a5d4:	4770      	bx	lr

0000a5d6 <hci_evt_create>:
{
    a5d6:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    a5d8:	3008      	adds	r0, #8
{
    a5da:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    a5dc:	2102      	movs	r1, #2
{
    a5de:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    a5e0:	f000 f9e3 	bl	a9aa <net_buf_simple_add>
	hdr->evt = evt;
    a5e4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    a5e6:	7044      	strb	r4, [r0, #1]
}
    a5e8:	bd38      	pop	{r3, r4, r5, pc}

0000a5ea <bt_hci_evt_create>:
{
    a5ea:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    a5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    a5f0:	460e      	mov	r6, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    a5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a5f6:	2100      	movs	r1, #0
{
    a5f8:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    a5fa:	f7f9 f9ff 	bl	39fc <bt_buf_get_evt>
	hci_evt_create(buf, evt, len);
    a5fe:	4632      	mov	r2, r6
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    a600:	4604      	mov	r4, r0
	hci_evt_create(buf, evt, len);
    a602:	4629      	mov	r1, r5
    a604:	f7ff ffe7 	bl	a5d6 <hci_evt_create>
}
    a608:	4620      	mov	r0, r4
    a60a:	bd70      	pop	{r4, r5, r6, pc}

0000a60c <bt_hci_cmd_complete_create>:
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a60c:	3103      	adds	r1, #3
{
    a60e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a610:	b2c9      	uxtb	r1, r1
{
    a612:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a614:	200e      	movs	r0, #14
    a616:	f7ff ffe8 	bl	a5ea <bt_hci_evt_create>
	cc = net_buf_add(buf, sizeof(*cc));
    a61a:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    a61c:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
    a61e:	3008      	adds	r0, #8
    a620:	f000 f9c3 	bl	a9aa <net_buf_simple_add>
	cc->ncmd = 1U;
    a624:	2301      	movs	r3, #1
    a626:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
    a628:	f8a0 5001 	strh.w	r5, [r0, #1]
}
    a62c:	4620      	mov	r0, r4
    a62e:	bd38      	pop	{r3, r4, r5, pc}

0000a630 <bt_hci_cmd_status_create>:
{
    a630:	b570      	push	{r4, r5, r6, lr}
    a632:	4605      	mov	r5, r0
    a634:	460e      	mov	r6, r1
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a636:	200f      	movs	r0, #15
    a638:	2104      	movs	r1, #4
    a63a:	f7ff ffd6 	bl	a5ea <bt_hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    a63e:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    a640:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
    a642:	3008      	adds	r0, #8
    a644:	f000 f9b1 	bl	a9aa <net_buf_simple_add>
	cs->ncmd = 1U;
    a648:	2201      	movs	r2, #1
	cs->status = status;
    a64a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
    a64c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
    a64e:	8045      	strh	r5, [r0, #2]
}
    a650:	4620      	mov	r0, r4
    a652:	bd70      	pop	{r4, r5, r6, pc}

0000a654 <hci_get_class>:
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    a654:	2000      	movs	r0, #0
    a656:	4770      	bx	lr

0000a658 <hci_init>:
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    a658:	4770      	bx	lr

0000a65a <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_trng_get(buf, len);
    a65a:	f7fb bc8d 	b.w	5f78 <lll_trng_get>

0000a65e <disabled_cb>:
	z_impl_k_sem_give(sem);
    a65e:	f7fe ba15 	b.w	8a8c <z_impl_k_sem_give>

0000a662 <ull_adv_init>:
}
    a662:	2000      	movs	r0, #0
    a664:	4770      	bx	lr

0000a666 <ull_adv_reset>:
{
    a666:	b508      	push	{r3, lr}
		(void)disable(handle);
    a668:	f7fb f99c 	bl	59a4 <disable.constprop.0>
}
    a66c:	2000      	movs	r0, #0
    a66e:	bd08      	pop	{r3, pc}

0000a670 <ull_adv_is_enabled>:
{
    a670:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
    a672:	f7fb f989 	bl	5988 <ull_adv_is_enabled_get>
}
    a676:	3800      	subs	r0, #0
    a678:	bf18      	it	ne
    a67a:	2001      	movne	r0, #1
    a67c:	bd08      	pop	{r3, pc}

0000a67e <ull_adv_filter_pol_get>:
{
    a67e:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
    a680:	f7fb f982 	bl	5988 <ull_adv_is_enabled_get>
	if (!adv) {
    a684:	b110      	cbz	r0, a68c <ull_adv_filter_pol_get+0xe>
	return adv->lll.filter_policy;
    a686:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    a68a:	0980      	lsrs	r0, r0, #6
}
    a68c:	bd08      	pop	{r3, pc}

0000a68e <ll_wl_size_get>:
}
    a68e:	2008      	movs	r0, #8
    a690:	4770      	bx	lr

0000a692 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
    a692:	2000      	movs	r0, #0
    a694:	f7f9 ba4c 	b.w	3b30 <mayfly_run>

0000a698 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a698:	4668      	mov	r0, sp
    a69a:	f020 0107 	bic.w	r1, r0, #7
    a69e:	468d      	mov	sp, r1
    a6a0:	b501      	push	{r0, lr}
	isr_radio();
    a6a2:	f7fc f8c5 	bl	6830 <isr_radio>
	ISR_DIRECT_PM();
    a6a6:	f7f7 fa5b 	bl	1b60 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    a6aa:	f7f7 fd55 	bl	2158 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a6ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    a6b2:	4685      	mov	sp, r0
    a6b4:	4770      	bx	lr

0000a6b6 <lll_rng_isr_get>:
    a6b6:	f7fb bc6d 	b.w	5f94 <lll_trng_isr_get>

0000a6ba <lll_reset>:
}
    a6ba:	2000      	movs	r0, #0
    a6bc:	4770      	bx	lr

0000a6be <lll_prepare>:
{
    a6be:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
    a6c0:	2400      	movs	r4, #0
    a6c2:	9401      	str	r4, [sp, #4]
    a6c4:	9c04      	ldr	r4, [sp, #16]
    a6c6:	9400      	str	r4, [sp, #0]
    a6c8:	f7fb fbba 	bl	5e40 <prepare>
}
    a6cc:	b002      	add	sp, #8
    a6ce:	bd10      	pop	{r4, pc}

0000a6d0 <lll_prepare_done>:
}
    a6d0:	2000      	movs	r0, #0
    a6d2:	4770      	bx	lr

0000a6d4 <lll_evt_offset_get>:
{
    a6d4:	4603      	mov	r3, r0
    a6d6:	e9d0 2000 	ldrd	r2, r0, [r0]
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
    a6da:	2a00      	cmp	r2, #0
    a6dc:	da04      	bge.n	a6e8 <lll_evt_offset_get+0x14>
		return MAX(evt->ticks_active_to_start,
    a6de:	689b      	ldr	r3, [r3, #8]
    a6e0:	4298      	cmp	r0, r3
    a6e2:	bf38      	it	cc
    a6e4:	4618      	movcc	r0, r3
    a6e6:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
    a6e8:	4290      	cmp	r0, r2
    a6ea:	bf38      	it	cc
    a6ec:	4610      	movcc	r0, r2
}
    a6ee:	4770      	bx	lr

0000a6f0 <lll_preempt_calc>:
{
    a6f0:	b510      	push	{r4, lr}
    a6f2:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
    a6f4:	f7ff ff65 	bl	a5c2 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
    a6f8:	4621      	mov	r1, r4
    a6fa:	f7ff ff64 	bl	a5c6 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
    a6fe:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
    a700:	0203      	lsls	r3, r0, #8
    a702:	d404      	bmi.n	a70e <lll_preempt_calc+0x1e>
    a704:	2809      	cmp	r0, #9
    a706:	bf94      	ite	ls
    a708:	2000      	movls	r0, #0
    a70a:	2001      	movhi	r0, #1
}
    a70c:	bd10      	pop	{r4, pc}
	return 0;
    a70e:	2000      	movs	r0, #0
    a710:	e7fc      	b.n	a70c <lll_preempt_calc+0x1c>

0000a712 <is_abort_cb>:
}
    a712:	f06f 0047 	mvn.w	r0, #71	; 0x47
    a716:	4770      	bx	lr

0000a718 <isr_race>:
	radio_status_reset();
    a718:	f7fc b968 	b.w	69ec <radio_status_reset>

0000a71c <isr_abort>:
{
    a71c:	b510      	push	{r4, lr}
    a71e:	4604      	mov	r4, r0
	radio_status_reset();
    a720:	f7fc f964 	bl	69ec <radio_status_reset>
	radio_tmr_status_reset();
    a724:	f7fc fa20 	bl	6b68 <radio_tmr_status_reset>
	radio_filter_status_reset();
    a728:	f7fc fa06 	bl	6b38 <radio_filter_status_reset>
	radio_ar_status_reset();
    a72c:	f7fc fad4 	bl	6cd8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    a730:	f7fc f9ca 	bl	6ac8 <radio_rssi_status_reset>
	radio_filter_disable();
    a734:	f7fc f9f6 	bl	6b24 <radio_filter_disable>
	isr_cleanup(param);
    a738:	4620      	mov	r0, r4
}
    a73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
    a73e:	f7fb bd43 	b.w	61c8 <isr_cleanup>

0000a742 <isr_done>:
{
    a742:	b510      	push	{r4, lr}
    a744:	4604      	mov	r4, r0
	radio_status_reset();
    a746:	f7fc f951 	bl	69ec <radio_status_reset>
	radio_tmr_status_reset();
    a74a:	f7fc fa0d 	bl	6b68 <radio_tmr_status_reset>
	radio_filter_status_reset();
    a74e:	f7fc f9f3 	bl	6b38 <radio_filter_status_reset>
	radio_ar_status_reset();
    a752:	f7fc fac1 	bl	6cd8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    a756:	f7fc f9b7 	bl	6ac8 <radio_rssi_status_reset>
	if (lll->chan_map_curr) {
    a75a:	7a23      	ldrb	r3, [r4, #8]
    a75c:	f013 0f38 	tst.w	r3, #56	; 0x38
    a760:	d008      	beq.n	a774 <isr_done+0x32>
		chan_prepare(lll);
    a762:	4620      	mov	r0, r4
    a764:	f7fb fe44 	bl	63f0 <chan_prepare>
		radio_tx_enable();
    a768:	f7fc f928 	bl	69bc <radio_tx_enable>
}
    a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
    a770:	f7fc ba9e 	b.w	6cb0 <radio_tmr_end_capture>
	radio_filter_disable();
    a774:	f7fc f9d6 	bl	6b24 <radio_filter_disable>
	isr_cleanup(param);
    a778:	4620      	mov	r0, r4
}
    a77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
    a77e:	f7fb bd23 	b.w	61c8 <isr_cleanup>

0000a782 <lll_adv_init>:
}
    a782:	2000      	movs	r0, #0
    a784:	4770      	bx	lr

0000a786 <lll_adv_reset>:
    a786:	2000      	movs	r0, #0
    a788:	4770      	bx	lr

0000a78a <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a78a:	b570      	push	{r4, r5, r6, lr}
    a78c:	b08c      	sub	sp, #48	; 0x30
    a78e:	460e      	mov	r6, r1
    a790:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a792:	4601      	mov	r1, r0
    a794:	2210      	movs	r2, #16
    a796:	4668      	mov	r0, sp
{
    a798:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a79a:	f7ff fcb2 	bl	a102 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    a79e:	2210      	movs	r2, #16
    a7a0:	eb0d 0002 	add.w	r0, sp, r2
    a7a4:	4631      	mov	r1, r6
    a7a6:	f7ff fcac 	bl	a102 <mem_rcopy>

	do_ecb(&ecb);
    a7aa:	4668      	mov	r0, sp
    a7ac:	f7fb ff9e 	bl	66ec <do_ecb>

	if (cipher_text_le) {
    a7b0:	b125      	cbz	r5, a7bc <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    a7b2:	2210      	movs	r2, #16
    a7b4:	a908      	add	r1, sp, #32
    a7b6:	4628      	mov	r0, r5
    a7b8:	f7ff fca3 	bl	a102 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    a7bc:	b124      	cbz	r4, a7c8 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    a7be:	2210      	movs	r2, #16
    a7c0:	a908      	add	r1, sp, #32
    a7c2:	4620      	mov	r0, r4
    a7c4:	f7ff fbb6 	bl	9f34 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    a7c8:	b00c      	add	sp, #48	; 0x30
    a7ca:	bd70      	pop	{r4, r5, r6, pc}

0000a7cc <radio_tx_chain_delay_get>:
}
    a7cc:	2001      	movs	r0, #1
    a7ce:	4770      	bx	lr

0000a7d0 <radio_rx_chain_delay_get>:
	switch (phy) {
    a7d0:	2802      	cmp	r0, #2
}
    a7d2:	bf14      	ite	ne
    a7d4:	200a      	movne	r0, #10
    a7d6:	2005      	moveq	r0, #5
    a7d8:	4770      	bx	lr

0000a7da <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    a7da:	4288      	cmp	r0, r1
    a7dc:	d00c      	beq.n	a7f8 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
    a7de:	b978      	cbnz	r0, a800 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
    a7e0:	1e48      	subs	r0, r1, #1
    a7e2:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    a7e4:	bf8c      	ite	hi
    a7e6:	2000      	movhi	r0, #0
    a7e8:	2001      	movls	r0, #1
    a7ea:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    a7ec:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    a7f0:	bf0c      	ite	eq
    a7f2:	2001      	moveq	r0, #1
    a7f4:	2000      	movne	r0, #0
    a7f6:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    a7f8:	2001      	movs	r0, #1
    a7fa:	4770      	bx	lr
    a7fc:	2000      	movs	r0, #0
}
    a7fe:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    a800:	2801      	cmp	r0, #1
    a802:	d0f3      	beq.n	a7ec <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a804:	2802      	cmp	r0, #2
    a806:	d1f9      	bne.n	a7fc <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    a808:	2901      	cmp	r1, #1
    a80a:	e7eb      	b.n	a7e4 <mayfly_prio_is_equal+0xa>

0000a80c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
    a80c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
    a80e:	2000      	movs	r0, #0
    a810:	f7fb bf64 	b.w	66dc <cntr_cmp_set>

0000a814 <sys_put_le32>:
    a814:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    a818:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    a81a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    a81c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    a81e:	0a00      	lsrs	r0, r0, #8
    a820:	704b      	strb	r3, [r1, #1]
    a822:	70c8      	strb	r0, [r1, #3]
}
    a824:	4770      	bx	lr

0000a826 <hci_vendor_read_static_addr>:
				 u8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    a82a:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a82c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    a830:	3201      	adds	r2, #1
{
    a832:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a834:	d106      	bne.n	a844 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a83e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a840:	4293      	cmp	r3, r2
    a842:	d044      	beq.n	a8ce <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    a844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a848:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a84c:	f010 0001 	ands.w	r0, r0, #1
    a850:	d036      	beq.n	a8c0 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
    a852:	4621      	mov	r1, r4
    a854:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
    a858:	f7ff ffdc 	bl	a814 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
    a85c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
    a860:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
    a862:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
    a866:	f063 033f 	orn	r3, r3, #63	; 0x3f
    a86a:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a86c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a870:	3101      	adds	r1, #1
    a872:	f104 0306 	add.w	r3, r4, #6
    a876:	d024      	beq.n	a8c2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a878:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a87c:	3101      	adds	r1, #1
    a87e:	d020      	beq.n	a8c2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a880:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a884:	3101      	adds	r1, #1
    a886:	d01c      	beq.n	a8c2 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
    a888:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a88c:	3101      	adds	r1, #1
    a88e:	d018      	beq.n	a8c2 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
    a890:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    a894:	4619      	mov	r1, r3
    a896:	f7ff ffbd 	bl	a814 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
    a89a:	f104 010a 	add.w	r1, r4, #10
    a89e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    a8a2:	f7ff ffb7 	bl	a814 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
    a8a6:	f104 010e 	add.w	r1, r4, #14
    a8aa:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    a8ae:	f7ff ffb1 	bl	a814 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
    a8b2:	f104 0112 	add.w	r1, r4, #18
    a8b6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    a8ba:	f7ff ffab 	bl	a814 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
    a8be:	2001      	movs	r0, #1
	}

	return 0;
}
    a8c0:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
    a8c2:	2210      	movs	r2, #16
    a8c4:	2100      	movs	r1, #0
    a8c6:	4618      	mov	r0, r3
    a8c8:	f7ff fb5f 	bl	9f8a <memset>
    a8cc:	e7f7      	b.n	a8be <hci_vendor_read_static_addr+0x98>
	return 0;
    a8ce:	2000      	movs	r0, #0
    a8d0:	e7f6      	b.n	a8c0 <hci_vendor_read_static_addr+0x9a>

0000a8d2 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(u8_t ir[16], u8_t er[16])
{
    a8d2:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
    a8d4:	2210      	movs	r2, #16
{
    a8d6:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
    a8d8:	2100      	movs	r1, #0
    a8da:	f7ff fb56 	bl	9f8a <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a8e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    a8e6:	3301      	adds	r3, #1
    a8e8:	d023      	beq.n	a932 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a8ea:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a8ee:	3301      	adds	r3, #1
    a8f0:	d01f      	beq.n	a932 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a8f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a8f6:	3301      	adds	r3, #1
    a8f8:	d01b      	beq.n	a932 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    a8fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a8fe:	3301      	adds	r3, #1
    a900:	d017      	beq.n	a932 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
    a902:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    a906:	4621      	mov	r1, r4
    a908:	f7ff ff84 	bl	a814 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
    a90c:	1d21      	adds	r1, r4, #4
    a90e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    a912:	f7ff ff7f 	bl	a814 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
    a916:	f104 0108 	add.w	r1, r4, #8
    a91a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    a91e:	f7ff ff79 	bl	a814 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
    a922:	f104 010c 	add.w	r1, r4, #12
    a926:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
    a92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
    a92e:	f7ff bf71 	b.w	a814 <sys_put_le32>
		(void)memset(er, 0x00, 16);
    a932:	4620      	mov	r0, r4
    a934:	2210      	movs	r2, #16
}
    a936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
    a93a:	2100      	movs	r1, #0
    a93c:	f7ff bb25 	b.w	9f8a <memset>

0000a940 <fixed_data_unref>:
}
    a940:	4770      	bx	lr

0000a942 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a942:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    a944:	6849      	ldr	r1, [r1, #4]
    a946:	6809      	ldr	r1, [r1, #0]
    a948:	f7fc bb50 	b.w	6fec <net_buf_alloc_len>

0000a94c <net_buf_get>:
{
    a94c:	b570      	push	{r4, r5, r6, lr}
    a94e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
    a950:	f7fd fd18 	bl	8384 <z_impl_k_queue_get>
	if (!buf) {
    a954:	4605      	mov	r5, r0
    a956:	b128      	cbz	r0, a964 <net_buf_get+0x18>
    a958:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    a95a:	7963      	ldrb	r3, [r4, #5]
    a95c:	f013 0301 	ands.w	r3, r3, #1
    a960:	d102      	bne.n	a968 <net_buf_get+0x1c>
	frag->frags = NULL;
    a962:	6023      	str	r3, [r4, #0]
}
    a964:	4628      	mov	r0, r5
    a966:	bd70      	pop	{r4, r5, r6, pc}
    a968:	2300      	movs	r3, #0
    a96a:	2200      	movs	r2, #0
    a96c:	4630      	mov	r0, r6
    a96e:	f7fd fd09 	bl	8384 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    a972:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    a974:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    a976:	f023 0301 	bic.w	r3, r3, #1
    a97a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    a97c:	4604      	mov	r4, r0
    a97e:	e7ec      	b.n	a95a <net_buf_get+0xe>

0000a980 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
    a980:	6883      	ldr	r3, [r0, #8]
    a982:	440b      	add	r3, r1
    a984:	6003      	str	r3, [r0, #0]
}
    a986:	4770      	bx	lr

0000a988 <net_buf_put>:
{
    a988:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
    a98a:	460a      	mov	r2, r1
    a98c:	6814      	ldr	r4, [r2, #0]
    a98e:	b914      	cbnz	r4, a996 <net_buf_put+0xe>
}
    a990:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    a992:	f000 ba92 	b.w	aeba <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    a996:	7953      	ldrb	r3, [r2, #5]
    a998:	f043 0301 	orr.w	r3, r3, #1
    a99c:	7153      	strb	r3, [r2, #5]
    a99e:	4622      	mov	r2, r4
    a9a0:	e7f4      	b.n	a98c <net_buf_put+0x4>

0000a9a2 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    a9a2:	7902      	ldrb	r2, [r0, #4]
    a9a4:	3201      	adds	r2, #1
    a9a6:	7102      	strb	r2, [r0, #4]
	return buf;
}
    a9a8:	4770      	bx	lr

0000a9aa <net_buf_simple_add>:
	return buf->data + buf->len;
    a9aa:	8883      	ldrh	r3, [r0, #4]
    a9ac:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    a9ae:	4419      	add	r1, r3
    a9b0:	8081      	strh	r1, [r0, #4]
	return tail;
}
    a9b2:	18d0      	adds	r0, r2, r3
    a9b4:	4770      	bx	lr

0000a9b6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    a9b6:	b430      	push	{r4, r5}
    a9b8:	8884      	ldrh	r4, [r0, #4]
    a9ba:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
    a9bc:	18a3      	adds	r3, r4, r2
    a9be:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    a9c0:	1928      	adds	r0, r5, r4
}
    a9c2:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    a9c4:	f7ff bab6 	b.w	9f34 <memcpy>

0000a9c8 <net_buf_simple_add_u8>:
    a9c8:	8883      	ldrh	r3, [r0, #4]
    a9ca:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    a9cc:	b510      	push	{r4, lr}
	buf->len += len;
    a9ce:	1c5c      	adds	r4, r3, #1
    a9d0:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    a9d2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    a9d4:	18d0      	adds	r0, r2, r3
    a9d6:	bd10      	pop	{r4, pc}

0000a9d8 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
    a9d8:	4603      	mov	r3, r0
	void *data = buf->data;
    a9da:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
    a9dc:	889a      	ldrh	r2, [r3, #4]
    a9de:	1a52      	subs	r2, r2, r1
	buf->data += len;
    a9e0:	4401      	add	r1, r0
	buf->len -= len;
    a9e2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
    a9e4:	6019      	str	r1, [r3, #0]

	return data;
}
    a9e6:	4770      	bx	lr

0000a9e8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9e8:	6843      	ldr	r3, [r0, #4]
    a9ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a9ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a9f0:	600b      	str	r3, [r1, #0]
}
    a9f2:	2000      	movs	r0, #0
    a9f4:	4770      	bx	lr

0000a9f6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a9f6:	6843      	ldr	r3, [r0, #4]
    a9f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a9fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a9fe:	4042      	eors	r2, r0
    aa00:	400a      	ands	r2, r1
    aa02:	4042      	eors	r2, r0
    p_reg->OUT = value;
    aa04:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    aa08:	2000      	movs	r0, #0
    aa0a:	4770      	bx	lr

0000aa0c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aa0c:	6843      	ldr	r3, [r0, #4]
    aa0e:	685b      	ldr	r3, [r3, #4]
}
    aa10:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    aa12:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    aa16:	4770      	bx	lr

0000aa18 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aa18:	6843      	ldr	r3, [r0, #4]
    aa1a:	685b      	ldr	r3, [r3, #4]
}
    aa1c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    aa1e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    aa22:	4770      	bx	lr

0000aa24 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aa24:	6843      	ldr	r3, [r0, #4]
    aa26:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    aa28:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    aa2c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    aa2e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    aa32:	2000      	movs	r0, #0
    aa34:	4770      	bx	lr

0000aa36 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    aa36:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    aa38:	6858      	ldr	r0, [r3, #4]
{
    aa3a:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    aa3c:	b158      	cbz	r0, aa56 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aa3e:	2400      	movs	r4, #0
    aa40:	4281      	cmp	r1, r0
    aa42:	d113      	bne.n	aa6c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    aa44:	6808      	ldr	r0, [r1, #0]
    aa46:	b95c      	cbnz	r4, aa60 <gpio_nrfx_manage_callback+0x2a>
    aa48:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    aa4a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    aa4c:	42a1      	cmp	r1, r4
    aa4e:	d100      	bne.n	aa52 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    aa50:	6098      	str	r0, [r3, #8]
	parent->next = child;
    aa52:	2000      	movs	r0, #0
    aa54:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    aa56:	b972      	cbnz	r2, aa76 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    aa58:	2000      	movs	r0, #0
}
    aa5a:	bd30      	pop	{r4, r5, pc}
    aa5c:	4628      	mov	r0, r5
    aa5e:	e7ef      	b.n	aa40 <gpio_nrfx_manage_callback+0xa>
    aa60:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    aa62:	6898      	ldr	r0, [r3, #8]
    aa64:	4281      	cmp	r1, r0
	list->tail = node;
    aa66:	bf08      	it	eq
    aa68:	609c      	streq	r4, [r3, #8]
}
    aa6a:	e7f2      	b.n	aa52 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aa6c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aa6e:	4604      	mov	r4, r0
    aa70:	2d00      	cmp	r5, #0
    aa72:	d1f3      	bne.n	aa5c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    aa74:	b13a      	cbz	r2, aa86 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    aa76:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    aa78:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    aa7a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    aa7c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    aa7e:	2800      	cmp	r0, #0
    aa80:	d1ea      	bne.n	aa58 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    aa82:	6099      	str	r1, [r3, #8]
}
    aa84:	e7e9      	b.n	aa5a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    aa86:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    aa8a:	e7e6      	b.n	aa5a <gpio_nrfx_manage_callback+0x24>

0000aa8c <fire_callbacks>:
{
    aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    aa8e:	68c7      	ldr	r7, [r0, #12]
{
    aa90:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    aa92:	6879      	ldr	r1, [r7, #4]
{
    aa94:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    aa96:	b199      	cbz	r1, aac0 <fire_callbacks+0x34>
	return node->next;
    aa98:	680c      	ldr	r4, [r1, #0]
    aa9a:	2c00      	cmp	r4, #0
    aa9c:	bf38      	it	cc
    aa9e:	2400      	movcc	r4, #0
		if ((cb->pin_mask & pins) & data->int_en) {
    aaa0:	688a      	ldr	r2, [r1, #8]
    aaa2:	693b      	ldr	r3, [r7, #16]
    aaa4:	4032      	ands	r2, r6
    aaa6:	421a      	tst	r2, r3
    aaa8:	d002      	beq.n	aab0 <fire_callbacks+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    aaaa:	684b      	ldr	r3, [r1, #4]
    aaac:	4628      	mov	r0, r5
    aaae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    aab0:	b134      	cbz	r4, aac0 <fire_callbacks+0x34>
    aab2:	6823      	ldr	r3, [r4, #0]
    aab4:	2b00      	cmp	r3, #0
    aab6:	bf38      	it	cc
    aab8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aaba:	4621      	mov	r1, r4
    aabc:	461c      	mov	r4, r3
    aabe:	e7ef      	b.n	aaa0 <fire_callbacks+0x14>
}
    aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000aac2 <check_level_trigger_pins>:
{
    aac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    aac4:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    aac6:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    aac8:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    aacc:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    aace:	e9d3 1006 	ldrd	r1, r0, [r3, #24]
    aad2:	4301      	orrs	r1, r0
    aad4:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    aad8:	6879      	ldr	r1, [r7, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    aada:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
    aadc:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
    aae0:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
    aae2:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    aae6:	2501      	movs	r5, #1
	u32_t pin = 0U;
    aae8:	2600      	movs	r6, #0
	while (level_pins) {
    aaea:	b90a      	cbnz	r2, aaf0 <check_level_trigger_pins+0x2e>
}
    aaec:	4620      	mov	r0, r4
    aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
    aaf0:	422a      	tst	r2, r5
    aaf2:	d009      	beq.n	ab08 <check_level_trigger_pins+0x46>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    aaf4:	7a3b      	ldrb	r3, [r7, #8]
    aaf6:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    aafa:	2100      	movs	r1, #0
    aafc:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ab00:	f7fc fbb0 	bl	7264 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ab04:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    ab08:	3601      	adds	r6, #1
		bit <<= 1;
    ab0a:	006d      	lsls	r5, r5, #1
    ab0c:	e7ed      	b.n	aaea <check_level_trigger_pins+0x28>

0000ab0e <gpio_nrfx_pin_disable_callback>:
{
    ab0e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    ab10:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    ab12:	2301      	movs	r3, #1
    ab14:	fa03 f201 	lsl.w	r2, r3, r1
    ab18:	6923      	ldr	r3, [r4, #16]
    ab1a:	ea23 0302 	bic.w	r3, r3, r2
    ab1e:	6123      	str	r3, [r4, #16]
}
    ab20:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    ab22:	f7fc bbb3 	b.w	728c <gpiote_pin_int_cfg>

0000ab26 <cfg_level_pins>:
{
    ab26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    ab28:	68c4      	ldr	r4, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    ab2a:	6847      	ldr	r7, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    ab2c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    ab30:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    ab32:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
    ab36:	430b      	orrs	r3, r1
    ab38:	ea22 0203 	bic.w	r2, r2, r3
	u32_t bit = 1U << pin;
    ab3c:	2601      	movs	r6, #1
	u32_t pin = 0U;
    ab3e:	2500      	movs	r5, #0
	while (level_pins) {
    ab40:	b902      	cbnz	r2, ab44 <cfg_level_pins+0x1e>
}
    ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
    ab44:	4216      	tst	r6, r2
    ab46:	d00f      	beq.n	ab68 <cfg_level_pins+0x42>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ab48:	6961      	ldr	r1, [r4, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ab4a:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ab4c:	40e9      	lsrs	r1, r5
    ab4e:	f001 0101 	and.w	r1, r1, #1
    ab52:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ab56:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ab5a:	b2c9      	uxtb	r1, r1
    ab5c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ab60:	f7fc fb80 	bl	7264 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ab64:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    ab68:	3501      	adds	r5, #1
		bit <<= 1;
    ab6a:	0076      	lsls	r6, r6, #1
    ab6c:	e7e8      	b.n	ab40 <cfg_level_pins+0x1a>

0000ab6e <gpio_nrfx_pin_enable_callback>:
{
    ab6e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    ab70:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    ab72:	2301      	movs	r3, #1
    ab74:	fa03 f201 	lsl.w	r2, r3, r1
    ab78:	6923      	ldr	r3, [r4, #16]
    ab7a:	4313      	orrs	r3, r2
    ab7c:	6123      	str	r3, [r4, #16]
}
    ab7e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    ab80:	f7fc bb84 	b.w	728c <gpiote_pin_int_cfg>

0000ab84 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    ab84:	68c2      	ldr	r2, [r0, #12]
{
    ab86:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    ab88:	e892 0003 	ldmia.w	r2, {r0, r1}
    ab8c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    ab90:	2000      	movs	r0, #0
    ab92:	4770      	bx	lr

0000ab94 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    ab94:	68c2      	ldr	r2, [r0, #12]
{
    ab96:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    ab98:	e892 0003 	ldmia.w	r2, {r0, r1}
    ab9c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    aba0:	2000      	movs	r0, #0
    aba2:	4770      	bx	lr

0000aba4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    aba4:	6843      	ldr	r3, [r0, #4]
    aba6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    aba8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    abac:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    abb0:	4770      	bx	lr

0000abb2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    abb2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    abb4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    abb6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    abb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
{
    abbc:	b082      	sub	sp, #8
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    abbe:	b160      	cbz	r0, abda <uarte_nrfx_poll_in+0x28>
	*c = data->rx_data;
    abc0:	7b12      	ldrb	r2, [r2, #12]
    abc2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abc4:	2000      	movs	r0, #0
    abc6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    abca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    abce:	9201      	str	r2, [sp, #4]
    (void)dummy;
    abd0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    abd2:	2201      	movs	r2, #1
    abd4:	601a      	str	r2, [r3, #0]
}
    abd6:	b002      	add	sp, #8
    abd8:	4770      	bx	lr
		return -1;
    abda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    abde:	e7fa      	b.n	abd6 <uarte_nrfx_poll_in+0x24>

0000abe0 <uarte_nrfx_poll_out>:
{
    abe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    abe4:	6843      	ldr	r3, [r0, #4]
{
    abe6:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    abea:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    abec:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    abee:	f000 fadd 	bl	b1ac <k_is_in_isr>
    abf2:	b9e0      	cbnz	r0, ac2e <uarte_nrfx_poll_out+0x4e>
    abf4:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    abf6:	f106 0708 	add.w	r7, r6, #8
    abfa:	f04f 0801 	mov.w	r8, #1
    abfe:	f3bf 8f5b 	dmb	ish
    ac02:	e857 3f00 	ldrex	r3, [r7]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d103      	bne.n	ac12 <uarte_nrfx_poll_out+0x32>
    ac0a:	e847 8200 	strex	r2, r8, [r7]
    ac0e:	2a00      	cmp	r2, #0
    ac10:	d1f7      	bne.n	ac02 <uarte_nrfx_poll_out+0x22>
    ac12:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    ac16:	d00c      	beq.n	ac32 <uarte_nrfx_poll_out+0x52>
	return z_impl_k_sleep(timeout);
    ac18:	2021      	movs	r0, #33	; 0x21
    ac1a:	2100      	movs	r1, #0
    ac1c:	3d01      	subs	r5, #1
    ac1e:	f7fd ff0f 	bl	8a40 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    ac22:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    ac26:	d1ea      	bne.n	abfe <uarte_nrfx_poll_out+0x1e>
}
    ac28:	b004      	add	sp, #16
    ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    ac2e:	2301      	movs	r3, #1
    ac30:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac32:	2300      	movs	r3, #0
    ac34:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ac38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ac3c:	9303      	str	r3, [sp, #12]
    (void)dummy;
    ac3e:	9b03      	ldr	r3, [sp, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ac40:	f10d 0307 	add.w	r3, sp, #7
    ac44:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ac48:	2301      	movs	r3, #1
    ac4a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac4e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    ac52:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ac54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    ac58:	b923      	cbnz	r3, ac64 <uarte_nrfx_poll_out+0x84>
    ac5a:	2001      	movs	r0, #1
    ac5c:	f000 f807 	bl	ac6e <nrfx_busy_wait>
    ac60:	3d01      	subs	r5, #1
    ac62:	d1f7      	bne.n	ac54 <uarte_nrfx_poll_out+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac64:	2301      	movs	r3, #1
    ac66:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    ac68:	2300      	movs	r3, #0
    ac6a:	60b3      	str	r3, [r6, #8]
    ac6c:	e7dc      	b.n	ac28 <uarte_nrfx_poll_out+0x48>

0000ac6e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    ac6e:	f000 baa3 	b.w	b1b8 <z_impl_k_busy_wait>

0000ac72 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    ac72:	f7ff b908 	b.w	9e86 <z_clock_idle_exit>

0000ac76 <k_heap_init>:
{
    ac76:	b410      	push	{r4}
    ac78:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    ac7c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ac80:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ac82:	f7fe bcc9 	b.w	9618 <sys_heap_init>

0000ac86 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    ac86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac8a:	4604      	mov	r4, r0
    ac8c:	b085      	sub	sp, #20
    ac8e:	460e      	mov	r6, r1
	s64_t now, end = z_timeout_end_calc(timeout);
    ac90:	4610      	mov	r0, r2
    ac92:	4619      	mov	r1, r3
    ac94:	f000 fadb 	bl	b24e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ac98:	f104 0a14 	add.w	sl, r4, #20
	s64_t now, end = z_timeout_end_calc(timeout);
    ac9c:	4605      	mov	r5, r0
    ac9e:	460f      	mov	r7, r1
	__asm__ volatile(
    aca0:	f04f 0220 	mov.w	r2, #32
    aca4:	f3ef 8311 	mrs	r3, BASEPRI
    aca8:	f382 8811 	msr	BASEPRI, r2
    acac:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    acb0:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
    acb4:	4631      	mov	r1, r6
    acb6:	4620      	mov	r0, r4
    acb8:	9303      	str	r3, [sp, #12]
    acba:	f7fe fc55 	bl	9568 <sys_heap_alloc>
    acbe:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
    acc0:	f7fe f92e 	bl	8f20 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    acc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    acc8:	b13a      	cbz	r2, acda <k_heap_alloc+0x54>
	__asm__ volatile(
    acca:	f383 8811 	msr	BASEPRI, r3
    acce:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    acd2:	4610      	mov	r0, r2
    acd4:	b005      	add	sp, #20
    acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    acda:	ebb5 0800 	subs.w	r8, r5, r0
    acde:	eb67 0901 	sbc.w	r9, r7, r1
    ace2:	f1b8 0f01 	cmp.w	r8, #1
    ace6:	f179 0100 	sbcs.w	r1, r9, #0
    acea:	dbee      	blt.n	acca <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    acec:	e9cd 8900 	strd	r8, r9, [sp]
    acf0:	465a      	mov	r2, fp
    acf2:	4619      	mov	r1, r3
    acf4:	4650      	mov	r0, sl
    acf6:	f7fd fdf1 	bl	88dc <z_pend_curr>
	__asm__ volatile(
    acfa:	f04f 0220 	mov.w	r2, #32
    acfe:	f3ef 8311 	mrs	r3, BASEPRI
    ad02:	f382 8811 	msr	BASEPRI, r2
    ad06:	f3bf 8f6f 	isb	sy
    ad0a:	e7d3      	b.n	acb4 <k_heap_alloc+0x2e>

0000ad0c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    ad0c:	b538      	push	{r3, r4, r5, lr}
    ad0e:	4604      	mov	r4, r0
    ad10:	f04f 0320 	mov.w	r3, #32
    ad14:	f3ef 8511 	mrs	r5, BASEPRI
    ad18:	f383 8811 	msr	BASEPRI, r3
    ad1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    ad20:	f7fe fb6f 	bl	9402 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    ad24:	f104 000c 	add.w	r0, r4, #12
    ad28:	f000 fa20 	bl	b16c <z_unpend_all>
    ad2c:	b130      	cbz	r0, ad3c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    ad2e:	4629      	mov	r1, r5
    ad30:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    ad34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    ad38:	f000 b92d 	b.w	af96 <z_reschedule>
	__asm__ volatile(
    ad3c:	f385 8811 	msr	BASEPRI, r5
    ad40:	f3bf 8f6f 	isb	sy
}
    ad44:	bd38      	pop	{r3, r4, r5, pc}

0000ad46 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
    ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad48:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
    ad4c:	6800      	ldr	r0, [r0, #0]
    ad4e:	6048      	str	r0, [r1, #4]
{
    ad50:	4614      	mov	r4, r2
    ad52:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
    ad54:	4632      	mov	r2, r6
    ad56:	463b      	mov	r3, r7
    ad58:	4621      	mov	r1, r4
    ad5a:	f7ff ff94 	bl	ac86 <k_heap_alloc>
    ad5e:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
    ad60:	b144      	cbz	r4, ad74 <k_mem_pool_alloc+0x2e>
    ad62:	b938      	cbnz	r0, ad74 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
    ad64:	ea56 0307 	orrs.w	r3, r6, r7
    ad68:	bf0c      	ite	eq
    ad6a:	f06f 000b 	mvneq.w	r0, #11
    ad6e:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
    ad72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
    ad74:	2000      	movs	r0, #0
    ad76:	e7fc      	b.n	ad72 <k_mem_pool_alloc+0x2c>

0000ad78 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
    ad78:	e9d0 1000 	ldrd	r1, r0, [r0]
    ad7c:	f7ff bfc6 	b.w	ad0c <k_heap_free>

0000ad80 <k_mem_slab_init>:
{
    ad80:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    ad82:	2400      	movs	r4, #0
    ad84:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ad86:	ea41 0402 	orr.w	r4, r1, r2
    ad8a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    ad8e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    ad92:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ad94:	d10c      	bne.n	adb0 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    ad96:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ad98:	42a3      	cmp	r3, r4
    ad9a:	d103      	bne.n	ada4 <k_mem_slab_init+0x24>
    ad9c:	e9c0 0000 	strd	r0, r0, [r0]
}
    ada0:	2000      	movs	r0, #0
}
    ada2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    ada4:	6945      	ldr	r5, [r0, #20]
    ada6:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    ada8:	3401      	adds	r4, #1
		slab->free_list = p;
    adaa:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    adac:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    adae:	e7f3      	b.n	ad98 <k_mem_slab_init+0x18>
		return -EINVAL;
    adb0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    adb4:	e7f5      	b.n	ada2 <k_mem_slab_init+0x22>

0000adb6 <queue_insert>:
{
    adb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    adba:	4604      	mov	r4, r0
    adbc:	460d      	mov	r5, r1
    adbe:	4690      	mov	r8, r2
    adc0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    adc2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    adc6:	f04f 0320 	mov.w	r3, #32
    adca:	f3ef 8711 	mrs	r7, BASEPRI
    adce:	f383 8811 	msr	BASEPRI, r3
    add2:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    add6:	4630      	mov	r0, r6
    add8:	f000 f99b 	bl	b112 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    addc:	b158      	cbz	r0, adf6 <queue_insert+0x40>
    adde:	2400      	movs	r4, #0
    ade0:	6704      	str	r4, [r0, #112]	; 0x70
    ade2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    ade6:	f000 f91e 	bl	b026 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    adea:	4630      	mov	r0, r6
    adec:	4639      	mov	r1, r7
    adee:	f000 f8d2 	bl	af96 <z_reschedule>
	return 0;
    adf2:	2000      	movs	r0, #0
    adf4:	e00c      	b.n	ae10 <queue_insert+0x5a>
	if (alloc) {
    adf6:	f1b9 0f00 	cmp.w	r9, #0
    adfa:	d01b      	beq.n	ae34 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
    adfc:	2008      	movs	r0, #8
    adfe:	f7fe f97d 	bl	90fc <z_thread_malloc>
		if (anode == NULL) {
    ae02:	b938      	cbnz	r0, ae14 <queue_insert+0x5e>
	__asm__ volatile(
    ae04:	f387 8811 	msr	BASEPRI, r7
    ae08:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    ae0c:	f06f 000b 	mvn.w	r0, #11
}
    ae10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    ae14:	2301      	movs	r3, #1
		anode->data = data;
    ae16:	f8c0 8004 	str.w	r8, [r0, #4]
    ae1a:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    ae1c:	6803      	ldr	r3, [r0, #0]
    ae1e:	f003 0203 	and.w	r2, r3, #3
    ae22:	b95d      	cbnz	r5, ae3c <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ae24:	6823      	ldr	r3, [r4, #0]
    ae26:	4313      	orrs	r3, r2
    ae28:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ae2a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    ae2c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ae2e:	b973      	cbnz	r3, ae4e <queue_insert+0x98>
	list->tail = node;
    ae30:	6060      	str	r0, [r4, #4]
}
    ae32:	e00c      	b.n	ae4e <queue_insert+0x98>
	node->next_and_flags = flags;
    ae34:	f8c8 9000 	str.w	r9, [r8]
}
    ae38:	4640      	mov	r0, r8
    ae3a:	e7ef      	b.n	ae1c <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ae3c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    ae3e:	f033 0303 	bics.w	r3, r3, #3
    ae42:	d110      	bne.n	ae66 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ae44:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    ae46:	6862      	ldr	r2, [r4, #4]
    ae48:	b93a      	cbnz	r2, ae5a <queue_insert+0xa4>
	list->head = node;
    ae4a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    ae4e:	2104      	movs	r1, #4
    ae50:	f104 0010 	add.w	r0, r4, #16
    ae54:	f000 fb4c 	bl	b4f0 <z_handle_obj_poll_events>
    ae58:	e7c7      	b.n	adea <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ae5a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ae5c:	f003 0303 	and.w	r3, r3, #3
    ae60:	4303      	orrs	r3, r0
    ae62:	6013      	str	r3, [r2, #0]
    ae64:	e7e4      	b.n	ae30 <queue_insert+0x7a>
    ae66:	4313      	orrs	r3, r2
    ae68:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ae6a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ae6c:	f003 0303 	and.w	r3, r3, #3
    ae70:	4303      	orrs	r3, r0
    ae72:	602b      	str	r3, [r5, #0]
}
    ae74:	e7eb      	b.n	ae4e <queue_insert+0x98>

0000ae76 <z_queue_node_peek>:
{
    ae76:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
    ae78:	4604      	mov	r4, r0
    ae7a:	b130      	cbz	r0, ae8a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ae7c:	6802      	ldr	r2, [r0, #0]
    ae7e:	0793      	lsls	r3, r2, #30
    ae80:	d003      	beq.n	ae8a <z_queue_node_peek+0x14>
		ret = anode->data;
    ae82:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    ae84:	b109      	cbz	r1, ae8a <z_queue_node_peek+0x14>
			k_free(anode);
    ae86:	f000 fb59 	bl	b53c <k_free>
}
    ae8a:	4620      	mov	r0, r4
    ae8c:	bd10      	pop	{r4, pc}

0000ae8e <z_impl_k_queue_init>:
	list->head = NULL;
    ae8e:	2300      	movs	r3, #0
	list->tail = NULL;
    ae90:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
    ae94:	f100 0308 	add.w	r3, r0, #8
    ae98:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
    ae9c:	f100 0310 	add.w	r3, r0, #16
    aea0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
    aea4:	4770      	bx	lr

0000aea6 <k_queue_append>:
{
    aea6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    aea8:	2300      	movs	r3, #0
    aeaa:	6841      	ldr	r1, [r0, #4]
    aeac:	f7ff bf83 	b.w	adb6 <queue_insert>

0000aeb0 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
    aeb0:	2300      	movs	r3, #0
{
    aeb2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
    aeb4:	4619      	mov	r1, r3
    aeb6:	f7ff bf7e 	b.w	adb6 <queue_insert>

0000aeba <k_queue_append_list>:
{
    aeba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aebe:	4605      	mov	r5, r0
    aec0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
    aec2:	460c      	mov	r4, r1
    aec4:	b391      	cbz	r1, af2c <k_queue_append_list+0x72>
    aec6:	b38a      	cbz	r2, af2c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    aec8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    aecc:	f04f 0320 	mov.w	r3, #32
    aed0:	f3ef 8811 	mrs	r8, BASEPRI
    aed4:	f383 8811 	msr	BASEPRI, r3
    aed8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
    aedc:	4638      	mov	r0, r7
    aede:	f000 f918 	bl	b112 <z_unpend_first_thread>
    aee2:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
    aee6:	b920      	cbnz	r0, aef2 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    aee8:	686b      	ldr	r3, [r5, #4]
    aeea:	b9cb      	cbnz	r3, af20 <k_queue_append_list+0x66>
	list->head = node;
    aeec:	602c      	str	r4, [r5, #0]
	list->tail = node;
    aeee:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    aef0:	e00a      	b.n	af08 <k_queue_append_list+0x4e>
    aef2:	6144      	str	r4, [r0, #20]
    aef4:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
	z_ready_thread(thread);
    aef8:	f000 f895 	bl	b026 <z_ready_thread>
		head = *(void **)head;
    aefc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
    aefe:	4638      	mov	r0, r7
    af00:	f000 f907 	bl	b112 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
    af04:	2c00      	cmp	r4, #0
    af06:	d1ee      	bne.n	aee6 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
    af08:	2104      	movs	r1, #4
    af0a:	f105 0010 	add.w	r0, r5, #16
    af0e:	f000 faef 	bl	b4f0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
    af12:	4638      	mov	r0, r7
    af14:	4641      	mov	r1, r8
    af16:	f000 f83e 	bl	af96 <z_reschedule>
	return 0;
    af1a:	2000      	movs	r0, #0
}
    af1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    af20:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    af22:	f001 0103 	and.w	r1, r1, #3
    af26:	430c      	orrs	r4, r1
    af28:	601c      	str	r4, [r3, #0]
}
    af2a:	e7e0      	b.n	aeee <k_queue_append_list+0x34>
		return -EINVAL;
    af2c:	f06f 0015 	mvn.w	r0, #21
    af30:	e7f4      	b.n	af1c <k_queue_append_list+0x62>

0000af32 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    af32:	f990 000e 	ldrsb.w	r0, [r0, #14]
    af36:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    af3a:	4298      	cmp	r0, r3
    af3c:	bfac      	ite	ge
    af3e:	2000      	movge	r0, #0
    af40:	2001      	movlt	r0, #1
    af42:	4770      	bx	lr

0000af44 <z_find_first_thread_to_unpend>:
{
    af44:	b510      	push	{r4, lr}
    af46:	f04f 0320 	mov.w	r3, #32
    af4a:	f3ef 8411 	mrs	r4, BASEPRI
    af4e:	f383 8811 	msr	BASEPRI, r3
    af52:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    af56:	f000 f85c 	bl	b012 <z_priq_dumb_best>
	__asm__ volatile(
    af5a:	f384 8811 	msr	BASEPRI, r4
    af5e:	f3bf 8f6f 	isb	sy
}
    af62:	bd10      	pop	{r4, pc}

0000af64 <z_unpend_thread_no_timeout>:
{
    af64:	b538      	push	{r3, r4, r5, lr}
    af66:	4604      	mov	r4, r0
	__asm__ volatile(
    af68:	f04f 0320 	mov.w	r3, #32
    af6c:	f3ef 8511 	mrs	r5, BASEPRI
    af70:	f383 8811 	msr	BASEPRI, r3
    af74:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    af78:	4601      	mov	r1, r0
    af7a:	6880      	ldr	r0, [r0, #8]
    af7c:	f7fd fa8c 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    af80:	7b63      	ldrb	r3, [r4, #13]
    af82:	f023 0302 	bic.w	r3, r3, #2
    af86:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    af88:	2300      	movs	r3, #0
    af8a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    af8c:	f385 8811 	msr	BASEPRI, r5
    af90:	f3bf 8f6f 	isb	sy
}
    af94:	bd38      	pop	{r3, r4, r5, pc}

0000af96 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    af96:	b921      	cbnz	r1, afa2 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    af98:	f3ef 8005 	mrs	r0, IPSR
    af9c:	b908      	cbnz	r0, afa2 <z_reschedule+0xc>
    af9e:	f7f6 bd47 	b.w	1a30 <arch_swap>
    afa2:	f381 8811 	msr	BASEPRI, r1
    afa6:	f3bf 8f6f 	isb	sy
}
    afaa:	4770      	bx	lr

0000afac <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    afac:	4603      	mov	r3, r0
    afae:	b920      	cbnz	r0, afba <z_reschedule_irqlock+0xe>
    afb0:	f3ef 8205 	mrs	r2, IPSR
    afb4:	b90a      	cbnz	r2, afba <z_reschedule_irqlock+0xe>
    afb6:	f7f6 bd3b 	b.w	1a30 <arch_swap>
    afba:	f383 8811 	msr	BASEPRI, r3
    afbe:	f3bf 8f6f 	isb	sy
}
    afc2:	4770      	bx	lr

0000afc4 <z_reschedule_unlocked>:
	__asm__ volatile(
    afc4:	f04f 0320 	mov.w	r3, #32
    afc8:	f3ef 8011 	mrs	r0, BASEPRI
    afcc:	f383 8811 	msr	BASEPRI, r3
    afd0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    afd4:	f7ff bfea 	b.w	afac <z_reschedule_irqlock>

0000afd8 <z_unpend_thread>:
{
    afd8:	b510      	push	{r4, lr}
    afda:	4601      	mov	r1, r0
    afdc:	f04f 0320 	mov.w	r3, #32
    afe0:	f3ef 8411 	mrs	r4, BASEPRI
    afe4:	f383 8811 	msr	BASEPRI, r3
    afe8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    afec:	6880      	ldr	r0, [r0, #8]
    afee:	f7fd fa53 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    aff2:	7b4b      	ldrb	r3, [r1, #13]
    aff4:	f023 0302 	bic.w	r3, r3, #2
    aff8:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
    affa:	2300      	movs	r3, #0
    affc:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
    affe:	f384 8811 	msr	BASEPRI, r4
    b002:	f3bf 8f6f 	isb	sy
}
    b006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
    b00a:	f101 0018 	add.w	r0, r1, #24
    b00e:	f000 b8da 	b.w	b1c6 <z_abort_timeout>

0000b012 <z_priq_dumb_best>:
{
    b012:	4603      	mov	r3, r0
	return list->head == list;
    b014:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b016:	4283      	cmp	r3, r0
    b018:	d003      	beq.n	b022 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    b01a:	2800      	cmp	r0, #0
    b01c:	bf38      	it	cc
    b01e:	2000      	movcc	r0, #0
    b020:	4770      	bx	lr
	struct k_thread *thread = NULL;
    b022:	2000      	movs	r0, #0
}
    b024:	4770      	bx	lr

0000b026 <z_ready_thread>:
{
    b026:	b510      	push	{r4, lr}
	__asm__ volatile(
    b028:	f04f 0320 	mov.w	r3, #32
    b02c:	f3ef 8411 	mrs	r4, BASEPRI
    b030:	f383 8811 	msr	BASEPRI, r3
    b034:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    b038:	f7fd fa84 	bl	8544 <ready_thread>
	__asm__ volatile(
    b03c:	f384 8811 	msr	BASEPRI, r4
    b040:	f3bf 8f6f 	isb	sy
}
    b044:	bd10      	pop	{r4, pc}

0000b046 <z_thread_timeout>:
{
    b046:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    b048:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    b04c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    b04e:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    b052:	b1c3      	cbz	r3, b086 <z_thread_timeout+0x40>
	__asm__ volatile(
    b054:	f04f 0320 	mov.w	r3, #32
    b058:	f3ef 8511 	mrs	r5, BASEPRI
    b05c:	f383 8811 	msr	BASEPRI, r3
    b060:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    b064:	f850 0c10 	ldr.w	r0, [r0, #-16]
    b068:	f7fd fa16 	bl	8498 <z_priq_dumb_remove>
    b06c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    b070:	f023 0302 	bic.w	r3, r3, #2
    b074:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    b078:	2300      	movs	r3, #0
    b07a:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    b07e:	f385 8811 	msr	BASEPRI, r5
    b082:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    b086:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    b08a:	f023 0314 	bic.w	r3, r3, #20
    b08e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    b092:	4608      	mov	r0, r1
}
    b094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    b098:	f7ff bfc5 	b.w	b026 <z_ready_thread>

0000b09c <z_remove_thread_from_ready_q>:
{
    b09c:	b510      	push	{r4, lr}
	__asm__ volatile(
    b09e:	f04f 0320 	mov.w	r3, #32
    b0a2:	f3ef 8411 	mrs	r4, BASEPRI
    b0a6:	f383 8811 	msr	BASEPRI, r3
    b0aa:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    b0ae:	f7fd fba7 	bl	8800 <unready_thread>
	__asm__ volatile(
    b0b2:	f384 8811 	msr	BASEPRI, r4
    b0b6:	f3bf 8f6f 	isb	sy
}
    b0ba:	bd10      	pop	{r4, pc}

0000b0bc <add_to_waitq_locked>:
{
    b0bc:	b538      	push	{r3, r4, r5, lr}
    b0be:	4604      	mov	r4, r0
    b0c0:	460d      	mov	r5, r1
	unready_thread(thread);
    b0c2:	f7fd fb9d 	bl	8800 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b0c6:	7b63      	ldrb	r3, [r4, #13]
    b0c8:	f043 0302 	orr.w	r3, r3, #2
    b0cc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    b0ce:	b1c5      	cbz	r5, b102 <add_to_waitq_locked+0x46>
	return list->head == list;
    b0d0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    b0d2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0d4:	429d      	cmp	r5, r3
    b0d6:	bf08      	it	eq
    b0d8:	2300      	moveq	r3, #0
    b0da:	2b00      	cmp	r3, #0
    b0dc:	bf38      	it	cc
    b0de:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b0e0:	b183      	cbz	r3, b104 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    b0e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    b0e6:	f993 200e 	ldrsb.w	r2, [r3, #14]
    b0ea:	4291      	cmp	r1, r2
    b0ec:	db04      	blt.n	b0f8 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    b0ee:	686a      	ldr	r2, [r5, #4]
    b0f0:	429a      	cmp	r2, r3
    b0f2:	d007      	beq.n	b104 <add_to_waitq_locked+0x48>
    b0f4:	681b      	ldr	r3, [r3, #0]
    b0f6:	e7f3      	b.n	b0e0 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    b0f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b0fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    b0fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b100:	605c      	str	r4, [r3, #4]
}
    b102:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    b104:	686b      	ldr	r3, [r5, #4]
    b106:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    b108:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    b10a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    b10c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b10e:	606c      	str	r4, [r5, #4]
    b110:	e7f7      	b.n	b102 <add_to_waitq_locked+0x46>

0000b112 <z_unpend_first_thread>:
{
    b112:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b114:	f04f 0320 	mov.w	r3, #32
    b118:	f3ef 8211 	mrs	r2, BASEPRI
    b11c:	f383 8811 	msr	BASEPRI, r3
    b120:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    b124:	f7ff ff75 	bl	b012 <z_priq_dumb_best>
    b128:	4604      	mov	r4, r0
	__asm__ volatile(
    b12a:	f382 8811 	msr	BASEPRI, r2
    b12e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    b132:	b1c8      	cbz	r0, b168 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    b134:	f04f 0320 	mov.w	r3, #32
    b138:	f3ef 8511 	mrs	r5, BASEPRI
    b13c:	f383 8811 	msr	BASEPRI, r3
    b140:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    b144:	4601      	mov	r1, r0
    b146:	6880      	ldr	r0, [r0, #8]
    b148:	f7fd f9a6 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b14c:	7b63      	ldrb	r3, [r4, #13]
    b14e:	f023 0302 	bic.w	r3, r3, #2
    b152:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    b154:	2300      	movs	r3, #0
    b156:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    b158:	f385 8811 	msr	BASEPRI, r5
    b15c:	f3bf 8f6f 	isb	sy
    b160:	f104 0018 	add.w	r0, r4, #24
    b164:	f000 f82f 	bl	b1c6 <z_abort_timeout>
}
    b168:	4620      	mov	r0, r4
    b16a:	bd38      	pop	{r3, r4, r5, pc}

0000b16c <z_unpend_all>:
{
    b16c:	b538      	push	{r3, r4, r5, lr}
    b16e:	4605      	mov	r5, r0
	int need_sched = 0;
    b170:	2000      	movs	r0, #0
	return list->head == list;
    b172:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b174:	42a5      	cmp	r5, r4
    b176:	d000      	beq.n	b17a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b178:	b904      	cbnz	r4, b17c <z_unpend_all+0x10>
}
    b17a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    b17c:	4620      	mov	r0, r4
    b17e:	f7ff ff2b 	bl	afd8 <z_unpend_thread>
		z_ready_thread(thread);
    b182:	4620      	mov	r0, r4
    b184:	f7ff ff4f 	bl	b026 <z_ready_thread>
		need_sched = 1;
    b188:	2001      	movs	r0, #1
    b18a:	e7f2      	b.n	b172 <z_unpend_all+0x6>

0000b18c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
    b18c:	b15a      	cbz	r2, b1a6 <z_impl_k_sem_init+0x1a>
    b18e:	428a      	cmp	r2, r1
    b190:	d309      	bcc.n	b1a6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    b192:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    b196:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    b19a:	e9c0 0000 	strd	r0, r0, [r0]
    b19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    b1a2:	2000      	movs	r0, #0
    b1a4:	4770      	bx	lr
		return -EINVAL;
    b1a6:	f06f 0015 	mvn.w	r0, #21
}
    b1aa:	4770      	bx	lr

0000b1ac <k_is_in_isr>:
    b1ac:	f3ef 8005 	mrs	r0, IPSR
}
    b1b0:	3800      	subs	r0, #0
    b1b2:	bf18      	it	ne
    b1b4:	2001      	movne	r0, #1
    b1b6:	4770      	bx	lr

0000b1b8 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    b1b8:	f7f7 b90a 	b.w	23d0 <arch_busy_wait>

0000b1bc <z_impl_k_thread_name_set>:
}
    b1bc:	f06f 0046 	mvn.w	r0, #70	; 0x46
    b1c0:	4770      	bx	lr

0000b1c2 <k_thread_name_get>:
}
    b1c2:	2000      	movs	r0, #0
    b1c4:	4770      	bx	lr

0000b1c6 <z_abort_timeout>:
{
    b1c6:	b510      	push	{r4, lr}
	__asm__ volatile(
    b1c8:	f04f 0220 	mov.w	r2, #32
    b1cc:	f3ef 8411 	mrs	r4, BASEPRI
    b1d0:	f382 8811 	msr	BASEPRI, r2
    b1d4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    b1d8:	6803      	ldr	r3, [r0, #0]
    b1da:	b13b      	cbz	r3, b1ec <z_abort_timeout+0x26>
			remove_timeout(to);
    b1dc:	f7fd fda2 	bl	8d24 <remove_timeout>
			ret = 0;
    b1e0:	2000      	movs	r0, #0
	__asm__ volatile(
    b1e2:	f384 8811 	msr	BASEPRI, r4
    b1e6:	f3bf 8f6f 	isb	sy
}
    b1ea:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    b1ec:	f06f 0015 	mvn.w	r0, #21
    b1f0:	e7f7      	b.n	b1e2 <z_abort_timeout+0x1c>

0000b1f2 <z_get_next_timeout_expiry>:
{
    b1f2:	b510      	push	{r4, lr}
	__asm__ volatile(
    b1f4:	f04f 0320 	mov.w	r3, #32
    b1f8:	f3ef 8411 	mrs	r4, BASEPRI
    b1fc:	f383 8811 	msr	BASEPRI, r3
    b200:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    b204:	f7fd fda2 	bl	8d4c <next_timeout>
	__asm__ volatile(
    b208:	f384 8811 	msr	BASEPRI, r4
    b20c:	f3bf 8f6f 	isb	sy
}
    b210:	bd10      	pop	{r4, pc}

0000b212 <z_set_timeout_expiry>:
{
    b212:	b570      	push	{r4, r5, r6, lr}
    b214:	4604      	mov	r4, r0
    b216:	460d      	mov	r5, r1
	__asm__ volatile(
    b218:	f04f 0320 	mov.w	r3, #32
    b21c:	f3ef 8611 	mrs	r6, BASEPRI
    b220:	f383 8811 	msr	BASEPRI, r3
    b224:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    b228:	f7fd fd90 	bl	8d4c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b22c:	2801      	cmp	r0, #1
    b22e:	dd05      	ble.n	b23c <z_set_timeout_expiry+0x2a>
    b230:	42a0      	cmp	r0, r4
    b232:	dd03      	ble.n	b23c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    b234:	4629      	mov	r1, r5
    b236:	4620      	mov	r0, r4
    b238:	f7f6 fae2 	bl	1800 <z_clock_set_timeout>
	__asm__ volatile(
    b23c:	f386 8811 	msr	BASEPRI, r6
    b240:	f3bf 8f6f 	isb	sy
}
    b244:	bd70      	pop	{r4, r5, r6, pc}

0000b246 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    b246:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    b248:	f7fd fe6a 	bl	8f20 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    b24c:	bd08      	pop	{r3, pc}

0000b24e <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
    b24e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b250:	1c4b      	adds	r3, r1, #1
    b252:	bf08      	it	eq
    b254:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    b258:	4604      	mov	r4, r0
    b25a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b25c:	d013      	beq.n	b286 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b25e:	ea54 0105 	orrs.w	r1, r4, r5
    b262:	d103      	bne.n	b26c <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
    b264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
    b268:	f7fd be5a 	b.w	8f20 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    b26c:	f06f 0101 	mvn.w	r1, #1
    b270:	1a0a      	subs	r2, r1, r0
    b272:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b276:	eb61 0305 	sbc.w	r3, r1, r5
    b27a:	2a00      	cmp	r2, #0
    b27c:	f173 0100 	sbcs.w	r1, r3, #0
    b280:	db02      	blt.n	b288 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
    b282:	4610      	mov	r0, r2
    b284:	4619      	mov	r1, r3
}
    b286:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
    b288:	f7fd fe4a 	bl	8f20 <z_tick_get>
    b28c:	2c01      	cmp	r4, #1
    b28e:	f175 0300 	sbcs.w	r3, r5, #0
    b292:	bfbc      	itt	lt
    b294:	2401      	movlt	r4, #1
    b296:	2500      	movlt	r5, #0
    b298:	1820      	adds	r0, r4, r0
    b29a:	eb45 0101 	adc.w	r1, r5, r1
    b29e:	e7f2      	b.n	b286 <z_timeout_end_calc+0x38>

0000b2a0 <k_timer_init>:
	timer->status = 0U;
    b2a0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    b2a2:	e9c0 1206 	strd	r1, r2, [r0, #24]
    b2a6:	f100 0210 	add.w	r2, r0, #16
    b2aa:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    b2ae:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    b2b2:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
    b2b4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    b2b6:	4770      	bx	lr

0000b2b8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    b2b8:	b510      	push	{r4, lr}
    b2ba:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    b2bc:	f7ff ff83 	bl	b1c6 <z_abort_timeout>

	if (inactive) {
    b2c0:	b9d8      	cbnz	r0, b2fa <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    b2c2:	69e3      	ldr	r3, [r4, #28]
    b2c4:	b10b      	cbz	r3, b2ca <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    b2c6:	4620      	mov	r0, r4
    b2c8:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    b2ca:	f104 0010 	add.w	r0, r4, #16
    b2ce:	2100      	movs	r1, #0
    b2d0:	f7ff fe38 	bl	af44 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    b2d4:	4604      	mov	r4, r0
    b2d6:	b180      	cbz	r0, b2fa <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    b2d8:	f7ff fe44 	bl	af64 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    b2dc:	4620      	mov	r0, r4
    b2de:	f7ff fea2 	bl	b026 <z_ready_thread>
	__asm__ volatile(
    b2e2:	f04f 0320 	mov.w	r3, #32
    b2e6:	f3ef 8011 	mrs	r0, BASEPRI
    b2ea:	f383 8811 	msr	BASEPRI, r3
    b2ee:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    b2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    b2f6:	f7ff be59 	b.w	afac <z_reschedule_irqlock>
    b2fa:	bd10      	pop	{r4, pc}

0000b2fc <clear_event_registrations>:
	while (num_events--) {
    b2fc:	2314      	movs	r3, #20
{
    b2fe:	b530      	push	{r4, r5, lr}
    b300:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
    b304:	2400      	movs	r4, #0
	while (num_events--) {
    b306:	4281      	cmp	r1, r0
    b308:	d100      	bne.n	b30c <clear_event_registrations+0x10>
}
    b30a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    b30c:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    b310:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    b314:	f003 030f 	and.w	r3, r3, #15
    b318:	2b02      	cmp	r3, #2
    b31a:	d80a      	bhi.n	b332 <clear_event_registrations+0x36>
    b31c:	b15b      	cbz	r3, b336 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
    b31e:	f851 3c14 	ldr.w	r3, [r1, #-20]
    b322:	b143      	cbz	r3, b336 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
    b324:	f851 5c10 	ldr.w	r5, [r1, #-16]
    b328:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    b32a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    b32c:	e941 4405 	strd	r4, r4, [r1, #-20]
	sys_dnode_init(node);
}
    b330:	e001      	b.n	b336 <clear_event_registrations+0x3a>
	switch (event->type) {
    b332:	2b04      	cmp	r3, #4
    b334:	d0f3      	beq.n	b31e <clear_event_registrations+0x22>
	__asm__ volatile(
    b336:	f382 8811 	msr	BASEPRI, r2
    b33a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    b33e:	f04f 0320 	mov.w	r3, #32
    b342:	f3ef 8211 	mrs	r2, BASEPRI
    b346:	f383 8811 	msr	BASEPRI, r3
    b34a:	f3bf 8f6f 	isb	sy
    b34e:	3914      	subs	r1, #20
    b350:	e7d9      	b.n	b306 <clear_event_registrations+0xa>

0000b352 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
    b352:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
    b354:	6884      	ldr	r4, [r0, #8]
{
    b356:	4605      	mov	r5, r0
    b358:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
    b35a:	b19c      	cbz	r4, b384 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
    b35c:	68a3      	ldr	r3, [r4, #8]
    b35e:	b95b      	cbnz	r3, b378 <signal_poll_event+0x26>
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
    b360:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
    b362:	4618      	mov	r0, r3
	event->poller = NULL;
    b364:	2300      	movs	r3, #0
    b366:	60ab      	str	r3, [r5, #8]
	event->state |= state;
    b368:	68eb      	ldr	r3, [r5, #12]
    b36a:	f3c3 3104 	ubfx	r1, r3, #12, #5
    b36e:	430e      	orrs	r6, r1
    b370:	f366 3310 	bfi	r3, r6, #12, #5
    b374:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    b376:	e004      	b.n	b382 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
    b378:	4798      	blx	r3
		poller->is_polling = false;
    b37a:	2300      	movs	r3, #0
		if (retcode < 0) {
    b37c:	2800      	cmp	r0, #0
		poller->is_polling = false;
    b37e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
    b380:	daf0      	bge.n	b364 <signal_poll_event+0x12>
}
    b382:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
    b384:	4620      	mov	r0, r4
    b386:	e7ed      	b.n	b364 <signal_poll_event+0x12>

0000b388 <k_poll_poller_cb>:
{
    b388:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
    b38a:	6883      	ldr	r3, [r0, #8]
    b38c:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
    b38e:	7b63      	ldrb	r3, [r4, #13]
    b390:	079a      	lsls	r2, r3, #30
{
    b392:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
    b394:	d50e      	bpl.n	b3b4 <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
    b396:	6a23      	ldr	r3, [r4, #32]
    b398:	3302      	adds	r3, #2
    b39a:	d014      	beq.n	b3c6 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
    b39c:	4620      	mov	r0, r4
    b39e:	f7ff fe1b 	bl	afd8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    b3a2:	2d08      	cmp	r5, #8
    b3a4:	bf0c      	ite	eq
    b3a6:	f06f 0303 	mvneq.w	r3, #3
    b3aa:	2300      	movne	r3, #0
    b3ac:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    b3ae:	7b63      	ldrb	r3, [r4, #13]
    b3b0:	06db      	lsls	r3, r3, #27
    b3b2:	d001      	beq.n	b3b8 <k_poll_poller_cb+0x30>
		return 0;
    b3b4:	2000      	movs	r0, #0
}
    b3b6:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
    b3b8:	69a5      	ldr	r5, [r4, #24]
    b3ba:	2d00      	cmp	r5, #0
    b3bc:	d1fa      	bne.n	b3b4 <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
    b3be:	4620      	mov	r0, r4
    b3c0:	f7ff fe31 	bl	b026 <z_ready_thread>
	return 0;
    b3c4:	e7f6      	b.n	b3b4 <k_poll_poller_cb+0x2c>
		return -EAGAIN;
    b3c6:	f06f 000a 	mvn.w	r0, #10
    b3ca:	e7f4      	b.n	b3b6 <k_poll_poller_cb+0x2e>

0000b3cc <add_event>:
{
    b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3ce:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    b3d0:	e9d0 2300 	ldrd	r2, r3, [r0]
    b3d4:	4290      	cmp	r0, r2
    b3d6:	4604      	mov	r4, r0
    b3d8:	460d      	mov	r5, r1
    b3da:	d106      	bne.n	b3ea <add_event+0x1e>
	node->prev = list->tail;
    b3dc:	6863      	ldr	r3, [r4, #4]
    b3de:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    b3e0:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    b3e2:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
    b3e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b3e6:	6065      	str	r5, [r4, #4]
}
    b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    b3ea:	2b00      	cmp	r3, #0
    b3ec:	d0f6      	beq.n	b3dc <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
    b3ee:	689b      	ldr	r3, [r3, #8]
    b3f0:	6879      	ldr	r1, [r7, #4]
    b3f2:	6858      	ldr	r0, [r3, #4]
    b3f4:	f7ff fd9d 	bl	af32 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    b3f8:	2800      	cmp	r0, #0
    b3fa:	d1ef      	bne.n	b3dc <add_event+0x10>
	return list->head == list;
    b3fc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3fe:	42b4      	cmp	r4, r6
    b400:	d0ec      	beq.n	b3dc <add_event+0x10>
    b402:	2e00      	cmp	r6, #0
    b404:	bf38      	it	cc
    b406:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    b408:	2e00      	cmp	r6, #0
    b40a:	d0e7      	beq.n	b3dc <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
    b40c:	68b3      	ldr	r3, [r6, #8]
    b40e:	6878      	ldr	r0, [r7, #4]
    b410:	6859      	ldr	r1, [r3, #4]
    b412:	f7ff fd8e 	bl	af32 <z_is_t1_higher_prio_than_t2>
    b416:	b128      	cbz	r0, b424 <add_event+0x58>
	node->prev = successor->prev;
    b418:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    b41a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
    b41e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b420:	6075      	str	r5, [r6, #4]
			return;
    b422:	e7e1      	b.n	b3e8 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
    b424:	6863      	ldr	r3, [r4, #4]
    b426:	42b3      	cmp	r3, r6
    b428:	d0d8      	beq.n	b3dc <add_event+0x10>
    b42a:	6836      	ldr	r6, [r6, #0]
    b42c:	e7ec      	b.n	b408 <add_event+0x3c>

0000b42e <register_events>:
{
    b42e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    b432:	f04f 0a00 	mov.w	sl, #0
{
    b436:	460e      	mov	r6, r1
    b438:	4614      	mov	r4, r2
    b43a:	461f      	mov	r7, r3
    b43c:	4683      	mov	fp, r0
	int events_registered = 0;
    b43e:	4655      	mov	r5, sl
	event->poller = NULL;
    b440:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
    b442:	45b2      	cmp	sl, r6
    b444:	db02      	blt.n	b44c <register_events+0x1e>
}
    b446:	4628      	mov	r0, r5
    b448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b44c:	f04f 0320 	mov.w	r3, #32
    b450:	f3ef 8911 	mrs	r9, BASEPRI
    b454:	f383 8811 	msr	BASEPRI, r3
    b458:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    b45c:	f89b 200d 	ldrb.w	r2, [fp, #13]
    b460:	f002 020f 	and.w	r2, r2, #15
    b464:	2a02      	cmp	r2, #2
    b466:	d006      	beq.n	b476 <register_events+0x48>
    b468:	2a04      	cmp	r2, #4
    b46a:	d008      	beq.n	b47e <register_events+0x50>
    b46c:	2a01      	cmp	r2, #1
    b46e:	d120      	bne.n	b4b2 <register_events+0x84>
		if (event->signal->signaled != 0U) {
    b470:	f8db 3010 	ldr.w	r3, [fp, #16]
    b474:	e001      	b.n	b47a <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
    b476:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
    b47a:	689b      	ldr	r3, [r3, #8]
    b47c:	e002      	b.n	b484 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
    b47e:	f8db 3010 	ldr.w	r3, [fp, #16]
    b482:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
    b484:	b1ab      	cbz	r3, b4b2 <register_events+0x84>
	event->state |= state;
    b486:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
    b48a:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
    b48e:	f3c3 3104 	ubfx	r1, r3, #12, #5
    b492:	430a      	orrs	r2, r1
    b494:	f362 3310 	bfi	r3, r2, #12, #5
    b498:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
    b49c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    b4a0:	f389 8811 	msr	BASEPRI, r9
    b4a4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    b4a8:	f10a 0a01 	add.w	sl, sl, #1
    b4ac:	f10b 0b14 	add.w	fp, fp, #20
    b4b0:	e7c7      	b.n	b442 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
    b4b2:	2f00      	cmp	r7, #0
    b4b4:	d1f4      	bne.n	b4a0 <register_events+0x72>
    b4b6:	7823      	ldrb	r3, [r4, #0]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d0f1      	beq.n	b4a0 <register_events+0x72>
	switch (event->type) {
    b4bc:	f89b 300d 	ldrb.w	r3, [fp, #13]
    b4c0:	f003 030f 	and.w	r3, r3, #15
    b4c4:	2b02      	cmp	r3, #2
    b4c6:	d008      	beq.n	b4da <register_events+0xac>
    b4c8:	2b04      	cmp	r3, #4
    b4ca:	d006      	beq.n	b4da <register_events+0xac>
    b4cc:	2b01      	cmp	r3, #1
    b4ce:	d10b      	bne.n	b4e8 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
    b4d0:	f8db 0010 	ldr.w	r0, [fp, #16]
    b4d4:	4622      	mov	r2, r4
    b4d6:	4659      	mov	r1, fp
    b4d8:	e004      	b.n	b4e4 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
    b4da:	f8db 0010 	ldr.w	r0, [fp, #16]
    b4de:	4622      	mov	r2, r4
    b4e0:	4659      	mov	r1, fp
    b4e2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    b4e4:	f7ff ff72 	bl	b3cc <add_event>
	event->poller = poller;
    b4e8:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
    b4ec:	3501      	adds	r5, #1
    b4ee:	e7d7      	b.n	b4a0 <register_events+0x72>

0000b4f0 <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    b4f0:	4603      	mov	r3, r0
	return list->head == list;
    b4f2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    b4f4:	4283      	cmp	r3, r0
    b4f6:	d008      	beq.n	b50a <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
    b4f8:	e9d0 3200 	ldrd	r3, r2, [r0]
    b4fc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    b4fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b500:	2300      	movs	r3, #0
	node->prev = NULL;
    b502:	e9c0 3300 	strd	r3, r3, [r0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
    b506:	f7ff bf24 	b.w	b352 <signal_poll_event>
	}
}
    b50a:	4770      	bx	lr

0000b50c <k_mem_pool_malloc>:
{
    b50c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    b50e:	2408      	movs	r4, #8
    b510:	190a      	adds	r2, r1, r4
    b512:	d208      	bcs.n	b526 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    b514:	2600      	movs	r6, #0
    b516:	2700      	movs	r7, #0
    b518:	e9cd 6700 	strd	r6, r7, [sp]
    b51c:	eb0d 0104 	add.w	r1, sp, r4
    b520:	f7ff fc11 	bl	ad46 <k_mem_pool_alloc>
    b524:	b110      	cbz	r0, b52c <k_mem_pool_malloc+0x20>
		return NULL;
    b526:	2000      	movs	r0, #0
}
    b528:	b004      	add	sp, #16
    b52a:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    b52c:	9802      	ldr	r0, [sp, #8]
    b52e:	4622      	mov	r2, r4
    b530:	a902      	add	r1, sp, #8
    b532:	f7fe fcff 	bl	9f34 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
    b536:	9802      	ldr	r0, [sp, #8]
    b538:	3008      	adds	r0, #8
    b53a:	e7f5      	b.n	b528 <k_mem_pool_malloc+0x1c>

0000b53c <k_free>:
	if (ptr != NULL) {
    b53c:	b110      	cbz	r0, b544 <k_free+0x8>
		k_mem_pool_free_id(ptr);
    b53e:	3808      	subs	r0, #8
    b540:	f7ff bc1a 	b.w	ad78 <k_mem_pool_free_id>
}
    b544:	4770      	bx	lr
